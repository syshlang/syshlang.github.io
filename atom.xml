<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浪迹一生</title>
  
  <subtitle>所谓拥有，皆非束缚；所有过往，皆为序章。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.syshlang.com/"/>
  <updated>2020-01-17T10:40:30.619Z</updated>
  <id>https://www.syshlang.com/</id>
  
  <author>
    <name>浪迹一生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之结构型模式中的适配器模式（Adapter Pattern）</title>
    <link href="https://www.syshlang.com/fbfea71e/"/>
    <id>https://www.syshlang.com/fbfea71e/</id>
    <published>2020-01-17T06:27:22.000Z</published>
    <updated>2020-01-17T10:40:30.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><img data-src="/fbfea71e/Adapter.png" title="Adapter Pattern"><a id="more"></a><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;生活中，我们接触到最多的适配器就是电源适配器，不管是电脑的电源适配器、手机电源适配器，还是其他的电子产品电源适配器，其主要目的都是将家用电源220V转换为电子产品需要的电压，这些适配器的接口有两孔的也有三孔的，实质就是把一个转接头或者电压变换成另外所需要的插口或者电压。拿到编程里面来说，就是将一个类的接口转换成客户端所希望的另外一个接口，这样使得原本不能一起工作的那些类(接口不兼容，方法不匹配等)可以一起工作，主要目的就是处理兼容性。</p></blockquote><h1 id="适配器模式分类"><a href="#适配器模式分类" class="headerlink" title="适配器模式分类"></a>适配器模式分类</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;适配器模式主要分为三类：类适配器、对象适配器、接口适配器。类适配器和对象适配器在实现上有些差别，而接口适配器则差别较大。</p></blockquote><h2 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;类适配器实现的原理主要是通过继承。适配器类（Adapter）通过继承需要被适配的类（Source），实现需要得到的类（Destination）接口，从而完成Adapter到Destination的适配。</p></blockquote><h3 id="日常举例"><a href="#日常举例" class="headerlink" title="日常举例"></a>日常举例</h3><blockquote><p>手机充电的例子，通过手机充电器（Adapter）完成220V电源（Source）到 5V电压（Destination）的转换</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source220V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage220v</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Destination5V</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Source220V</span> <span class="keyword">implements</span> <span class="title">Destination5V</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> voltage220v = outVoltage220v();</span><br><span class="line">        <span class="keyword">return</span> voltage220v/<span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VoltageAdapter voltageAdapter = <span class="keyword">new</span> VoltageAdapter();</span><br><span class="line">        voltageAdapter.outVoltage5v();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;对象配器实现的原理主要是通过组合或聚合。在<a href="/fd78ccb3/" title="《设计模式七大原则之合成复用原则(Composite Reuse Principle)》">《设计模式七大原则之合成复用原则(Composite Reuse Principle)》</a>中，合成复用原则指出尽量使用合成/聚合，尽量不要使用类继承。对象适配器模式思路和类适配器模式基本相同，只不过将适配器类（Adapter）做修改，不再继承需要被适配的类（Source），而是直接持有需要被适配的类（Source），实现需要得到的类（Destination）接口，从而完成Adapter到Destination的适配。</p></blockquote><h3 id="日常举例-1"><a href="#日常举例-1" class="headerlink" title="日常举例"></a>日常举例</h3><blockquote><p>仍然是手机充电的例子，只需要修改适配器类（Adapter），如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span>  <span class="keyword">implements</span> <span class="title">Destination5V</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接持有需要被适配的类（Source）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Source220V source220V;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Source220V source220V)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source220V = source220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> voltage220v = source220V.outVoltage220v();</span><br><span class="line">        <span class="keyword">return</span> voltage220v/<span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VoltageAdapter voltageAdapter = <span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Source220V());</span><br><span class="line">        voltageAdapter.outVoltage5v();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;接口配器实现的原理主要是通过抽象类来实现适配。接口适配器模式的核心思路是，当不需要全部实现接口的方法时，可以先设计一个抽象的类实现接口，并为接口中的每个方法提供一个默认的实现，对于该抽象类的子类就可以有选择的覆盖父类的某些方法，从而达到适配的目的。因此，该模式也被称为缺省适配器模式或是默认适配器模式（Default Adapter Pattern）。</p></blockquote><h3 id="日常举例-2"><a href="#日常举例-2" class="headerlink" title="日常举例"></a>日常举例</h3><blockquote><p>仍然是手机充电的例子，代码实现如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Destination</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outVoltage10v</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outVoltage36v</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outVoltage220v</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractVoltageAdapter</span> <span class="keyword">implements</span> <span class="title">Destination</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage10v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage36v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">36</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage220v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">220</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractVoltageAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outVoltage5v</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> voltage220v = outVoltage220v();</span><br><span class="line">        <span class="keyword">return</span> voltage220v/<span class="number">44</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VoltageAdapter voltageAdapter = <span class="keyword">new</span> VoltageAdapter();</span><br><span class="line">        voltageAdapter.outVoltage5v();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="适配器模式在Spring框架中的应用"><a href="#适配器模式在Spring框架中的应用" class="headerlink" title="适配器模式在Spring框架中的应用"></a>适配器模式在Spring框架中的应用</h1><p>对于SpringMVC有一个很重要的servlet，它有一个方法：<br>org.springframework.web.servlet.DispatcherServlet#getHandlerAdapter<br>截取部分源码如下:<br>源码:org.springframework.web.servlet.DispatcherServlet（片段）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the HandlerAdapter for this handler object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler object to find an adapter for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ServletException if no HandlerAdapter can be found for the handler. This is a fatal error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line"><span class="keyword">return</span> ha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line"><span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:org.springframework.web.servlet.HandlerAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a handler instance, return whether or not this &#123;<span class="doctag">@code</span> HandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * can support it. Typical HandlerAdapters will base the decision on the handler</span></span><br><span class="line"><span class="comment"> * type. HandlerAdapters will usually only support one handler type each.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A typical implementation:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * return (handler instanceof MyHandler);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler handler object to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> whether or not this object can use the given handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Use the given handler to handle this request.</span></span><br><span class="line"><span class="comment"> * The workflow that is required may vary widely.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler handler to use. This object must have previously been passed</span></span><br><span class="line"><span class="comment"> * to the &#123;<span class="doctag">@code</span> supports&#125; method of this interface, which must have</span></span><br><span class="line"><span class="comment"> * returned &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ModelAndView object with the name of the view and the required</span></span><br><span class="line"><span class="comment"> * model data, or &#123;<span class="doctag">@code</span> null&#125; if the request has been handled directly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Same contract as for HttpServlet's &#123;<span class="doctag">@code</span> getLastModified&#125; method.</span></span><br><span class="line"><span class="comment"> * Can simply return -1 if there's no support in the handler class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler handler to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the lastModified value for the given handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#getLastModified</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.servlet.mvc.LastModified#getLastModified</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看HandlerAdapter的继承关系图：</p><img data-src="/fbfea71e/handleradapter.png" title="HandlerAdapter"><blockquote><p><strong>分析：</strong> 从上面的源码片段及HandlerAdapter的继承关系图，可以看出Spring定义了一个适配接口HandlerAdapter，而其实现子类使得每一种Controller都有一种对应的适配器实现类，扩展Controller时只需增加对应的适配器实现类就可以了。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/fbfea71e/Adapter.png&quot; title=&quot;Adapter Pattern&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型模式中的建造者模式（Builder Pattern）</title>
    <link href="https://www.syshlang.com/8cf99788/"/>
    <id>https://www.syshlang.com/8cf99788/</id>
    <published>2020-01-17T00:56:09.000Z</published>
    <updated>2020-01-17T06:30:38.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/8cf99788/builder.jpg" title="Builder Pattern"><a id="more"></a><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;在java开发过程中，我们经常会创建大量的对象，这些对象有简单的也有复杂的，但是不管是简单对象还是复杂对象，构建这些对象的过程是相对稳定的，只不过它们的内部属性（成员属性）不同，这也就意味着构建的具体内部细节不一样。那么，基于这种情况，我们可以将复杂的对象的构建过程抽象出来，通过抽象过程的不同实现方法来实现不同对象的内部细节构建过程，从某种意义上来说，这也是产品构建过程复杂度的解耦，这就是建造者模式（Builder Pattern）。</p></blockquote><blockquote><p>&ensp;&ensp;&ensp;&ensp;建造者模式（Builder Pattern）又叫生成器模式，它把对象的创建步骤抽象成生成器，将一个产品的内部表象与产品的生产过程分割开来，一步一步构建一个复杂的对象，用户只用指定复杂对象的类型和内容，而无需知道内部的具体构建细节就可以构建它们。</p></blockquote><h1 id="建造者模式的四个角色"><a href="#建造者模式的四个角色" class="headerlink" title="建造者模式的四个角色"></a>建造者模式的四个角色</h1><ul><li>产品角色（Product）：我们所要构建的产品对象；</li><li>抽象建造者（Builder）：创建产品（Product）对象的接口/抽象类。它定义了创建一个产品（Product）对象所需要的各个部件的操作（抽象方法），同时包含一个获取产品（Product）对象（获取成品）的方法。</li><li>具体建造者（ConcreteBuilder）：抽象建造者的具体实现，实现抽象建造者（Builder）的接口，构建和装配产品（Product）对象的各个部件，对于不同的部件或者构建步骤进行不同的详细实现，来完成不同的产品。</li><li>指导者（Director）：主要用来使用Buider接口，构建一个使用Buider接口的对象，以一个相对稳定且统一的过程生产产品（Product）对象。</li></ul><h1 id="日常举例"><a href="#日常举例" class="headerlink" title="日常举例"></a>日常举例</h1><blockquote><p>建造小汽车的例子：小汽车主要部件：发动机（Engine）、车身框架（Frame）、轮胎（Wheel）等，不管是什么品牌的汽车，都有这些部件，只不过内部的构造和质量等不一样。代码实现，如下：</p></blockquote><ul><li>产品角色（Product）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="keyword">private</span> String wheel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrame</span><span class="params">(String frame)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.frame = frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wheel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWheel</span><span class="params">(String wheel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wheel = wheel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Car&#123;"</span> +</span><br><span class="line">                <span class="string">"engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", frame='"</span> + frame + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", wheel='"</span> + wheel + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>抽象建造者（Builder）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造发动机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造车身框架</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造轮胎</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">buildWheel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取小汽车成品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>具体建造者（ConcreteBuilder）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoMaCarBuilder</span> <span class="keyword">implements</span> <span class="title">CarBuilder</span></span>&#123;</span><br><span class="line">    Car car = <span class="keyword">new</span> Car();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car.setEngine(<span class="string">"建造宝马发动机！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car.setFrame(<span class="string">"建造宝马车身框架！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildWheel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.car.setWheel(<span class="string">"建造宝马轮胎！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>指导者（Director）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDirector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CarBuilder carBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarDirector</span><span class="params">(CarBuilder carBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.carBuilder = carBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建汽车的流程交给指导者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">builderCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        carBuilder.buildEngine();</span><br><span class="line">        carBuilder.buildFrame();</span><br><span class="line">        carBuilder.buildWheel();</span><br><span class="line">        <span class="keyword">return</span> carBuilder.getCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>客户端使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BaoMaCarBuilder baoMaCarBuilder = <span class="keyword">new</span> BaoMaCarBuilder();</span><br><span class="line">        CarDirector carDirector = <span class="keyword">new</span> CarDirector(baoMaCarBuilder);</span><br><span class="line">        Car car = carDirector.builderCar();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行结果：<img data-src="/8cf99788/buildercar.png" title="客户端运行结果"></li></ul><h1 id="建造者模式在JDK中的应用"><a href="#建造者模式在JDK中的应用" class="headerlink" title="建造者模式在JDK中的应用"></a>建造者模式在JDK中的应用</h1><p>先看一张StringBuilder类图</p><img data-src="/8cf99788/StringBuilder.png" title="StringBuilder类图"><p>源码:java.lang.Appendable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Appendable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified character sequence to this &lt;tt&gt;Appendable&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Depending on which class implements the character sequence</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be appended.  For</span></span><br><span class="line"><span class="comment">     * instance, if &lt;tt&gt;csq&lt;/tt&gt; is a &#123;<span class="doctag">@link</span> java.nio.CharBuffer&#125; then</span></span><br><span class="line"><span class="comment">     * the subsequence to append is defined by the buffer's position and limit.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  csq</span></span><br><span class="line"><span class="comment">     *         The character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is</span></span><br><span class="line"><span class="comment">     *         &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;"null"&lt;/tt&gt; are</span></span><br><span class="line"><span class="comment">     *         appended to this Appendable.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          If an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Appendable <span class="title">append</span><span class="params">(CharSequence csq)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends a subsequence of the specified character sequence to this</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Appendable&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,</span></span><br><span class="line"><span class="comment">     * end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, behaves in</span></span><br><span class="line"><span class="comment">     * exactly the same way as the invocation</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     *     out.append(csq.subSequence(start, end)) &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  csq</span></span><br><span class="line"><span class="comment">     *         The character sequence from which a subsequence will be</span></span><br><span class="line"><span class="comment">     *         appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters</span></span><br><span class="line"><span class="comment">     *         will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four</span></span><br><span class="line"><span class="comment">     *         characters &lt;tt&gt;"null"&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  start</span></span><br><span class="line"><span class="comment">     *         The index of the first character in the subsequence</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  end</span></span><br><span class="line"><span class="comment">     *         The index of the character following the last character in the</span></span><br><span class="line"><span class="comment">     *         subsequence</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">     *          If &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative, &lt;tt&gt;start&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *          is greater than &lt;tt&gt;end&lt;/tt&gt;, or &lt;tt&gt;end&lt;/tt&gt; is greater than</span></span><br><span class="line"><span class="comment">     *          &lt;tt&gt;csq.length()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          If an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Appendable <span class="title">append</span><span class="params">(CharSequence csq, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified character to this &lt;tt&gt;Appendable&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c</span></span><br><span class="line"><span class="comment">     *         The character to append</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          If an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Appendable <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:java.lang.AbstractStringBuilder（片段）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">// Documentation in subclasses because of synchro difference</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sb == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = sb.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        sb.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AbstractStringBuilder <span class="title">append</span><span class="params">(AbstractStringBuilder asb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (asb == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">int</span> len = asb.length();</span><br><span class="line">        ensureCapacityInternal(count + len);</span><br><span class="line">        asb.getChars(<span class="number">0</span>, len, value, count);</span><br><span class="line">        count += len;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Documentation in subclasses because of synchro difference</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractStringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> appendNull();</span><br><span class="line">        <span class="keyword">if</span> (s <span class="keyword">instanceof</span> String)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.append((String)s);</span><br><span class="line">        <span class="keyword">if</span> (s <span class="keyword">instanceof</span> AbstractStringBuilder)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.append((AbstractStringBuilder)s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.append(s, <span class="number">0</span>, s.length());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:java.lang.StringBuilder（片段）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> append(String.valueOf(obj));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.append(str);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Appends the specified &#123;<span class="doctag">@code</span> StringBuffer&#125; to this sequence.</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;</span></span><br><span class="line"><span class="comment">      * The characters of the &#123;<span class="doctag">@code</span> StringBuffer&#125; argument are appended,</span></span><br><span class="line"><span class="comment">      * in order, to this sequence, increasing the</span></span><br><span class="line"><span class="comment">      * length of this sequence by the length of the argument.</span></span><br><span class="line"><span class="comment">      * If &#123;<span class="doctag">@code</span> sb&#125; is &#123;<span class="doctag">@code</span> null&#125;, then the four characters</span></span><br><span class="line"><span class="comment">      * &#123;<span class="doctag">@code</span> "null"&#125; are appended to this sequence.</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;</span></span><br><span class="line"><span class="comment">      * Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to</span></span><br><span class="line"><span class="comment">      * execution of the &#123;<span class="doctag">@code</span> append&#125; method. Then the character at index</span></span><br><span class="line"><span class="comment">      * &lt;i&gt;k&lt;/i&gt; in the new character sequence is equal to the character at</span></span><br><span class="line"><span class="comment">      * index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less than</span></span><br><span class="line"><span class="comment">      * &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index &lt;i&gt;k-n&lt;/i&gt;</span></span><br><span class="line"><span class="comment">      * in the argument &#123;<span class="doctag">@code</span> sb&#125;.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>   sb   the &#123;<span class="doctag">@code</span> StringBuffer&#125; to append.</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span>  a reference to this object.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(StringBuffer sb)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.append(sb);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(CharSequence s)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>.append(s);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>分析：</strong> 接口Appendable定义了多个append抽象方法，即为抽象建造者；抽象类AbstractStringBuilder实现了接口Appendable的方法，即为具体建造者，但是不能实例化；StringBuilder继承了抽象类AbstractStringBuilder，具体的方法已经由AbstractStringBuilder实现，StringBuilder对部分方法进行了覆盖，由此可以看出，StringBuilder既充当了具体建造者，也是指导者的角色。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/8cf99788/builder.jpg&quot; title=&quot;Builder Pattern&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>原型模式（Prototype Pattern）之浅拷贝和深拷贝</title>
    <link href="https://www.syshlang.com/a853c6f2/"/>
    <id>https://www.syshlang.com/a853c6f2/</id>
    <published>2020-01-15T07:06:44.000Z</published>
    <updated>2020-01-17T04:47:35.054Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/a853c6f2/prototype-copy.png" title="浅拷贝和深拷贝"><a id="more"></a><blockquote><p>&ensp;&ensp;&ensp;&ensp;在<a href="/129d022b/" title="《设计模式之创建型模式中的原型模式（Prototype Pattern）》">《设计模式之创建型模式中的原型模式（Prototype Pattern）》</a>中，通过克隆羊多莉的例子了解了原型模式，从客户端代码运行的结果，很容易发现：通过原型对象创建另一个新对象时，如果更改原型对象的某些类型的属性，新建的对象的属性也可能会发生变化。</p></blockquote><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;通过原型对象创建另一个新对象时，将原型对象的非静态成员变量复制到新的对象，对于不同类型的成员变量，拷贝规则如下：</p><ol><li>如果成员变量的数据类型是值类型（基本数据类型），浅拷贝会直接进行值传递，也就是直接复制一份该属性给新对象；</li><li>如果成员变量的数据类型是引用类型，则浅拷贝会进行引用传递，也就是只会将该成员变量的引用值（内存地址）复制一份给新对象，而不会复制引用的对象，那么也就意味着新对象和原型对象的该成员变量都指向同一个实例。因此，一个对象中修改成员变量的值会影响到另一个对象的该成员变量的值。</li></ol></blockquote><p>&ensp;&ensp;&ensp;&ensp;上一文我们举的例子就是浅拷贝实现克隆羊，SheepPrototype类实现了Cloneable接口，使用了默认的super.clone()方法。</p><div class="note info"><ul><li>基本类型也称为值类型，分别是字符类型 char，布尔类型 boolean以及数值类型 byte、short、int、long、float、double。</li><li>引用类型则包括类、接口、数组、枚举等。</li><li>Java 将内存空间分为堆和栈。基本类型直接在栈中存储数值，而引用类型是将引用放在栈中，实际存储的值是放在堆中，通过栈中的引用指向堆中存放的数据。</li></ul></div><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;通过原型对象创建另一个新对象时，将原型对象的非静态成员变量复制到新的对象，不管成员变量的数据类型是值类型还是引用类型，深拷贝都会重新复制一份给新的对象。因此，修改其中一个对象的任何成员变量的值，都不会影响到另一个对象。</p></blockquote><h3 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h3><p><strong>一、重写clone() 方法</strong><br>&ensp;&ensp;&ensp;&ensp;重写clone()方法，把要复制的对象所引用的对象都复制一遍，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepConcreteSheepPrototype</span>  <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> SheepPrototype mother;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepConcreteSheepPrototype</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepConcreteSheepPrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SheepPrototype <span class="title">getMother</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mother;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMother</span><span class="params">(SheepPrototype mother)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mother = mother;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DeepConcreteSheepPrototype <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        DeepConcreteSheepPrototype deepConcreteSheepPrototype = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deepConcreteSheepPrototype = (DeepConcreteSheepPrototype) <span class="keyword">super</span>.clone();</span><br><span class="line">            SheepPrototype sheepPrototype = mother.clone();</span><br><span class="line">            deepConcreteSheepPrototype.mother = sheepPrototype;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deepConcreteSheepPrototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DeepConcreteSheepPrototype&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mother="</span> + mother +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneDollyPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Client</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            DeepConcreteSheepPrototype deepDolly = <span class="keyword">new</span> DeepConcreteSheepPrototype(<span class="string">"dolly"</span>,<span class="number">2</span>,<span class="string">"gray"</span>);</span><br><span class="line">            deepDolly.setMother(<span class="keyword">new</span> ConcreteSheepPrototype(<span class="string">"dolly"</span>,<span class="number">5</span>,<span class="string">"gray"</span>));</span><br><span class="line">            DeepConcreteSheepPrototype deepConcreteSheepPrototype = deepDolly.clone();</span><br><span class="line">            DeepConcreteSheepPrototype deepConcreteSheepPrototype1 = deepDolly.clone();</span><br><span class="line">            DeepConcreteSheepPrototype deepConcreteSheepPrototypeN = deepDolly.clone();</span><br><span class="line">            deepDolly.getMother().setColor(<span class="string">"red"</span>);</span><br><span class="line">            System.out.println(deepDolly);</span><br><span class="line">            System.out.println(deepConcreteSheepPrototype);</span><br><span class="line">            System.out.println(deepConcreteSheepPrototype1);</span><br><span class="line">            System.out.println(deepConcreteSheepPrototypeN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img data-src="/a853c6f2/DeepConcreteSheepPrototype.png" title="重写clone()方法实现深拷贝"><p><strong>二、利用序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepConcreteSheepSerializable</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8738439006982997247L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> SheepPrototype mother;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SheepPrototype <span class="title">getMother</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mother;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMother</span><span class="params">(SheepPrototype mother)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mother = mother;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream obs = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayInputStream ios = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            obs = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">            obs.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            obs.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            ios = <span class="keyword">new</span> ByteArrayInputStream(out.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(ios);</span><br><span class="line">            <span class="comment">//返回生成的新对象</span></span><br><span class="line">            DeepConcreteSheepSerializable deepConcreteSheepSerializable = (DeepConcreteSheepSerializable) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                obs.close();</span><br><span class="line">                ios.close();</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DeepConcreteSheepSerializable&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mother="</span> + mother +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneDollyPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Client</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            DeepConcreteSheepSerializable deepDollySerializable = <span class="keyword">new</span> DeepConcreteSheepSerializable(<span class="string">"dolly"</span>,<span class="number">2</span>,<span class="string">"gray"</span>);</span><br><span class="line">            deepDollySerializable.setMother(<span class="keyword">new</span> ConcreteSheepPrototype(<span class="string">"dolly"</span>,<span class="number">5</span>,<span class="string">"gray"</span>));</span><br><span class="line">            DeepConcreteSheepSerializable deepConcreteSheepSerializable = deepDollySerializable.deepClone();</span><br><span class="line">            deepDollySerializable.getMother().setColor(<span class="string">"red"</span>);</span><br><span class="line">            deepDollySerializable.setAge(<span class="number">6</span>);</span><br><span class="line">            System.out.println(deepDollySerializable);</span><br><span class="line">            System.out.println(deepConcreteSheepSerializable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img data-src="/a853c6f2/DeepConcreteSheepSerializable.png" title="利用序列化实现深拷贝"><blockquote><p>&ensp;&ensp;&ensp;&ensp;从上面可以看出，利用序列化实现深拷贝主要是在内存中通过字节流的拷贝来实现的。把原型对象序列化写入到字节流中，然后再从字节流中将其读出来进行反序列化，这样就可以创建一个新的对象，当然，此种方式不会存在原型对象与新对象之间引用共享的问题，推荐使用这种方式实现深拷贝。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/a853c6f2/prototype-copy.png&quot; title=&quot;浅拷贝和深拷贝&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型模式中的原型模式（Prototype Pattern）</title>
    <link href="https://www.syshlang.com/129d022b/"/>
    <id>https://www.syshlang.com/129d022b/</id>
    <published>2020-01-03T00:58:09.000Z</published>
    <updated>2020-01-17T04:47:28.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/129d022b/prototype-pattern.png" title="Prototype Pattern"><a id="more"></a><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;原型模式（Prototype Pattern）主要用于在保证性能的情况下创建重复的对象，也就是创建当前对象的克隆，这种模式是实现了一个原型接口。在开发过程中，如果我们已经明确了所需要创建对象的种类，且创建这种类型对象的代价比较大（创建数量庞大，频繁的数据库交互对数据库等），就可以用原型实例指定所要创建对象的种类，然后通过拷贝这些原型创建新的对象。这就有点像我们生物里面学的细胞分裂。</p></blockquote><img data-src="/129d022b/prototype.png" title="Prototype Pattern"><h1 id="日常举例"><a href="#日常举例" class="headerlink" title="日常举例"></a>日常举例</h1><blockquote><p>克隆羊的例子：有一只克隆羊叫多莉，没错就是这只羊，长的就是下面图片中的样子。。。现在按照这个样子再克隆N只多莉。。。</p></blockquote><img data-src="/129d022b/dolly.jpg" title="我是克隆羊多莉..."><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以传统的简单方式克隆多莉羊</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneDollySimple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Client</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            Sheep dolly = <span class="keyword">new</span> Sheep(<span class="string">"dolly"</span>,<span class="number">2</span>,<span class="string">"gray"</span>);</span><br><span class="line">            Sheep sheep = <span class="keyword">new</span> Sheep(dolly.getName(),dolly.getAge(),dolly.getColor());</span><br><span class="line">            Sheep sheep1 = <span class="keyword">new</span> Sheep(dolly.getName(),dolly.getAge(),dolly.getColor());</span><br><span class="line">            Sheep sheepN = <span class="keyword">new</span> Sheep(dolly.getName(),dolly.getAge(),dolly.getColor());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SheepPrototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> SheepPrototype mother;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SheepPrototype</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SheepPrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SheepPrototype <span class="title">getMother</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mother;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMother</span><span class="params">(SheepPrototype mother)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mother = mother;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 克隆实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SheepPrototype <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        SheepPrototype sheepPrototype = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sheepPrototype = (SheepPrototype) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sheepPrototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"SheepPrototype&#123;"</span> +</span><br><span class="line">               <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", age="</span> + age +</span><br><span class="line">               <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", mother="</span> + mother +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建当前对象的浅表副本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSheepPrototype</span> <span class="keyword">extends</span> <span class="title">SheepPrototype</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteSheepPrototype</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age, color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Eating green grass"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以原型模式克隆多莉羊</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloneDollyPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Client</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            ConcreteSheepPrototype dolly = <span class="keyword">new</span> ConcreteSheepPrototype(<span class="string">"dolly"</span>,<span class="number">2</span>,<span class="string">"gray"</span>);</span><br><span class="line">            dolly.setMother(<span class="keyword">new</span> ConcreteSheepPrototype(<span class="string">"dolly"</span>,<span class="number">5</span>,<span class="string">"gray"</span>));</span><br><span class="line">            ConcreteSheepPrototype sheepPrototype = (ConcreteSheepPrototype) dolly.clone();</span><br><span class="line">            ConcreteSheepPrototype sheepPrototype1 = (ConcreteSheepPrototype) dolly.clone();</span><br><span class="line">            ConcreteSheepPrototype sheepPrototypeN = (ConcreteSheepPrototype) dolly.clone();</span><br><span class="line">            dolly.getMother().setColor(<span class="string">"red"</span>);</span><br><span class="line">            dolly.setAge(<span class="number">6</span>);</span><br><span class="line">            System.out.println(dolly);</span><br><span class="line">            System.out.println(sheepPrototype);</span><br><span class="line">            System.out.println(sheepPrototype1);</span><br><span class="line">            System.out.println(sheepPrototypeN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img data-src="/129d022b/ConcreteSheepPrototype.png" title="浅拷贝"><blockquote><p>&ensp;&ensp;&ensp;&ensp;对比以上的两种方式很容易可以看出，传统的方式虽然易于理解，但是每次创建新的对象时，都需要重新初始化对象，并获取原始对象的属性，然后设置属性，显然，这种方式效率低；相对于传统方式，原型模式就方便快捷很多，在无需关注细节的情况下，就可以通过原型对象创建出另外的可定制对象，这种方式必须实现 Cloneable 接口。</p></blockquote><div class="note info"><p>原型模式主要包含3个角色：</p><ol><li>Prototype(抽象原型类)：声明克隆方法的接口，是所有具体原型类的公共父类，它可是抽象类也可以是接口，甚至可以是具体实现类。</li><li>ConcretePrototype(具体原型类)：它实现抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。</li><li>Client(客户端)：在客户类中，让一个原型对象克隆自身从而创建一个新的对象。</li></ol></div><h1 id="原型模式在Spring框架中的应用"><a href="#原型模式在Spring框架中的应用" class="headerlink" title="原型模式在Spring框架中的应用"></a>原型模式在Spring框架中的应用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.support.JdkRegexpMethodPointcut"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patterns"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.syshlang.service..*Service.*(..)<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上面的配置中可以看到一个标签属性scope=”prototype”，原型模式与名称为prototype的作用域相似。在Spring中，一个类如果被标记为”prototype”,那么将该类注入到另一个bean中或者调用容器的getBean()方法时，都会产生一个新的bean实例。其实，这个产生新的bean的过程就是利用了原型模式。</p></blockquote><p>源码:org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Implementation of BeanFactory interface</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean()（片段）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line"><span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/129d022b/prototype-pattern.png&quot; title=&quot;Prototype Pattern&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>Oracle和Mysql数据库转换</title>
    <link href="https://www.syshlang.com/463fcbf0/"/>
    <id>https://www.syshlang.com/463fcbf0/</id>
    <published>2019-12-30T02:22:40.000Z</published>
    <updated>2019-12-30T11:03:01.115Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><img data-src="/463fcbf0/mysql-oracle.jpg"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;我们的项目一直使用的是SSH框架+mysql+tomcat服务器，但是最近一个新项目对数据库的使用和web服务器提出了硬性要求，按照他们的要求，需要使用Oracle数据库，并采用Weblogic进行服务部署。本文针对本次数据库转换（Mysql转换Oracle）过程中遇到的一些问题做记录，对于部署服务器的更换（tomcat更换为Weblogic）另一文章将继续分享。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>&ensp;&ensp;&ensp;&ensp;首先，我们系统的架构情况如下：</p><blockquote><p>开发环境：</p><ul><li>MAVEN:3.5</li><li>JDK:1.8</li><li>Spring: 4.3.9.RELEASE</li><li>hibernate： 4.3.11.Final</li><li>Shiro：1.4.0</li></ul></blockquote><blockquote><p>开发工具:</p><ul><li>MySql: 5.7.x</li><li>ORACLE: 11.2.0.1.0</li><li>Tomcat: 9.0</li><li>EZDML:2.06(表结构设计器)</li></ul></blockquote><p>&ensp;&ensp;&ensp;&ensp;分析了一下部分代码，发现Mysql转换至Oracle，整体框架无需大的改动，由于使用了hibernate框架做持久层，业务操作基本都是HQL,所以无需做单独处理，需要变动的主要涉及到数据库结构的转换和一些公共自定义sql的兼容性处理，明确了解决问题的要点，现在开始着手。</p><h1 id="数据库转换"><a href="#数据库转换" class="headerlink" title="数据库转换"></a>数据库转换</h1><h2 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h2><h3 id="首先，使用EZDML表结构设计器进行数据库的整体转换"><a href="#首先，使用EZDML表结构设计器进行数据库的整体转换" class="headerlink" title="首先，使用EZDML表结构设计器进行数据库的整体转换"></a>首先，使用EZDML表结构设计器进行数据库的整体转换</h3><p>1、打开EZDML，点击模型，选择导入数据库：</p><img data-src="/463fcbf0/ezdml-mysql.png"><p>2、点击确定，选择需要转换的表名，确定之后就可以看到对应的表结构模型；<br>3、在左边单击表明，就可以看到详细的表结构设计，选择生成，就可以看到不同类型数据库对应的建表DDL。</p><img data-src="/463fcbf0/ezdml-sql.png"><h3 id="然后，对表结构进行微调"><a href="#然后，对表结构进行微调" class="headerlink" title="然后，对表结构进行微调"></a>然后，对表结构进行微调</h3><h4 id="Mysql和Oracle之间的数据类型转换"><a href="#Mysql和Oracle之间的数据类型转换" class="headerlink" title="Mysql和Oracle之间的数据类型转换"></a>Mysql和Oracle之间的数据类型转换</h4><table><thead><tr><th align="center">MySQL Data Type</th><th align="center">Oracle Data Type</th></tr></thead><tbody><tr><td align="center">BIGINT</td><td align="center">NUMBER(19, 0)</td></tr><tr><td align="center">BIT</td><td align="center">RAW</td></tr><tr><td align="center">BLOB</td><td align="center">BLOB, RAW</td></tr><tr><td align="center">CHAR</td><td align="center">CHAR</td></tr><tr><td align="center">DATE</td><td align="center">DATE</td></tr><tr><td align="center">DATETIME</td><td align="center">DATE</td></tr><tr><td align="center">DECIMAL</td><td align="center">FLOAT (24)</td></tr><tr><td align="center">DOUBLE</td><td align="center">FLOAT (24)</td></tr><tr><td align="center">DOUBLE PRECISION</td><td align="center">FLOAT (24)</td></tr><tr><td align="center">ENUM</td><td align="center">VARCHAR2</td></tr><tr><td align="center">FLOAT</td><td align="center">FLOAT</td></tr><tr><td align="center">INT</td><td align="center">NUMBER(10, 0)</td></tr><tr><td align="center">INTEGER</td><td align="center">NUMBER(10, 0)</td></tr><tr><td align="center">LONGBLOB</td><td align="center">BLOB, RAW</td></tr><tr><td align="center">LONGTEXT</td><td align="center">CLOB, RAW</td></tr><tr><td align="center">MEDIUMBLOB</td><td align="center">BLOB, RAW</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">NUMBER(7, 0)</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">CLOB, RAW</td></tr><tr><td align="center">NUMERIC</td><td align="center">NUMBER</td></tr><tr><td align="center">REAL</td><td align="center">FLOAT (24)</td></tr><tr><td align="center">SET</td><td align="center">VARCHAR2</td></tr><tr><td align="center">SMALLINT</td><td align="center">NUMBER(5, 0)</td></tr><tr><td align="center">TEXT</td><td align="center">VARCHAR2, CLOB</td></tr><tr><td align="center">TIME</td><td align="center">DATE</td></tr><tr><td align="center">TIMESTAMP</td><td align="center">DATE</td></tr><tr><td align="center">TINYBLOB</td><td align="center">RAW</td></tr><tr><td align="center">TINYINT</td><td align="center">NUMBER(3, 0)</td></tr><tr><td align="center">TINYTEXT</td><td align="center">VARCHAR2</td></tr><tr><td align="center">VARCHAR</td><td align="center">VARCHAR2, CLOB</td></tr><tr><td align="center">YEAR</td><td align="center">NUMBER</td></tr></tbody></table><h4 id="自增序列处理"><a href="#自增序列处理" class="headerlink" title="自增序列处理"></a>自增序列处理</h4><table><thead><tr><th align="center">MySQL Data Type</th><th align="center">Oracle Data Type</th></tr></thead><tbody><tr><td align="center">有自动增长的数据类型,插入记录时不用操作此字段，会自动获得数据值</td><td align="center">ORACLE没有自动增长的数据类型,需要建立一个自动增长的序列号，插入记录时要把序列号的下一个值赋于此字段</td></tr></tbody></table><p>Mysql自动增长的数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table_name</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">int</span> auto_increment <span class="comment">-- 自增长</span></span><br><span class="line">        primary <span class="keyword">key</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Oracle自动增长的数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> table_name_pk</span><br><span class="line"><span class="keyword">minvalue</span> <span class="number">1</span></span><br><span class="line">maxvalue <span class="number">9999999999999999999999999999</span></span><br><span class="line"><span class="keyword">start</span> <span class="keyword">with</span> <span class="number">447</span></span><br><span class="line"><span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">cache</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> table_name</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">int</span> <span class="keyword">generated</span> <span class="keyword">as</span> <span class="keyword">identity</span></span><br><span class="line"><span class="keyword">constraint</span> table_name_pk</span><br><span class="line">primary <span class="keyword">key</span></span><br><span class="line">)</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h4 id="长字符串处理"><a href="#长字符串处理" class="headerlink" title="长字符串处理"></a>长字符串处理</h4><p>&ensp;&ensp;&ensp;&ensp;在ORACLE中，进行INSERT和UPDATE时，最大可操作的字符串长度必须小于等于4000个单字节。如果超出这个长度，要插入更长的字符串数据，可以考虑使用CLOB类型。在本项目转换过程中，使用到了指纹数据的16进制字符串的存取，长度超过4000，在Mysql中使用BLOB类型存储没问题，但是ORACLE下不可以。BLOB全称为二进制大型对象（Binary Large Object)，它用于存储数据库中的大型二进制对象，原来在ORACLE下，对二进制对象有严格要求，所以采用CLOB类型存储。</p><h4 id="日期字段处理"><a href="#日期字段处理" class="headerlink" title="日期字段处理"></a>日期字段处理</h4><p>&ensp;&ensp;&ensp;&ensp;在MYSQL中，日期字段可以分DATE（包含年月日）和DATETIME（包含年月日时分秒）两种类型，而ORACLE日期字段只有DATE（包含年月日时分秒）一种类型。所以在实际业务使用过程中需要进行格式转换。</p><table><thead><tr><th align="center">比较项</th><th align="center">MySQL Data Type</th><th align="center">Oracle Data Type</th></tr></thead><tbody><tr><td align="center">数据类型</td><td align="center">DATE（包含年月日）、<br>DATETIME（包含年月日时分秒）</td><td align="center">DATE（包含年月日时分秒）</td></tr><tr><td align="center">日期格式</td><td align="center">%Y：代表4位的年份<br>%y：代表2为的年份<br>%m：代表月, 格式为(01……12)<br>%c：代表月, 格式为(1……12)<br>%d：代表月份中的天数,格式为(00……31)<br>%e：代表月份中的天数, 格式为(0……31)<br>%H：代表小时,格式为(00……23)<br>%k：代表 小时,格式为(0……23)<br>%h： 代表小时,格式为(01……12)<br>%I： 代表小时,格式为(01……12)<br>%l ：代表小时,格式为(1……12)<br>%i： 代表分钟, 格式为(00……59)<br>%r：代表 时间,格式为12 小时(hh:mm:ss [AP]M)<br>%T：代表 时间,格式为24 小时(hh:mm:ss)<br>%S：代表 秒,格式为(00……59)<br>%s：代表 秒,格式为(00……59)</td><td align="center">YYYY、YYY、YY 分别代表4位、3位、2位的数字年<br>MM 数字月<br>DD 数字日<br>AM 表示上午或者下午<br>HH24、HH12 代表24小时制或12小时制<br>MI 分钟<br>SS 秒钟</td></tr><tr><td align="center">当前日期</td><td align="center">sysdate()、current_date、current_time</td><td align="center">sysdate、current_date、current_timestamp</td></tr><tr><td align="center">日期和字符互转</td><td align="center"><strong>DATE_FORMAT</strong><br>例如：DATE_FORMAT(sysdate(),’%Y-%m-%d %H:%i:%s’)<br><strong>STR_TO_DATE</strong><br>例如：STR_TO_DATE(‘2019-12-30 19:25:34’,’%Y-%m-%d %H:%i:%s’)</td><td align="center"><strong>TO_CHAR</strong><br>例如：TO_CHAR(sysdate,’YYYY-MM-DD HH24:MI:SS’)<br><strong>TO_DATE</strong><br>例如：TO_DATE(‘2019-12-30 19:25:34’,’YYYY-MM-DD HH24:MI:SS’)</td></tr><tr><td align="center">日期/时间增减</td><td align="center">增减一小时：<br>date_sub(createDate, interval -1 hour)<br>date_sub(createDate, interval 1 hour)<br>增减一天：<br>date_sub(createDate, interval -1 day)<br>date_sub(createDate, interval 1 day)<br>增减一月：<br>date_sub(createDate, interval -1 month)<br>date_sub(createDate, interval 1 month)<br>增减一季度：<br>date_sub(createDate, interval -3 month)<br>date_sub(createDate, interval 3 month)<br>增减一年：<br>date_sub(createDate, interval -1 year)<br>date_sub(createDate, interval 1 year)</td><td align="center">增减一小时：<br>createDate+1/24<br>createDate-1/24<br>增减一天：<br>createDate+1<br>createDate-1<br>增减一月：<br>add_months(createDate, 1)<br>add_months(createDate, -1)<br>增减一季度：<br>add_months(createDate, 3)<br>add_months(createDate, -3)<br>增减一年：<br>add_months(createDate, 12)<br>add_months(createDate, -12)</td></tr><tr><td align="center">日期/时间比较</td><td align="center">①直接比较<br>②转成unix时间戳比较<br>③转换为日期类型比较<br></td><td align="center">①直接比较<br>②转换为日期类型比较</td></tr></tbody></table><p>日期/时间比较</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Mysql</span></span><br><span class="line"><span class="comment">-- 直接比较（此种方式不走索引，一定程度上会降低性能）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>() <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="string">'2019-12-30 19:39:05'</span> &gt; <span class="string">'2019-12-30 17:39:05'</span>;</span><br><span class="line"><span class="comment">-- 用unix_timestamp函数，将字符型的时间，转成unix时间戳</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>() <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="keyword">unix_timestamp</span>(<span class="string">'2019-12-30 19:39:05'</span>) &gt; <span class="keyword">unix_timestamp</span>(<span class="string">'2019-12-30 17:39:05'</span>);</span><br><span class="line"><span class="comment">-- 将字符串转换为相同格式相同进制的日期类型</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>() <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="keyword">str_to_date</span>(<span class="string">'2019-12-30 19:39:05'</span>,<span class="string">'%Y-%m-%d %H:%i:%s'</span>) &gt; <span class="keyword">str_to_date</span>(<span class="string">'2019-12-30 17:39:05'</span>,<span class="string">'%Y-%m-%d %H:%i:%s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Oracle</span></span><br><span class="line"><span class="comment">-- 直接比较</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="string">'2019-12-30 19:39:05'</span> &gt; <span class="string">'2019-12-30 17:39:05'</span>;</span><br><span class="line"><span class="comment">-- 将字符串转换为相同格式相同进制的日期类型</span></span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">sysdate</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="keyword">to_date</span>(<span class="string">'2019-12-30 19:39:05'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) &gt; <span class="keyword">to_date</span>(<span class="string">'2019-12-30 17:39:05'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>);</span><br></pre></td></tr></table></figure><h4 id="返回Map列名大小写问题"><a href="#返回Map列名大小写问题" class="headerlink" title="返回Map列名大小写问题"></a>返回Map列名大小写问题</h4><p>&ensp;&ensp;&ensp;&ensp;转换过程发现，使用Hibernate返回实体类型的数据我们可以不用关注列名大小写问题，但是返回Map类型的数据集合时，对Mysql和Oracle返回的Map的key大小写是不一致的，也就是返回列名大小写不统一，对于两数据库不同的系统环境列名大小写情况如下：</p><table><thead><tr><th align="center">系统</th><th align="center">MySQL Data Type</th><th align="center">Oracle Data Type</th></tr></thead><tbody><tr><td align="center">Windows</td><td align="center">默认都不区分大小写，<br>可通过修改配置来区分大小写：<br>lower_case_table_names = 0（0：区分大小写，1：不区分大小写）</td><td align="center">1、在Oracle中，如果字段名称被双引号（””）包裹，Oracle会区分大小写；<br>2、如果字段名称没有被双引号（””）包裹，则全部转换成大写来执行。<br>3、如果表结构设计时，字段名称使用了数据库的保留字，SQL中的字段名称必须用双引号（””）包裹，以避免SQL语句执行出错。</td></tr><tr><td align="center">Linux</td><td align="center">1、数据库名与表名是严格区分大小写的；<br>2、表的别名是严格区分大小写的；<br>3、列名与列的别名在所有的情况下均是忽略大小写的；<br>4、变量名也是严格区分大小写的；</td><td align="center">同Windows</td></tr></tbody></table><p>&ensp;&ensp;&ensp;&ensp;根据以上，可以看出，我们要解决大小写问题，需要对返回列表的字段名加引号（””），这种做法工作量过大，于是查看了一下返回Map集合的接口实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">findMapResultBySql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">    SQLQuery query = <span class="keyword">this</span>.getCurrentSession().createSQLQuery(sql);</span><br><span class="line">    query.setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);</span><br><span class="line">    <span class="keyword">return</span> query.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;很容易可以看出，处理结果集返回的关键是Transformers.ALIAS_TO_ENTITY_MAP，查看源码</p><figure class="highlight java"><figcaption><span>AliasToEntityMapResultTransformer.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliasToEntityMapResultTransformer</span> <span class="keyword">extends</span> <span class="title">AliasedTupleSubsetResultTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AliasToEntityMapResultTransformer INSTANCE = <span class="keyword">new</span> AliasToEntityMapResultTransformer();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Disallow instantiation of AliasToEntityMapResultTransformer.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">AliasToEntityMapResultTransformer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transformTuple</span><span class="params">(Object[] tuple, String[] aliases)</span> </span>&#123;</span><br><span class="line">Map result = <span class="keyword">new</span> HashMap(tuple.length);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tuple.length; i++ ) &#123;</span><br><span class="line">String alias = aliases[i];</span><br><span class="line"><span class="keyword">if</span> ( alias!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">result.put( alias, tuple[i] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTransformedValueATupleElement</span><span class="params">(String[] aliases, <span class="keyword">int</span> tupleLength)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Serialization hook for ensuring singleton uniqueing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> The singleton instance : &#123;<span class="doctag">@link</span> #INSTANCE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;可以看出，AliasToEntityMapResultTransformer类的transformTuple方法即是解决问题的关键，于是自定义自己的返回结果集处理工具，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回map统一小写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomResultTransformer</span> <span class="keyword">extends</span> <span class="title">AliasedTupleSubsetResultTransformer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CustomResultTransformer INSTANCE = <span class="keyword">new</span> CustomResultTransformer();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CustomResultTransformer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transformTuple</span><span class="params">(Object[] tuple, String[] aliases)</span> </span>&#123;</span><br><span class="line">        Map result = <span class="keyword">new</span> HashMap(tuple.length);</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tuple.length; i++ ) &#123;</span><br><span class="line">            String alias = aliases[i];</span><br><span class="line">            <span class="keyword">if</span> ( alias!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">                <span class="comment">//将Map的key转为小写返回</span></span><br><span class="line">                result.put( alias.toLowerCase(), tuple[i] );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTransformedValueATupleElement</span><span class="params">(String[] aliases, <span class="keyword">int</span> tupleLength)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;然后设置SQLQuery的ResultTransformer，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CustomResultTransformer ALIAS_TO_ENTITY_LOWERCASE_MAP =</span><br><span class="line">CustomResultTransformer.INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">findMapResultBySql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">    SQLQuery query = <span class="keyword">this</span>.getCurrentSession().createSQLQuery(sql);</span><br><span class="line">    query.setResultTransformer(ALIAS_TO_ENTITY_LOWERCASE_MAP);</span><br><span class="line">    <span class="keyword">return</span> query.list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;至此，Oracle和Mysql数据库返回Map列名统一大小写问题得以解决。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/463fcbf0/mysql-oracle.jpg&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="database" scheme="https://www.syshlang.com/categories/technology/database/"/>
    
      <category term="Oracle" scheme="https://www.syshlang.com/categories/technology/database/Oracle/"/>
    
    
      <category term="Oracle" scheme="https://www.syshlang.com/tags/Oracle/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="Mysql" scheme="https://www.syshlang.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型的三种工厂模式（Factory Pattern）</title>
    <link href="https://www.syshlang.com/659a32bd/"/>
    <id>https://www.syshlang.com/659a32bd/</id>
    <published>2019-09-18T01:18:02.000Z</published>
    <updated>2020-01-17T04:47:22.508Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><blockquote><p>&ensp;&ensp;&ensp;&ensp;工厂模式（Factory Pattern）主要是为创建对象提供了接口，实际开发中，我们可以通过指定的工厂来生产对象，在工厂中创建对象时，不会对客户端暴露创建逻辑，并且所有的对象都是通过一个共同的工厂（接口）创建出来的，如果创建对象的业务逻辑发生改变，我们只需改动“工厂”的逻辑，这在一定程度上降低了耦合度，达到了解耦的目的。</p></blockquote><a id="more"></a><blockquote><p>&ensp;&ensp;&ensp;&ensp;工厂模式（Factory Pattern）可以细分为三类：简单工厂模式(Simple Factory)、 工厂方法模式(Factory Method)、 抽象工厂模式(Abstract Factory)。</p></blockquote><h1 id="简单工厂模式-Simple-Factory"><a href="#简单工厂模式-Simple-Factory" class="headerlink" title="简单工厂模式(Simple Factory)"></a>简单工厂模式(Simple Factory)</h1><blockquote><p>简单工厂模式(Simple Factory)也叫静态工厂模式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape shape = ShapeSimpleFactory.getShapeByType(<span class="string">"circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">String <span class="title">getShapeType</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getShapeType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"circle"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getShapeType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"rectangle"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeSimpleFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShapeByType</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"circle"</span>.equals(type))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">            &#125;<span class="keyword">else</span>  <span class="keyword">if</span> (<span class="string">"rectangle"</span>.equals(type))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上面的例子中，提供了一个ShapeSimpleFactory类，用于封装实例化对象的行为，作为生产几何图形Shape类型对象的“工厂”，该类提供了一个公共的静态方法用于根据类型获取对应的几何图形实体。可以看到这种方式简单粗暴，使用了if…else来做业务逻辑的判断生产对象，试想，那么如果项目的规模变大，Shape的类型增多。。。</p></blockquote><h1 id="工厂方法模式-Factory-Method"><a href="#工厂方法模式-Factory-Method" class="headerlink" title="工厂方法模式(Factory Method)"></a>工厂方法模式(Factory Method)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CircleFactory circleFactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape circle = circleFactory.createShape();</span><br><span class="line">        RectangleFactory rectangleFactory = <span class="keyword">new</span> RectangleFactory();</span><br><span class="line">        Shape rectangle = rectangleFactory.createShape();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShapeFactoryMethod</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生产几何图型</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function">Shape <span class="title">createShape</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">ShapeFactoryMethod</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Shape <span class="title">createShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">ShapeFactoryMethod</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Shape <span class="title">createShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;在工厂方法模式的例子中，定义了一个创建对象的父类接口ShapeFactoryMethod，并声明了生产几何图形的方法createShape，由子类工厂实现生产对象的逻辑。乍一看，工厂方法跟简单工厂似乎不一样，但实际上是“换汤不换药”，简单工厂是采用if…else,而工厂方法模式则是将对象的实例化推迟到子类实现。显然，项目的规模变大时，需要创建更多的工厂，该种方式也不适用。</p></blockquote><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;简单工厂模式可以看做是工厂方法模式的一种特例，两个归为一类，当项目需要生产的特定对象种类较少时，可以采用这种方式，简单实用。</p></div><h1 id="抽象工厂模式-Abstract-Factory"><a href="#抽象工厂模式-Abstract-Factory" class="headerlink" title="抽象工厂模式(Abstract Factory)"></a>抽象工厂模式(Abstract Factory)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShapeAbstractFactory circlecombination = ShapeAbstractFactory.getFactory(<span class="string">"circlecombination"</span>);</span><br><span class="line">        Shape shape = circlecombination.getShape();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 圆组合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleCombination</span> <span class="keyword">extends</span> <span class="title">ShapeAbstractFactory</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩形组合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleCombination</span> <span class="keyword">extends</span> <span class="title">ShapeAbstractFactory</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function">Shape <span class="title">getShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeAbstractFactory</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CircleCombination CIRCLECOMBINATION = <span class="keyword">new</span> CircleCombination();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RectangleCombination RECTANGLECOMBINATION = <span class="keyword">new</span> RectangleCombination();</span><br><span class="line">        <span class="function"><span class="keyword">static</span> ShapeAbstractFactory <span class="title">getFactory</span><span class="params">(String Combination)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"circlecombination"</span>.equals(Combination))&#123;</span><br><span class="line">                <span class="keyword">return</span> CIRCLECOMBINATION;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"rectanglecombination"</span>.equals(Combination))&#123;</span><br><span class="line">                <span class="keyword">return</span> RECTANGLECOMBINATION;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;看上面的代码例子，可以看到简单工厂和工厂方法的影子，实际上抽象工厂模式可以看作是将简单工厂模式和工厂方法模式进行整合，或者是升级改进版。将工厂抽象成两层，AbstractFactory(抽象工厂)和具体实现的工厂子类，那么我们在创建对象时就可以根据对象的类型特点选择对应的工厂子类进行生产，这样一来，就相当将上面提到的简单工厂模式的单个的工厂类变成了工厂簇，这种方式不仅更利于代码的维护和扩展，而且适用于大规模项目中需要生产大量对象的情况。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;blockquote&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;工厂模式（Factory Pattern）主要是为创建对象提供了接口，实际开发中，我们可以通过指定的工厂来生产对象，在工厂中创建对象时，不会对客户端暴露创建逻辑，并且所有的对象都是通过一个共同的工厂（接口）创建出来的，如果创建对象的业务逻辑发生改变，我们只需改动“工厂”的逻辑，这在一定程度上降低了耦合度，达到了解耦的目的。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型模式中的单例模式（Singleton Pattern）</title>
    <link href="https://www.syshlang.com/fc936307/"/>
    <id>https://www.syshlang.com/fc936307/</id>
    <published>2019-09-16T14:11:01.000Z</published>
    <updated>2020-01-17T04:47:13.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/fc936307/Singleton.png" title="Singleton"> <img data-src="/fc936307/Singleton1.png" title="Singleton"><a id="more"></a><blockquote><p>&ensp;&ensp;&ensp;&ensp;单例模式（Singleton Pattern）是我们平时开发中用的比较多的一种设计模式，如上图所示，所谓类的单例设计模式，就是确保在整个的软件系统中一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，该类只提供一个取得其对象实例的静态方法。</p></blockquote><h1 id="单例设计模式八种方式"><a href="#单例设计模式八种方式" class="headerlink" title="单例设计模式八种方式"></a>单例设计模式八种方式</h1><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><h3 id="采用静态常量实现"><a href="#采用静态常量实现" class="headerlink" title="采用静态常量实现"></a>采用静态常量实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryStaticConstants</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryStaticConstants</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类内部创建静态对象实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungryStaticConstants instance  = <span class="keyword">new</span> HungryStaticConstants();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的取得其对象实例的静态方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryStaticConstants <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;这种方式,在类装载时instance就被实例化，由于类装载原因的不确定性，也就像这种方式的名字所表达的意思一样，饿汉式，没有达到懒加载（lazy loading）的效果，并且还可能造成内存浪费。由于是基于classloder机制的，避免了多线程的同步问题，是多线程安全的，并且没有锁机制，因此执行效率会提高。</p></blockquote><h3 id="采用静态代码块实现"><a href="#采用静态代码块实现" class="headerlink" title="采用静态代码块实现"></a>采用静态代码块实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryStaticBlock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryStaticBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungryStaticBlock instance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在静态代码块中，创建单例对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> HungryStaticBlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个公有的取得其对象实例的静态方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryStaticBlock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;这种方式和上面的方式差不多，只不过是将类的实例化放在了静态代码块中进行，static块的执行发生在初始化的阶段。初始化阶段，jvm主要完成对静态变量的初始化，静态块执行等工作，也就是说instance在这个时候被实例化，其优缺点和上面的方式是一样。</p></blockquote><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyThreadUnsafe</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyThreadUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyThreadUnsafe instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态的公有方法，当使用到该方法时，才去实例化instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyThreadUnsafe <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazyThreadUnsafe();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;与饿汉式不一样的地方，显然这种方式达到了懒加载（lazy loading）的效果。但是由于这种方式没有加锁 synchronized，它不是多线程安全的，在多线程下会有产生多个实例的可能。</p></blockquote><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="采用同步方法的实现"><a href="#采用同步方法的实现" class="headerlink" title="采用同步方法的实现"></a>采用同步方法的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyThreadSafeSyncMethod</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyThreadSafeSyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyThreadSafeSyncMethod instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * /提供一个静态的公有方法，加入同步锁，解决线程安全问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazyThreadSafeSyncMethod <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazyThreadSafeSyncMethod();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;很显然，这种方式达到了懒加载（lazy loading）的效果，并且对方法加了同步锁，解决了线程安全问题，但是每个线程在获得实例执行getInstance()方法时都要进行同步，效率很低。</p></blockquote><h4 id="采用同步代码块实现"><a href="#采用同步代码块实现" class="headerlink" title="采用同步代码块实现"></a>采用同步代码块实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyThreadSafeSyncBlock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyThreadSafeSyncBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyThreadSafeSyncBlock instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态的公有方法，对代码块加入同步锁，解决线程安全问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyThreadSafeSyncBlock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyThreadSafeSyncBlock.class)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> LazyThreadSafeSyncBlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;这种方式和上面的方式差不多，只不过是将同步锁从方法上移到了代码块上，实际效果也不理想。</p></blockquote><h2 id="双检锁-双重校验锁-DCL-double-checked-locking"><a href="#双检锁-双重校验锁-DCL-double-checked-locking" class="headerlink" title="双检锁/双重校验锁(DCL:double-checked locking)"></a>双检锁/双重校验锁(DCL:double-checked locking)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckedLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckedLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckedLock instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态的公有方法，加入双重检查代码和同步锁，解决线程安全问题,同时解决懒加载问题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckedLock <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckedLock.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> DoubleCheckedLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;这种方式可以看作是上面两种方式的结合体或者升级方式，这种方式采用了双重校验加锁的机制，既达到了懒加载（lazy loading）的效果，又保证了线程安全，而且效率较高。</p></blockquote><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;volatile是一个类型修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。<br>volatile关键字的两层语义：</p><ul><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的；</li><li>禁止进行指令重排序。</li></ul></div><h2 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInternalClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器私有化,防止new</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInternalClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态内部类,</span></span><br><span class="line"><span class="comment">     * 该类中有一个静态属性StaticInternalClass</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticInternalClass INSTANCE = <span class="keyword">new</span> StaticInternalClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个静态的公有方法，直接返回内部类的静态属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInternalClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;首先，这种方式采用了类装载的机制来保证初始化实例时只有一个线程（在类进行初始化时，别的线程是无法进入的），巧妙的解决了线程安全问腿；其次，静态内部类的方式在SingletonHolder类被装载时并不会立即实例化，而是在需要实例化（调用getInstance方法）时，才会装载SingletonHolder类，从而完成StaticInternalClass的实例化，也很巧妙的达到了懒加载（lazy loading）的效果。当然，也不会存在效率低的问题。</p></blockquote><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instance instance = Singleton.INSTANCE.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Instance</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> Instance instance;</span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Instance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;首先，枚举类的构造方法限制为私有的，我们访问枚举类的实例时会执行它的构造方法，并且每个枚举类的实例都是static final类型的，也就是只能被实例化一次，实际也就是通过类加载机制保证了线程安全。</p></blockquote><h1 id="单例模式在Spring框架中的应用"><a href="#单例模式在Spring框架中的应用" class="headerlink" title="单例模式在Spring框架中的应用"></a>单例模式在Spring框架中的应用</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;先上源码,org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#getSingleton(java.lang.String, boolean)</p></blockquote><figure class="highlight java"><figcaption><span>DefaultSingletonBeanRegistry.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the (raw) singleton object registered under the given name.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Checks already instantiated singletons and also allows for an early</span></span><br><span class="line"><span class="comment"> * reference to a currently created singleton (resolving a circular reference).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean to look for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> allowEarlyReference whether early references should be created or not</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the registered singleton object, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line"><span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line"><span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="/fc936307/AbstractBeanFactory.png" title="AbstractBeanFactory类图"> <img data-src="http://www.plantuml.com/plantuml/svg/ZPBFIiD04CRl-nH3lIYsJs2HQlrpiz3a9XusoIIkJdVZPeC4zII-WNWHZqAFIl4az6cixMEuQM8j6ajE2_FzllbcXkqaXckJ3eYvmX12OyTBZEQ-sKKk3-ohTFOnVfgzFNoEXfExvmZdokpbTde_dBw-Jnx73SPB3_Z4amGgMln6od9Ez34ILikSD8wLDgm0zZ3aAHb7o8ZGABbCClQ_7ThNhLRb1Aiw5guLGzLO4QxO9iIfHyA7ddU6bYsFjUuORLD1yW5kRB4rYBKoLiS0skusk12emv8CXUG4ItmJYb8tZyrfZHUfq1YuMRmGYxZZ4-0wIfhWAKMs6HYBT4_HF-z9ocpmJOtRLYwn8BytyQpZwEysDHm_qt4YTRdFDMLz356Zz74-OmTbOF_Z5m00"><blockquote><p>&ensp;&ensp;&ensp;&ensp;如上,Spring依赖注入Bean实例默认是单例的,Spring的依赖注入主要是在org.springframework.beans.factory.support.AbstractBeanFactory#getBean(java.lang.String)方法中，getBean中调用的 doGetBean 方法调用了getSingleton 进行bean的创建，从上面代码可以看到，spring依赖注入时，使用了双重判断加锁的单例模式。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXBhdHRlcm5z" title="https://github.com/syshlang/java-design-patterns">https://github.com/syshlang/java-design-patterns<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-patterns&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/fc936307/Singleton.png&quot; title=&quot;Singleton&quot;&gt; &lt;img src=&quot;/fc936307/Singleton1.png&quot; title=&quot;Singleton&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之合成复用原则(Composite Reuse Principle)</title>
    <link href="https://www.syshlang.com/fd78ccb3/"/>
    <id>https://www.syshlang.com/fd78ccb3/</id>
    <published>2019-09-02T14:50:32.000Z</published>
    <updated>2020-01-17T04:50:45.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;合成复用原则(CRP:Composite Reuse Principle)又称为组合/聚合复用原则(CARP:Composition/Aggregate Reuse Principle,)，该原则指出尽量使用合成/聚合，尽量不要使用类继承。</p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;在面向对象设计中，其中一个很重要的目标 就是提高软件的高可复用性。而复用已有的设计和实现通常有两种方法，也就是上面提到的，通过组合/聚合关系或通过继承。但是，合成复用原则主张优先考虑使用组合/聚合的方式来达到复用的目的。<br>&ensp;&ensp;&ensp;&ensp;为什么要这么主张呢？<br>&ensp;&ensp;&ensp;&ensp;实际上在<a href="/64719d09/" title="《设计模式七大原则之里氏代换原则(Liskov Substitution Principle)》">《设计模式七大原则之里氏代换原则(Liskov Substitution Principle)》</a>一文中，我们就提到继承实际上是增强了两个类耦合性，子类在继承基类时，会将基类的实现细节暴露给子类，基类的内部细节通常对子类来说是可见的，其实这种复用又叫作<strong>“白箱”复用</strong>。这种复用容易在“不知情”的情况下破坏系统的封装性，所以遵循里氏代换原则，我们优先通过聚合，组合，依赖等方式来解决问题。<br>&ensp;&ensp;&ensp;&ensp;组合/聚合复用有什么好处？<br>&ensp;&ensp;&ensp;&ensp;通过组合或聚合达到复用目的的做法实际上是，将已有的成员对象加入到新的对象中，让其成为新对象的一部分，而不破坏原有对象的封装，这样使得成员对象的内部细节不会暴露给新对象，所需的依赖较少，相对于继承复用来说，这种方式降低了耦合性，这种复用又叫作<strong>“黑箱”复用</strong>。</p><div class="note info"><p><strong>合成</strong>：表示一种强的拥有关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。<br>合成关系用实心的菱形+实线来表示，如下图：<br><img data-src="/fd78ccb3/Composition.gif" title="Composition"><br><strong>聚合</strong>：表示一种弱的拥有关系，体现的是A对象可以包含B对象，但是B对象并不是A对象的一部分。<br>聚合关系用空心的菱形+实线来表示，如下图：<br><img data-src="/fd78ccb3/Aggregate.gif" title="Aggregate"></p></div><p>&ensp;&ensp;&ensp;&ensp;合成/聚合复用原则在设计模式中最好的体现就是桥接（Bridge）模式，后面介绍设计模式时再继续介绍。</p><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;合成复用原则(CRP:Composite Reuse Principle)又称为组合/聚合复用原则(CARP:Composition/Aggregate Reuse Principle,)，该原则指出尽量使用合成/聚合，尽量不要使用类继承。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之迪米特法则(Demeter Principle)</title>
    <link href="https://www.syshlang.com/8a7ffc25/"/>
    <id>https://www.syshlang.com/8a7ffc25/</id>
    <published>2019-09-01T13:28:20.000Z</published>
    <updated>2020-01-17T04:50:39.857Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;迪米特法则(LOD:Law of Demeter/Demeter Principle),又叫最少知道原则（LKP:Least Knowledge Principle），即一个类对自己依赖的类知道的越少越好。</p><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;其实，迪米特法则反应出来的核心思想还是编程中总的原则：低耦合，高内聚。类与类关系越密切，耦合度越大，如果实际的需求发生改变，我们需要更改软件，当一个类改动时，另一个或多个类跟这个类的关系越密切（耦合度越高），受到的影响也越大。迪米特法则还有一个更简单的定义：只与直接的朋友通信。</p><div class="note info"><p><strong>直接的朋友</strong>：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</p></div><blockquote><p>举一个打印员工绩效的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeterprinciple</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DevelopmentCenterManage.showPerformance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentCenter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String performance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPerformance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> performance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerformance</span><span class="params">(String performance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.performance = performance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心的开发一部员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDepartment</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String performance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPerformance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> performance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerformance</span><span class="params">(String performance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.performance = performance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  开发中心的开发一部员工管理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDepartmentManager</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;FirstDepartment&gt; <span class="title">getFirstDepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;FirstDepartment&gt; firstDepartmentList = <span class="keyword">new</span> ArrayList&lt;FirstDepartment&gt;();</span><br><span class="line">            FirstDepartment firstDepartment = <span class="keyword">new</span> FirstDepartment();</span><br><span class="line">            firstDepartment.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">            firstDepartment.setPerformance(<span class="string">"A"</span>);</span><br><span class="line">            firstDepartmentList.add(firstDepartment);</span><br><span class="line">            <span class="keyword">return</span> firstDepartmentList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心管理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentCenterManage</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取开发中心所有员工绩效</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;DevelopmentCenter&gt;  <span class="title">getDevelopmentCenter</span><span class="params">()</span></span>&#123;</span><br><span class="line">           List&lt;DevelopmentCenter&gt; developmentCenterList = <span class="keyword">new</span> ArrayList&lt;DevelopmentCenter&gt;();</span><br><span class="line">           DevelopmentCenter developmentCenter  = <span class="keyword">new</span> DevelopmentCenter();</span><br><span class="line">           developmentCenter.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">           developmentCenter.setPerformance(<span class="string">"A"</span>);</span><br><span class="line">           developmentCenterList.add(developmentCenter);</span><br><span class="line">           <span class="keyword">return</span> developmentCenterList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印绩效</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showPerformance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;DevelopmentCenter&gt; developmentCenterList = getDevelopmentCenter();</span><br><span class="line">            <span class="keyword">for</span> (DevelopmentCenter developmentCenter : developmentCenterList )&#123;</span><br><span class="line">                System.out.println(<span class="string">"name："</span>+ developmentCenter.getName() + <span class="string">" performance:"</span>+ developmentCenter.getPerformance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 开发中心的开发一部员工普遍绩效比较优秀也要打印出来</span></span><br><span class="line">            <span class="comment">// 但此处引入了DevelopmentCenterManage的非直接朋友类FirstDepartment，违反了迪米特法则</span></span><br><span class="line">            List&lt;FirstDepartment&gt; firstDepartmentList = FirstDepartmentManager.getFirstDepartment();</span><br><span class="line">            <span class="keyword">for</span> (FirstDepartment firstDepartment : firstDepartmentList) &#123;</span><br><span class="line">                System.out.println(<span class="string">"name："</span>+ firstDepartment.getName() + <span class="string">" performance:"</span>+ firstDepartment.getPerformance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上面的例子中，我们想打印出开发中心所有员工的绩效情况，但是由于开发中心的开发一部员工普遍表现优秀，所以也想一起打印出来，但共用了DevelopmentCenterManage类的打印方法，最终导致引入了DevelopmentCenterManage的非直接朋友类FirstDepartment，违反了迪米特法则，这样显然是增加了不必要的耦合。因此，改进如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeterprinciple1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DevelopmentCenterManage.showPerformance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentCenter</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String performance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPerformance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> performance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerformance</span><span class="params">(String performance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.performance = performance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心的开发一部员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDepartment</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String performance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPerformance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> performance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerformance</span><span class="params">(String performance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.performance = performance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  开发中心的开发一部员工管理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDepartmentManager</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;FirstDepartment&gt; <span class="title">getFirstDepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;FirstDepartment&gt; firstDepartmentList = <span class="keyword">new</span> ArrayList&lt;FirstDepartment&gt;();</span><br><span class="line">            FirstDepartment firstDepartment = <span class="keyword">new</span> FirstDepartment();</span><br><span class="line">            firstDepartment.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">            firstDepartment.setPerformance(<span class="string">"A"</span>);</span><br><span class="line">            firstDepartmentList.add(firstDepartment);</span><br><span class="line">            <span class="keyword">return</span> firstDepartmentList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 增加独立的打印方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showFirstDepartmentPerformance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;FirstDepartment&gt; firstDepartmentList = getFirstDepartment();</span><br><span class="line">            <span class="keyword">for</span> (FirstDepartment firstDepartment : firstDepartmentList) &#123;</span><br><span class="line">                System.out.println(<span class="string">"name："</span>+ firstDepartment.getName() + <span class="string">" performance:"</span>+ firstDepartment.getPerformance());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中心管理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevelopmentCenterManage</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取开发中心所有员工绩效</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;DevelopmentCenter&gt;  <span class="title">getDevelopmentCenter</span><span class="params">()</span></span>&#123;</span><br><span class="line">           List&lt;DevelopmentCenter&gt; developmentCenterList = <span class="keyword">new</span> ArrayList&lt;DevelopmentCenter&gt;();</span><br><span class="line">           DevelopmentCenter developmentCenter  = <span class="keyword">new</span> DevelopmentCenter();</span><br><span class="line">           developmentCenter.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">           developmentCenter.setPerformance(<span class="string">"A"</span>);</span><br><span class="line">           developmentCenterList.add(developmentCenter);</span><br><span class="line">           <span class="keyword">return</span> developmentCenterList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 打印绩效</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showPerformance</span><span class="params">()</span></span>&#123;</span><br><span class="line">            List&lt;DevelopmentCenter&gt; developmentCenterList = getDevelopmentCenter();</span><br><span class="line">            <span class="keyword">for</span> (DevelopmentCenter developmentCenter : developmentCenterList )&#123;</span><br><span class="line">                System.out.println(<span class="string">"name："</span>+ developmentCenter.getName() + <span class="string">" performance:"</span>+ developmentCenter.getPerformance());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遵循迪米特法则，这里调用FirstDepartmentManager类自己封装的打印方法，</span></span><br><span class="line">            <span class="comment">// 不在引入非直接朋友类FirstDepartment</span></span><br><span class="line">            FirstDepartmentManager.showFirstDepartmentPerformance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;迪米特法则的核心是降低类之间的耦合,在实际开发的过程中，对于被依赖的类不管多么复杂，我们都应尽量将逻辑封装在类的内部，对外除了提供的public方法，不对外泄露任何信息。当然，这不是要求完全没有依赖关系，使用迪米特法则时我们应当根据实际情况权衡，尽量降低类间(对象间)耦合关系。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;迪米特法则(LOD:Law of Demeter/Demeter Principle),又叫最少知道原则（LKP:Least Knowledge Principle），即一个类对自己依赖的类知道的越少越好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之开闭原则 (Open Close Principle)</title>
    <link href="https://www.syshlang.com/1376ad9f/"/>
    <id>https://www.syshlang.com/1376ad9f/</id>
    <published>2019-08-28T02:42:38.000Z</published>
    <updated>2020-01-17T04:50:39.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;开闭原则 (OCP:Open Close Principle)是编程中最基础、最重要的设计原则。它指出，一个软件中的对象（类，模块，函数等等）应该对于扩展是开放的(对提供方)，但是对于修改是封闭的(对使用方)。</p><a id="more"></a><blockquote><p>举一个计算几何形状周长的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Openclose</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculatePerimeter calculatePerimeter = <span class="keyword">new</span> CalculatePerimeter();</span><br><span class="line">        calculatePerimeter.rectanglePerimeter(<span class="number">8</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算几何图形周长的工具类，提供了一个计算矩形周长的方法</span></span><br><span class="line"><span class="comment">     * 这个种方式扩展性不好，如果新增一个计算圆形的周长，</span></span><br><span class="line"><span class="comment">     * 需要改动类，增加新的方法（违背开闭原则）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePerimeter</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算矩形周长</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">rectanglePerimeter</span><span class="params">(<span class="keyword">double</span> length,<span class="keyword">double</span> width)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (length + width) * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上面的例子中，CalculatePerimeter类用于计算几何图形周长，并提供了一个计算矩形周长的方法，这种设计方式违反了设计模式的ocp原则，假如我们需要计算其他图形的周长，需要改动原有的类，增加新的方法，如果业务复杂需要改动的地方会更多，扩展性不好很差。改进方式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Openclose1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CalculatePerimeter calculatePerimeter = <span class="keyword">new</span> CalculatePerimeter();</span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle(<span class="number">8</span>,<span class="number">4</span>);</span><br><span class="line">        calculatePerimeter.calculatePerimeter(rectangle);</span><br><span class="line">        <span class="comment">//如果需要增加计算圆周长，只需自行扩展圆类型</span></span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle(<span class="number">4</span>);</span><br><span class="line">        calculatePerimeter.calculatePerimeter(circle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算几何图形周长的工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatePerimeter</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculatePerimeter</span><span class="params">(Shape shape)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> shape.shapePerimeter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象出几何图形基类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">shapePerimeter</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在矩形中实现计算周长的细节</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>  <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.length = length;</span><br><span class="line">            <span class="keyword">this</span>.width = width;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">shapePerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (length + width) * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展计算圆形周长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span>  <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> π = <span class="number">3.14</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> radius;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">shapePerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * π * radius;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;开闭原则体现出来的思想就是用抽象构建框架，用实现扩展细节。抽象的灵活性好，适应性广，易扩展，在框架设计时，我们要设计合理的抽象基类，在抽象派生的实现类中实现细节部分，这样当软件需要变化时，可以通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现，这种方式从一定程度上保证了软件架构的稳定性。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;开闭原则 (OCP:Open Close Principle)是编程中最基础、最重要的设计原则。它指出，一个软件中的对象（类，模块，函数等等）应该对于扩展是开放的(对提供方)，但是对于修改是封闭的(对使用方)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之里氏代换原则(Liskov Substitution Principle)</title>
    <link href="https://www.syshlang.com/64719d09/"/>
    <id>https://www.syshlang.com/64719d09/</id>
    <published>2019-08-23T08:18:16.000Z</published>
    <updated>2020-01-17T04:50:39.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;里氏代换原则(LSP:Liskov Substitution Principle)指出：如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。<br>&ensp;&ensp;&ensp;&ensp;换句话说，所有引用基类的地方必须能透明地使用其子类的对象。对于子类而言，可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：</p><a id="more"></a><blockquote><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；</li></ul></blockquote><ul><li>子类中可以增加自己特有的方法；</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松；</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><blockquote><p>还是举一个交通工具的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskovsubstitution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Transportation transportation = <span class="keyword">new</span> Transportation();</span><br><span class="line">        transportation.run(<span class="string">"轮船"</span>);</span><br><span class="line">        Transportation1 transportation1 = <span class="keyword">new</span> Transportation1();</span><br><span class="line">        transportation1.run(<span class="string">"轮船"</span>);</span><br><span class="line">        transportation1.runSpeed(<span class="number">120</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Transportation</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String transportation)</span> </span>&#123;</span><br><span class="line">            System.out.println(transportation + <span class="string">" 在水中航行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transportation1</span> <span class="keyword">extends</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 覆盖父类的方法</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> vehicle</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">" 在公路上运行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">runSpeed</span><span class="params">(<span class="keyword">int</span> runSpeed)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"行驶速度为："</span>+ runSpeed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;由上面的例子我们可以看出继承的风险，Transportation类有一个打印交通工具行驶方式行驶方式的功能，且该功能只适用于水中运行的交通工具，刚开始一切正常。但是，现在多了一个新的需求，要打印交通工具的行驶速度，类Transportation1来负责实现，于是Transportation1继承Transportation完成第二个功能，但是在调用者不知道的情况下无意间覆盖（重写）了父类中的方法，导致原本正常的功能发生逻辑错误。改进方式：去掉原有的继承关系，让父类和子类都继承一个更通俗的基类,使用组合方式完成功能。如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskovsubstitution1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TransportationSpeed transportationSpeed = <span class="keyword">new</span> TransportationSpeed(<span class="string">"轮船"</span>,<span class="number">120</span>);</span><br><span class="line">        transportationSpeed.runSpeed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String way;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportationWay</span> <span class="keyword">extends</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String transportation)</span> </span>&#123;</span><br><span class="line">            System.out.println(transportation + <span class="string">" 在水中航行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportationSpeed</span> <span class="keyword">extends</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果需要使用TransportationWay类的方法,使用组合关系</span></span><br><span class="line">        <span class="keyword">private</span> TransportationWay transportationWay = <span class="keyword">new</span> TransportationWay();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TransportationSpeed</span><span class="params">(String way,<span class="keyword">int</span> speed)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.way = way;</span><br><span class="line">            <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TransportationSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">runSpeed</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//组合调用TransportationWay类run方法获取行驶方式</span></span><br><span class="line">            transportationWay.run(way);</span><br><span class="line">            System.out.println(<span class="string">"行驶速度为："</span>+ speed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;里氏替换原则告诉我们，继承实际上让两个类耦合性增强了，在实际开发的过程中，使用继承时，我们应当遵循里氏替换原则，在子类中尽量不要重写父类的方法，适当情况下，我们可以通过聚合，组合，依赖等方式来解决问题。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;里氏代换原则(LSP:Liskov Substitution Principle)指出：如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型。&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;换句话说，所有引用基类的地方必须能透明地使用其子类的对象。对于子类而言，可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之依赖倒转原则 (Dependence Inversion Principle)</title>
    <link href="https://www.syshlang.com/fa1508aa/"/>
    <id>https://www.syshlang.com/fa1508aa/</id>
    <published>2019-08-23T03:04:25.000Z</published>
    <updated>2020-01-17T04:50:39.747Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;依赖倒转原则(DIP: Dependence Inversion Principle)也说依赖倒置原则,包含三层含义:高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。依赖倒转(倒置)的中心思想就是面向接口编程。</p><a id="more"></a><blockquote><p>举个我们日常通信的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependenceinversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.sendMessageBySMS(<span class="keyword">new</span> SMScommunicate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMScommunicate</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"使用手机短信发送信息！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageBySMS</span><span class="params">(SMScommunicate smScommunicate)</span></span>&#123;</span><br><span class="line">            smScommunicate.sendMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在很久之前，互联不发达时，我们通信一般采用手机发送短信或者打电话，如上面的代码，一切正常。但是，随机互联网的普及更多的通信方式出现了，例如微信、QQ等，需求场景发生变化，那么最简单的做法就是新增微信和QQ的通讯类，并且给People增加相应的方法。显然，这种方法不能满足多变性需求，且不稳定。所以，我们使用另一种思路解决，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependenceinversion1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> People();</span><br><span class="line">        people.sendMessage(<span class="keyword">new</span> SMScommunicate());</span><br><span class="line">        people.sendMessage(<span class="keyword">new</span> QQcommunicate());</span><br><span class="line">        people.sendMessage(<span class="keyword">new</span> Wechatcommunicate());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span>  <span class="title">Communicate</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMScommunicate</span> <span class="keyword">implements</span> <span class="title">Communicate</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"使用手机短信发送信息！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">QQcommunicate</span> <span class="keyword">implements</span> <span class="title">Communicate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"使用QQ发送信息！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Wechatcommunicate</span> <span class="keyword">implements</span> <span class="title">Communicate</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"使用微信发送信息！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Communicate communicate)</span></span>&#123;</span><br><span class="line">           communicate.sendMessage();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>根据依赖倒置原则，在新的解决方案中，我们引入了一个通讯工具的接口Communicate，让几种不同的通信方式去实现接口，这样修改后，无论以后怎样扩展，都不需要再修改People类了。</p></blockquote><blockquote><p><strong>依赖关系传递的三种方式</strong></p></blockquote><ul><li><p>接口声明依赖</p><blockquote><p>在上面日常通信的例子中，我们在用的就是接口声明依赖的方式，该方法也叫做接口注入。</p></blockquote></li><li><p>构造函数传递依赖对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数传递依赖对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span>  <span class="keyword">implements</span> <span class="title">Communicate</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Communicate communicate;</span><br><span class="line">    <span class="comment">//构造函数注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(Communicate communicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.communicate = communicate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        communicate.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Communicate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Setter方法传递依赖对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Setter方法传递依赖对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People1</span> <span class="keyword">implements</span> <span class="title">Communicate1</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Communicate communicate;</span><br><span class="line">    <span class="comment">//Setter依赖注入</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommunicate</span><span class="params">(Communicate communicate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.communicate = communicate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        communicate.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Communicate1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;在java中，抽象指的是接口或抽象类，细节就是具体的实现类，相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。在实际的开发中，低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好；变量的声明类型尽量是抽象类或接口,这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化；使用继承时遵循 <a href="/64719d09/" title="里氏代换原则(Liskov Substitution Principle)">里氏代换原则(Liskov Substitution Principle)</a>。</p></div><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;依赖倒转原则(DIP: Dependence Inversion Principle)也说依赖倒置原则,包含三层含义:高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。依赖倒转(倒置)的中心思想就是面向接口编程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之接口隔离原则 (Interface Segregation Principle)</title>
    <link href="https://www.syshlang.com/8d12383c/"/>
    <id>https://www.syshlang.com/8d12383c/</id>
    <published>2019-08-18T09:06:06.000Z</published>
    <updated>2020-01-17T04:50:39.777Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;接口隔离原则 (ISP: Interface Segregation Principle)有两种定义：客户端不应该依赖它不需要的接口；类间的依赖关系应该建立在最小的接口上。</p><a id="more"></a><blockquote><p>类之间通过接口依赖的例子</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interfacesegregation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.dependA(<span class="keyword">new</span> A());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceCommon</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodOther</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">InterfaceCommon</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"A类方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"其他类方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dependA</span><span class="params">(InterfaceCommon interfaceCommon)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"通过公共接口依赖A类调用A类方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上面的例子中可以看出，我们使用B类时想通过公共接口InterfaceCommon依赖A类，调用A类实现的方法，但是A类在实现自己的方法时还必须去实现其他类的方法。因此，InterfaceCommon对于B来说不是最小的接口，违背了接口隔离原则。更改方案，将InterfaceCommon拆分为独立的接口，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interfacesegregation1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.dependC(<span class="keyword">new</span> A());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceA</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterfaceOther</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodOther</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">InterfaceA</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"A类方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dependC</span><span class="params">(InterfaceA interfaceA)</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"通过最小接口依赖A类调用A类方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p></blockquote><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><div class="note info"><p>接口隔离原则和单一职责的异同：</p><ul><li><p>共同点：<br>这两种原则都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想。</p></li><li><p>不同点：</p></li></ul><ol><li>侧重点不一样，单一职责原则注重的是类的功能职责单一；接口隔离原则注重的是对接口依赖的隔离；</li><li>约束对象不一样，单一职责原则主要约束类，它针对的是类的功能职责，程序的实现和细节；接口隔离原则主要约束接口，它针对的是接口模板功能的设计构建。</li></ol></div><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;接口隔离原则 (ISP: Interface Segregation Principle)有两种定义：客户端不应该依赖它不需要的接口；类间的依赖关系应该建立在最小的接口上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>Windows上安装 MySQL</title>
    <link href="https://www.syshlang.com/7d2a91d4/"/>
    <id>https://www.syshlang.com/7d2a91d4/</id>
    <published>2019-08-09T03:20:25.000Z</published>
    <updated>2019-10-09T05:40:08.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/77d59a46/MySQL.png" title="Mysql"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp; Window上安装MySQL主要有两种方式：第一种，MySQL安装包安装方式；第二种，绿色版压缩包安装方式。第一种方式相对简单，就是简单的点击下一步安装，不再赘述，本文主要讲解第二种方式的安装及安装过程中出现问题的解决方式。</p><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;进入<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=" title="https://dev.mysql.com/downloads/mysql/">MySQL 下载<i class="fa fa-external-link"></i></span>,可以看到mysql的下载包列表。我选择的是5.7版本。</p><img data-src="/7d2a91d4/mysql-donwnload.png" title="MySQL 下载"><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><ol><li>将下载好的压缩包文件解压到指定目录，比如D:\mysql-5.7.20-winx64；</li><li>配置下 MySQL 的配置文件，打开刚刚解压的文件夹 D:\mysql-5.7.20-winx64 ，修改my-default.ini为my.ini，如果不存在直接创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"><span class="comment"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span></span><br><span class="line"><span class="comment"># *** default location during install, and will be replaced if you</span></span><br><span class="line"><span class="comment"># *** upgrade to a newer version of MySQL.</span></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line"><span class="comment"># 设置为自己MYSQL的安装目录 </span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64</span><br><span class="line"><span class="comment"># 设置为MYSQL的数据目录 </span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64\data</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment">#开启查询缓存</span></span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#默认的存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure>上面这个是5.7版本的配置,MySQL 8+配置如下：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"> </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\web\\mysql-<span class="number">8.0</span>.<span class="number">11</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">20</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li><li>启动 MySQL 数据库<br>以管理员身份打开 cmd 命令行工具，切换目录：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">sunys</span>&gt;<span class="title">cd</span> <span class="title">D</span>:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span></span></span><br></pre></td></tr></table></figure></li><li>初始化数据库：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">initialize</span> --<span class="title">user</span>=<span class="title">mysql</span>--<span class="title">console</span></span></span><br></pre></td></tr></table></figure>此时会给管理账户root随机生成一个临时密码。<div class="note info"><ul><li>-initialize生成随机密码</li><li>-initialize-insecure生成空密码</li><li>默认帐号root,后面的-user=mysql不更改</li></ul></div></li><li>安装Mysql服务<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">install</span> <span class="title">MySQL</span></span></span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">net</span> <span class="title">start</span> <span class="title">MySQL</span></span></span><br></pre></td></tr></table></figure></li><li>登录数据库<br>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure><div class="note info"><ul><li>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li>-u : 登录的用户名;</li><li>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ul></div>我是登录本机的 MySQL 数据库，只需要输入以下命令即可：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span> -<span class="title">u</span> <span class="title">root</span> -<span class="title">p</span></span></span><br></pre></td></tr></table></figure>按回车确认，输入之前生成的临时密码（如果生成空密码,这里不用输入密码直接回车即可）。</li><li>成功登录后需要首先修改root账户的随机密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;密码&#39;;</span><br></pre></td></tr></table></figure>密码修改成功后即可使用自己设定的密码登录</li></ol><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><blockquote><p>卸载安装版方式安装的MySQL跟卸载普通的软件方式一样，直接在控制面板的程序和功能中卸载即可；绿色版安装的MySQL卸载方式如下：</p></blockquote><ol><li>在CMD命令行模式下，删除mysql服务<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">sunys</span>&gt;<span class="title">sc</span> <span class="title">delete</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure></li><li>regedit进入注册表，删除mysql相关的文件</li></ol><h1 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h1><h2 id="缺少dll"><a href="#缺少dll" class="headerlink" title="缺少dll"></a>缺少dll</h2><blockquote><p>安装版，遇到MSVCR120.dll文件丢失错误，如下图：</p></blockquote><img data-src="/7d2a91d4/mysql9-dll.png" title="MySQL 缺少dll"><blockquote><p>解决方案:下载 <span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDA3ODQ=" title="https://www.microsoft.com/en-us/download/details.aspx?id=40784">VC redist packages for x64<i class="fa fa-external-link"></i></span>,安装即可。</p></blockquote><h2 id="mysql无法启动"><a href="#mysql无法启动" class="headerlink" title="mysql无法启动"></a>mysql无法启动</h2><blockquote><p>重新安装MySQL数据库之后无法启动，报错如下：</p></blockquote><img data-src="/7d2a91d4/mysql9-start1.png" title="MySQL mysql无法启动"> <img data-src="/7d2a91d4/mysql9-start2.png" title="MySQL mysql无法启动"><blockquote><p>解决方案:</p></blockquote><ol><li>删除原来的mysql服务，进入mysql安装目录下的bin目录运行；<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">remove</span> <span class="title">MySQL</span></span></span><br></pre></td></tr></table></figure></li><li>在mysql的根目录下， 清空data目录；</li><li>删除注册表，重启电脑（貌似执行这一步之后才会有效，否则还是不行）；</li><li>重新执行安装命令并启动服务，启动成功。</li></ol><h2 id="Mysql连接报错：1130"><a href="#Mysql连接报错：1130" class="headerlink" title="Mysql连接报错：1130"></a>Mysql连接报错：1130</h2><blockquote><p>数据库安装完成之后，使用localhost作为地址链接没问题，但是改为真实IP之后，Mysql连接报错：1130-host … is not allowed to connect to this MySql server。</p></blockquote><blockquote><p>这个问题是因为在数据库服务器中的mysql数据库中的user的表中没有权限,解决方案:</p></blockquote><ol><li><p>连接服务器:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span> -<span class="title">u</span> <span class="title">root</span> -<span class="title">p</span></span></span><br></pre></td></tr></table></figure></li><li><p>看当前所有数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show databases;</span><br></pre></td></tr></table></figure><img data-src="/7d2a91d4/mysql9-connect1.png" title="当前所有数据库"></li><li><p>进入mysql数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br></pre></td></tr></table></figure></li><li><p>查看mysql数据库中所有的表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;show tables;</span><br></pre></td></tr></table></figure><img data-src="/7d2a91d4/mysql9-connect2.png" title="当前数据库所有的表"></li><li><p>查看user表中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select host, user from user;</span><br></pre></td></tr></table></figure><img data-src="/7d2a91d4/mysql9-connect3.png" title="user表中的数据"></li><li><p>修改user表中的Host:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;ebm&#39;;</span><br></pre></td></tr></table></figure></li><li><p>最后刷新一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>再查看user表中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select host, user from user;</span><br></pre></td></tr></table></figure><img data-src="/7d2a91d4/mysql9-connect4.png" title="user表中的数据"><blockquote><p>可以看到，此时ebm的host已经发生了变化，再使用真实IP链接mysql，链接成功。</p></blockquote><div class="note info"><p>host列的值：</p><ul><li>localhost 代表只可以本机连接</li><li>% 代表任何客户机都可以连接</li><li>空 值等价于’%’</li><li>固定IP 指定的IP可以连接</li><li>通配符字符（“%”和“_”） 例如：192.168.1.% 就表示ip为192.168.1.前缀的客户端都可以连接</li></ul></div></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/77d59a46/MySQL.png&quot; title=&quot;Mysql&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="database" scheme="https://www.syshlang.com/categories/technology/database/"/>
    
      <category term="Mysql" scheme="https://www.syshlang.com/categories/technology/database/Mysql/"/>
    
    
      <category term="database" scheme="https://www.syshlang.com/tags/database/"/>
    
      <category term="Mysql" scheme="https://www.syshlang.com/tags/Mysql/"/>
    
      <category term="sql" scheme="https://www.syshlang.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>设计模式七大原则之单一职责原则 (Single Responsibility Principle)</title>
    <link href="https://www.syshlang.com/934a08a4/"/>
    <id>https://www.syshlang.com/934a08a4/</id>
    <published>2019-05-21T12:14:58.000Z</published>
    <updated>2020-01-17T04:50:02.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><p>&ensp;&ensp;&ensp;&ensp;单一职责原则（SRP：Single responsibility principle）又称单一功能原则，对于一个类而言，不应存在多于一个导致类变更的原因，否则类应该被拆分,也就是说一个类只负责一项职责。如果一个类承担的职责项过多，就等于把这些职责耦合起来，使其难维护，复用度低，缺乏灵活性，当需求发生变化时，一项功能职责的变动可能导致整个功能无法使用，因此在实际中开发中，我们应将类的功能职责粒度分解,其核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</p><a id="more"></a><blockquote><p>交通工具的例子</p></blockquote><ul><li>方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vehicle vehicle = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        vehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">Vehicle</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">" 在公路上运行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>飞机本应天空中飞行，显然方式一中Vehicle的run方法中，违反了单一职责原则，根据单一职责原则改进如下：</p></blockquote><ul><li>方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RoadVehicle roadVehicle = <span class="keyword">new</span> RoadVehicle();</span><br><span class="line">        roadVehicle.run(<span class="string">"摩托车"</span>);</span><br><span class="line">        roadVehicle.run(<span class="string">"汽车"</span>);</span><br><span class="line"></span><br><span class="line">        AirVehicle airVehicle = <span class="keyword">new</span> AirVehicle();</span><br><span class="line">        airVehicle.run(<span class="string">"飞机"</span>);</span><br><span class="line"></span><br><span class="line">        WaterVehicle waterVehicle = <span class="keyword">new</span> WaterVehicle();</span><br><span class="line">        waterVehicle.run(<span class="string">"轮船"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RoadVehicle</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">"公路运行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AirVehicle</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">"天空运行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterVehicle</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">"水中运行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改进之后，每个交通工具类都有自己的单一职责，互不影响，遵守单一职责原则，但是这种改动花销很大，除了要根据职责将类分解为多个类，同时还要修改客户端。因此，改进如下：</p></blockquote><ul><li>方式三</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleResponsibility3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VehicleCommon vehicleCommon  = <span class="keyword">new</span> VehicleCommon();</span><br><span class="line">        vehicleCommon.runRoad(<span class="string">"汽车"</span>);</span><br><span class="line">        vehicleCommon.runAir(<span class="string">"飞机"</span>);</span><br><span class="line">        vehicleCommon.runWater(<span class="string">"轮船"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VehicleCommon</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runRoad</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">" 在公路上运行...."</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">" 在天空上运行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span> </span>&#123;</span><br><span class="line">            System.out.println(vehicle + <span class="string">" 在水中行...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，这种方式没有对类进行拆分，只是增加方法，改动不大，但最终也满足实际的需求，这种改动虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守单一职责原则。在实际开发中，我们可以根据实际情况决定在类级别上遵守单一职责原则，还是在方法级别上遵守单一职责原则；</p></blockquote><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL2phdmEtZGVzaWduLXByaW5jaXBsZQ==" title="https://github.com/syshlang/java-design-principle">https://github.com/syshlang/java-design-principle<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=java-design-principle&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;单一职责原则（SRP：Single responsibility principle）又称单一功能原则，对于一个类而言，不应存在多于一个导致类变更的原因，否则类应该被拆分,也就是说一个类只负责一项职责。如果一个类承担的职责项过多，就等于把这些职责耦合起来，使其难维护，复用度低，缺乏灵活性，当需求发生变化时，一项功能职责的变动可能导致整个功能无法使用，因此在实际中开发中，我们应将类的功能职责粒度分解,其核心就是控制类的粒度大小、将对象解耦、提高其内聚性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计原则" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="principle" scheme="https://www.syshlang.com/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>JAVA开发中的设计模式</title>
    <link href="https://www.syshlang.com/25810b4c/"/>
    <id>https://www.syshlang.com/25810b4c/</id>
    <published>2019-05-17T12:28:57.000Z</published>
    <updated>2020-01-17T06:27:54.388Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/25810b4c/java-design-patterns0.jpg" title="设计模式"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在《<a href="/4fb5687d/" title="java抽象类和模板方法设计">java抽象类和模板方法设计</a>》中,讲到了利用接口和抽象类进行模板方法设计。在我们实际开发的过程中，最多的操作可能就是curd堆业务代码，只有负责架构的才会去考虑设计模式相关的东西，然而呢，其实我们接触到与java设计模式相关的还是很多，例如，jDK源码，几乎每个web项目都会使用的企业级应用分层框架spring框架等。<br>&ensp;&ensp;&ensp;&ensp;在软件开发过程中，对于软件架构的设计，我们需要从耦合性、内聚性以及可维护性、可扩展性、重用性、灵活性等多方面进行考虑，设计模式的出现在这些方面为我们提供了思路和解决方案。</p><h1 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;设计模式的原则，指的就是我们在软件编程的过程中，应该遵循的原则，它是设计模式的基础和依据，主要有七大原则：</p></blockquote><ul><li><a href="/934a08a4/" title="单一职责原则 (Single Responsibility Principle)">单一职责原则 (Single Responsibility Principle)</a></li><li><a href="/8d12383c/" title="接口隔离原则 (Interface Segregation Principle)">接口隔离原则 (Interface Segregation Principle)</a></li><li><a href="/fa1508aa/" title="依赖倒转原则 (Dependence Inversion Principle)">依赖倒转原则 (Dependence Inversion Principle)</a></li><li><a href="/64719d09/" title="里氏代换原则 (Liskov Substitution Principle)">里氏代换原则 (Liskov Substitution Principle)</a></li><li><a href="/1376ad9f/" title="开闭原则 (Open Close Principle)">开闭原则 (Open Close Principle)</a></li><li><a href="/8a7ffc25/" title="迪米特法则(Demeter Principle)">迪米特法则(Demeter Principle)</a></li><li><a href="/fd78ccb3/" title="合成复用原则(Composite Reuse Principle)">合成复用原则(Composite Reuse Principle)</a></li></ul><h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><p>总体来说设按照功能可将计模式分为三大类：</p><table><thead><tr><th align="center">分类</th><th align="center">功能</th><th align="center">设计模式</th></tr></thead><tbody><tr><td align="center">创建型模式</td><td align="center">主要用于创建对象</td><td align="center"><a href="/659a32bd/" title="工厂方法模式">工厂方法模式</a>、<a href="/659a32bd/" title="抽象工厂模式">抽象工厂模式</a>、<a href="/fc936307/" title="单例模式">单例模式</a>、<a href="/129d022b/" title="原型模式">原型模式</a>、<a href="/8cf99788/" title="建造者模式">建造者模式</a></td></tr><tr><td align="center">结构型模式</td><td align="center">主要用于处理类或者对象的组合</td><td align="center"><a href="/fbfea71e/" title="适配器模式">适配器模式</a>、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</td></tr><tr><td align="center">行为型模式</td><td align="center">主要用于描述对类或对象怎样交互和怎样分配职责</td><td align="center">策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td></tr></tbody></table><p>其实还有两类：并发型模式和线程池模式。</p><h2 id="创建型模式（Creational-patterns）"><a href="#创建型模式（Creational-patterns）" class="headerlink" title="创建型模式（Creational patterns）"></a>创建型模式（Creational patterns）</h2><img data-src="/25810b4c/java-design-patterns4.jpg" title="创建型模式"><blockquote><p>&ensp;&ensp;&ensp;&ensp;创建型模式，顾名思义就是用来创建对象的设计模式，所以这种类型的模式主要用途是就用于创建对象，关注点是对象的创建。这种类型的设计模式主要特点是将创建对象的过程进行了抽象，封装，对于对象的使用者而言只需调用，而不需要去关心对象创建的过程如何。</p></blockquote><h2 id="结构型模式（Structural-patterns）"><a href="#结构型模式（Structural-patterns）" class="headerlink" title="结构型模式（Structural patterns）"></a>结构型模式（Structural patterns）</h2><img data-src="/25810b4c/java-design-patterns5.jpg" title="结构型模式"><blockquote><p>&ensp;&ensp;&ensp;&ensp;结构型设计模式，为我们如何组合类和对象以获得更大的结构提供思路，从程序的结构上解决模块之间的耦合问题。<br>&ensp;&ensp;&ensp;&ensp;从组合结构上来看，又可以分为两类：类结构型模式、对象结构型模式。类结构型模式主要关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系；对象结构型模式则主要关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法，更符合“合成复用原则”。</p></blockquote><h2 id="行为型模式（Behavioral-patterns）"><a href="#行为型模式（Behavioral-patterns）" class="headerlink" title="行为型模式（Behavioral patterns）"></a>行为型模式（Behavioral patterns）</h2><img data-src="/25810b4c/java-design-patterns6.jpg" title="行为型模式"><blockquote><p>&ensp;&ensp;&ensp;&ensp;行为型模式，是设计模式中最为庞大的一类，前面两类模式已经解决了对象的创建问题及类和对象的组合结构问题，那么这第三大类型的模式自然就是用来解决类或对象相互协作的问题。这类设计模式主要用于描述程序在运行时复杂的流程控制，例如分配算法与对象间职责，协调类或对象之间相互协作等。<br>&ensp;&ensp;&ensp;&ensp;当然，行为型模式也可分为两类：类行为模式、对象行为模式。类行为模式采用继承机制来在类间分派行为，对象行为模式则采用组合或聚合在对象间分配行为；由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p></blockquote><h1 id="设计模式之间的关系"><a href="#设计模式之间的关系" class="headerlink" title="设计模式之间的关系"></a>设计模式之间的关系</h1><blockquote><p>给两张图</p></blockquote><img data-src="/25810b4c/java-design-patterns1.png" title="设计模式思维导图"> <img data-src="/25810b4c/java-design-patterns2.jpg" title="设计模式之间的关系"><h1 id="设计模式在软件中的应用"><a href="#设计模式在软件中的应用" class="headerlink" title="设计模式在软件中的应用"></a>设计模式在软件中的应用</h1><pre class="mermaid">graph LRA(面向对象) -->|设计模式+算法+数据结构| B[功能模块]B -->|多种设计模式| C[框架]C -->|服务器集群| D[架构]</pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img data-src="/25810b4c/java-design-patterns3.jpg" title="设计模式分类和原则"><blockquote><p>&ensp;&ensp;&ensp;&ensp;设计模式实际是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的问题解决方案，当我们在软件开发过程中面临一般问题时，不妨从这方面入手看是否能找到解决方法。</p></blockquote><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”。</p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/25810b4c/java-design-patterns0.jpg&quot; title=&quot;设计模式&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JAVA" scheme="https://www.syshlang.com/tags/JAVA/"/>
    
      <category term="design" scheme="https://www.syshlang.com/tags/design/"/>
    
      <category term="patterns" scheme="https://www.syshlang.com/tags/patterns/"/>
    
  </entry>
  
  <entry>
    <title>java抽象类和模板方法设计</title>
    <link href="https://www.syshlang.com/4fb5687d/"/>
    <id>https://www.syshlang.com/4fb5687d/</id>
    <published>2019-04-20T07:25:41.000Z</published>
    <updated>2019-10-09T05:40:08.324Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><img data-src="/4fb5687d/abstract.png" title="模板方法设计"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;最近，在做项目时，遇到一个业务场景是这样的：有一种类型的电子锁，开锁的方式有两种，这两种方式开锁的过程有不同的地方也有相同的地方，主要的开锁流程差不多一致，设计这两种方式开锁流程的时候，我想到了利用java抽象类来进行模板方法设计。</p></blockquote><h1 id="Java抽象类与接口的区别"><a href="#Java抽象类与接口的区别" class="headerlink" title="Java抽象类与接口的区别"></a>Java抽象类与接口的区别</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;面试的过程中，很多面试官考察java基础知识的时候，通常都会问诸如“Java抽象类与接口有什么区别？请你说说两者各自的使用场景？”这样的问题，那么两者有什么区别呢，大概总结如下：</p></blockquote><table><thead><tr><th align="center">参数</th><th align="center">抽象类</th><th align="center">接口</th></tr></thead><tbody><tr><td align="center">默认的方法实现</td><td align="center">它可以有默认的方法实现</td><td align="center">接口完全是抽象的。它根本不存在方法的实现</td></tr><tr><td align="center">实现</td><td align="center">子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。</td><td align="center">子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现</td></tr><tr><td align="center">构造器</td><td align="center">抽象类可以有构造器</td><td align="center">接口不能有构造器</td></tr><tr><td align="center">与正常Java类的区别</td><td align="center">除了你不能实例化抽象类之外，它和普通Java类没有任何区别</td><td align="center">接口是完全不同的类型</td></tr><tr><td align="center">成员变量</td><td align="center">抽象类中的静态成员变量的访问类型可以任意</td><td align="center">接口中定义的变量只能是public static final类型，并且默认即为public static final类型。</td></tr><tr><td align="center">成员方法</td><td align="center">抽象方法可以有public、protected和default这些修饰符，可以包含静态方法</td><td align="center">接口方法默认修饰符是public，并且默认即为public abstract类型，不能包含静态方法</td></tr><tr><td align="center">多继承</td><td align="center">抽象方法可以继承一个类和实现多个接口</td><td align="center">接口只可以继承一个或多个其它接口</td></tr><tr><td align="center">速度</td><td align="center">它比接口速度要快</td><td align="center">接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</td></tr><tr><td align="center">添加新方法</td><td align="center">如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。</td><td align="center">如果你往接口中添加方法，那么你必须改变实现该接口的类。</td></tr></tbody></table><h1 id="Java抽象类与接口的使用场景"><a href="#Java抽象类与接口的使用场景" class="headerlink" title="Java抽象类与接口的使用场景"></a>Java抽象类与接口的使用场景</h1><h2 id="interface的应用场合"><a href="#interface的应用场合" class="headerlink" title="interface的应用场合"></a>interface的应用场合</h2><blockquote><ul><li>类与类之前需要特定的接口进行协调，而不在乎其如何实现;</li></ul></blockquote><ul><li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识;</li><li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联;</li><li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</li></ul><figure class="highlight java"><figcaption><span>USB.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;        <span class="comment">// 定义了USB接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>;    <span class="comment">// USB设备开始工作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>;    <span class="comment">// USB设备结束工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Flash.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;    <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"U盘开始工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;        <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"U盘停止工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Print.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;    <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"打印机开始工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;        <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"打印机停止工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-class的应用场合"><a href="#abstract-class的应用场合" class="headerlink" title="abstract class的应用场合"></a>abstract class的应用场合</h2><blockquote><ul><li>在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它,例如：规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。</li></ul></blockquote><figure class="highlight java"><figcaption><span>Person.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;        <span class="comment">// 定义name属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;            <span class="comment">// 定义age属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;        <span class="comment">// 人说话是一个具体的功能</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getContent()) ;    <span class="comment">// 输出内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getContent</span><span class="params">()</span> </span>;    <span class="comment">// 说话的内容由子类决定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Student.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> score ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">float</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age) ;    <span class="comment">// 调用父类中的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.score = score ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    <span class="string">"学生信息 --&gt; 姓名："</span> + <span class="keyword">super</span>.getName() + </span><br><span class="line">                <span class="string">"；年龄："</span> + <span class="keyword">super</span>.getAge() + </span><br><span class="line">                <span class="string">"；成绩："</span> + <span class="keyword">this</span>.score ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Worker.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">float</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age) ;    <span class="comment">// 调用父类中的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.salary = salary ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    <span class="string">"工人信息 --&gt; 姓名："</span> + <span class="keyword">super</span>.getName() + </span><br><span class="line">                <span class="string">"；年龄："</span> + <span class="keyword">super</span>.getAge() + </span><br><span class="line">                <span class="string">"；工资："</span> + <span class="keyword">this</span>.salary ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary"><p>&ensp;&ensp;&ensp;&ensp;在实际开发过程中，接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用。模板方法设计模式就是抽象类的一个典型应用，工厂模式、代理设计模式都是通过implements实现接口的设计模式，范型则是装饰设计模式。<br>&ensp;&ensp;&ensp;&ensp;关于java开发中的23种设计模式，在下文《<a href="/25810b4c/" title="JAVA开发中的设计模式">JAVA开发中的设计模式</a>》继续。。。</p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/4fb5687d/abstract.png&quot; title=&quot;模板方法设计&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="设计模式" scheme="https://www.syshlang.com/categories/technology/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="java" scheme="https://www.syshlang.com/tags/java/"/>
    
      <category term="abstract" scheme="https://www.syshlang.com/tags/abstract/"/>
    
  </entry>
  
  <entry>
    <title>web应用安全之XSS攻击</title>
    <link href="https://www.syshlang.com/afd61e4d/"/>
    <id>https://www.syshlang.com/afd61e4d/</id>
    <published>2019-03-21T14:25:41.000Z</published>
    <updated>2019-10-09T05:40:08.171Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --><img data-src="/afd61e4d/xss.jpg" title="Cross-Site Scripting"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上一篇文章《<a href="/7443f4e/" title="web应用安全之SQL注入">web应用安全之SQL注入</a>》中，本人从java的角度就Java web开发过程中SQL注入的问题简单表达了下自己的观点，本文将在上一文的基础上继续讲述web应用安全的另一个问题————XSS攻击。</p></blockquote><h1 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;XSS攻击，全称是“跨站点脚本攻击”（Cross Site Scripting），之所以缩写为XSS，主要是为了和“层叠样式表”（Cascading Style Sheets，CSS）区别开。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p></blockquote><h1 id="XSS攻击原理"><a href="#XSS攻击原理" class="headerlink" title="XSS攻击原理"></a>XSS攻击原理</h1><img data-src="/afd61e4d/xss1.jpg" title="XSS攻击原理"><blockquote><ul><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）;</li></ul></blockquote><ul><li>诱使受害者打开受到攻击的服务器URL;</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ul><p>一个简单演示代码如下：</p><img data-src="/afd61e4d/xxsi.png" title="xss注入input"><p>&ensp;&ensp;&ensp;&ensp;从上面的代码可以看出，输入框被非法放入了一段js代码，当浏览器解析到这段代码时，浏览器并不知道这些代码改变了原本程序的意图，会照做弹出一个信息框。</p><img data-src="/afd61e4d/xss2.jpg" title="XSS攻击演示"><h1 id="XSS攻击的类型"><a href="#XSS攻击的类型" class="headerlink" title="XSS攻击的类型"></a>XSS攻击的类型</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;常见的 XSS 攻击有三种：反射型、DOM-based 型、存储型。 其中反射型、DOM-based 型可以归类为非持久型 XSS 攻击，存储型归类为持久型 XSS 攻击。</p></blockquote><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>&ensp;&ensp;&ensp;&ensp;用户在页面输入框中输入数据，通过 get 或者 post 方法向服务器端传递数据，输入的数据一般是放在 URL 的 query string 中，或者是 form 表单中，如果服务端没有对这些数据进行过滤、验证或者编码，直接将用户输入的数据呈现出来，就可能会造成反射型 XSS。</p><img data-src="/afd61e4d/xxsh.png" title="xss注入url"><p>&ensp;&ensp;&ensp;&ensp;上面这个请求地址被非法注入了js代码，当name的参数值（脚本标记）被后端代码重新下发给前端时，脚本标记就会在前端被执行，从而触发反射型XSS。</p><h2 id="DOM-based-型"><a href="#DOM-based-型" class="headerlink" title="DOM-based 型"></a>DOM-based 型</h2><p>&ensp;&ensp;&ensp;&ensp;DOM 是一个树形结构，攻击者可以通过写 js 代码来修改节点，对象和值。如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的处理，那么应用程序就可能受到DOM-based XSS攻击。</p><img data-src="/afd61e4d/xss3.jpg" title="DOM-based"><p>&ensp;&ensp;&ensp;&ensp;本文在讲述<a href="#XSS攻击原理">XSS攻击原理</a>时，演示了一个非法注入的HTML页面，如果在这个页面的基础上执行如下js，将会发生DOM-based XSS攻击。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>); </span><br><span class="line"><span class="keyword">var</span> board = <span class="built_in">document</span>.getElementById(<span class="string">"board"</span>);</span><br><span class="line">board.innerHTML = text.value; <span class="comment">//发生DOM-based XSS攻击</span></span><br></pre></td></tr></table></figure><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>&ensp;&ensp;&ensp;&ensp;存储型XSS攻击也可以说是持久型XSS攻击，通常是因为服务器端将用户输入的恶意脚本没有经过验证就存储在数据库中，并且通过调用数据库的方式，将数据呈现在浏览器上，当页面被用户打开的时候执行，每当用户打开浏览器，恶意脚本就会执行。持久型的 XSS 攻击相比非持久型的危害性更大，因为每当用户打开页面，恶意脚本都会执行。<br>&ensp;&ensp;&ensp;&ensp;假如<a href="#XSS攻击原理">XSS攻击原理</a>演示中的id为content的输入框内容被提交，如果后台没有做过滤处理，服务端将内容保存到数据库，当从后台再次取出数据在前端展示时，就会执行这些恶意攻击代码，并且这种攻击每次打开都会发生。</p><h1 id="XSS的防御措施"><a href="#XSS的防御措施" class="headerlink" title="XSS的防御措施"></a>XSS的防御措施</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;对用户输入的数据进行编码</p></blockquote><h3 id="HTML-编码"><a href="#HTML-编码" class="headerlink" title="HTML 编码"></a>HTML 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入到 HTML 标签内（例如div、span等）的时候进行HTML编码</p></blockquote><table><thead><tr><th align="center">显示结果</th><th align="center">描述</th><th align="center">实体编号</th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center">&amp;nbsp ;</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td><td align="center">&amp;lt ;</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td><td align="center">&amp;gt ;</td></tr><tr><td align="center">&amp;</td><td align="center">和</td><td align="center">&amp;amp ;</td></tr><tr><td align="center">‘’</td><td align="center">引号</td><td align="center">&amp;quot ;</td></tr><tr><td align="center"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForHTML</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">''</span> + str)</span><br><span class="line">      .replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)     <span class="comment">// DEC=&gt; &amp;#60; HEX=&gt; &amp;#x3c; Entity=&gt; &amp;lt;</span></span><br><span class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#x27;'</span>)   <span class="comment">// &amp;apos; 不推荐，因为它不在HTML规范中</span></span><br><span class="line">      .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2F;'</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="HTML-Attribute-编码"><a href="#HTML-Attribute-编码" class="headerlink" title="HTML Attribute 编码"></a>HTML Attribute 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入 HTML 属性时（不含src、href、style 和事件处理属性），进行 HTML Attribute 编码，除了字母数字字符以外，使用 &#xHH;(或者可用的命名实体)格式来转义ASCII值小于256所有的字符​​​​​​​</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForHTMLAttibute</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ch = hex = str[i];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/[A-Za-z0-9]/</span>.test(str[i]) &amp;&amp; str.charCodeAt(i) &lt; <span class="number">256</span>) &#123;</span><br><span class="line">        hex = <span class="string">'&amp;#x'</span> + ch.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>) + <span class="string">';'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      encoded += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-编码"><a href="#JavaScript-编码" class="headerlink" title="JavaScript 编码"></a>JavaScript 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入事件处理属性、JavaScirpt值时进行 JavaScript 编码，除字母数字字符外，使用\xHH格式转义ASCII码小于256的所有字符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForJavascript</span>(<span class="params">str, kwargs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> cc = hex = str[i];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/[A-Za-z0-9]/</span>.test(str[i]) &amp;&amp; str.charCodeAt(i) &lt; <span class="number">256</span>) &#123;</span><br><span class="line">        hex = <span class="string">'\\x'</span> + cc.charCodeAt().toString(<span class="number">16</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      encoded += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据作为URL参数值时需要对参数进行encodeURIComponent编码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForURL</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="CSS-编码"><a href="#CSS-编码" class="headerlink" title="CSS 编码"></a>CSS 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据作为 CSS 时进行 CSS 编码，除了字母数字字符以外，使用\XXXXXX格式来转义ASCII值小于256的所有字符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForCSS</span> (<span class="params">attr, str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ch = str.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (!ch.match(<span class="regexp">/[a-zA-Z0-9]/</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> hex = str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">let</span> pad = <span class="string">'000000'</span>.substr((hex.length));</span><br><span class="line">        encoded += <span class="string">'\\'</span> + pad + hex;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        encoded += ch;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="Http-Only-cookie"><a href="#Http-Only-cookie" class="headerlink" title="Http Only cookie"></a>Http Only cookie</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;许多 XSS 攻击的目的就是为了获取用户的 cookie，将重要的 cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 document.cookie获取 cookie。</p></blockquote><h2 id="使用-XSS-Filter"><a href="#使用-XSS-Filter" class="headerlink" title="使用 XSS Filter"></a>使用 XSS Filter</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上一篇文章《<a href="/7443f4e/" title="web应用安全之SQL注入">web应用安全之SQL注入</a>》中,讲SQL注入的防范与处理时，提到了自定义过滤规则防范SQL注入,同样的对于XSS我们也可以自定义过滤规则防范XSS攻击，我们只需要在重写getParameter方法中调用XSS的过滤规则即可，详情不在赘述。</p></blockquote><p><font color="black" size="5" face="华文行楷">附：2017 年公布了十大安全漏洞列表</font></p><div class="note info"><ul><li>注入</li><li>失效的身份认证</li><li>敏感信息泄漏</li><li>XML 外部实体（XXE）</li><li>失效的访问控制</li><li>安全配置错误</li><li>跨站脚本（XSS）</li><li>不安全的反序列化</li><li>使用含有已知漏洞的组件</li><li>不足的日志记录和监控</li></ul></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:27 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/afd61e4d/xss.jpg&quot; title=&quot;Cross-Site Scripting&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="Safety" scheme="https://www.syshlang.com/categories/technology/Safety/"/>
    
    
      <category term="web" scheme="https://www.syshlang.com/tags/web/"/>
    
      <category term="injection" scheme="https://www.syshlang.com/tags/injection/"/>
    
      <category term="xss" scheme="https://www.syshlang.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Quartz分布式调度</title>
    <link href="https://www.syshlang.com/a0757df1/"/>
    <id>https://www.syshlang.com/a0757df1/</id>
    <published>2019-03-19T05:29:54.000Z</published>
    <updated>2019-10-09T05:40:08.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --><img data-src="/a0757df1/quartz.jpg" title="Spring整合Quartz分布式调度"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;最近在做项目时，项目中涉及到很多定时任务相关的功能，并且很多定时都是动态的。为了业务开发时定时调度更加方便，且能清晰的管理所有定时任务，我决定将调度中心这个模块做成可视化的管理界面；此外，考虑到后期项目的壮大，应用的高可用和高并发性，可能会有采用集群部署多个节点；对于定时任务，如果每个节点都执行自己的定时任务，一方面耗费了系统资源，另一方面有些任务多次执行，可能引发应用逻辑问题，所以需要一个分布式的调度系统，来协调每个节点执行定时任务，定时任务采用动态配置并持久化到数据库。</p></blockquote><h1 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;spring对于quartz的支持，是通过org.springframework.scheduling.quartz.CronTriggerBean继承org.quartz.CronTrigger来实现的。在quartz1.x系列中org.quartz.CronTrigger是个类，而在quartz2.x系列中org.quartz.CronTrigger变成了接口，这就造成了无法用spring的方式配置quartz的触发器（trigger）。因此，在spring3.1以下的版本必须使用quartz1.x系列，3.1以上的版本才支持quartz 2.x，否则会出错。<br>&ensp;&ensp;&ensp;&ensp;本次采用版本：spring版本4.3.5.RELEASE，quartz版本2.3.0<br><img data-src="/a0757df1/CronTrigger.png" title="quartz-2.3.0 CronTrigger"></p></blockquote><h1 id="Spring整合Quartz"><a href="#Spring整合Quartz" class="headerlink" title="Spring整合Quartz"></a>Spring整合Quartz</h1><h2 id="Maven依赖文件"><a href="#Maven依赖文件" class="headerlink" title="Maven依赖文件"></a>Maven依赖文件</h2><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分布式调度持久化选用mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置job"><a href="#配置job" class="headerlink" title="配置job"></a>配置job</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;Quartz是一个成熟的任务调度系统提供了两种方式来配置job，分别是：</p></blockquote><ul><li>MethodInvokingJobDetailFactoryBean</li><li>JobDetailFactoryBean</li></ul><h3 id="MethodInvokingJobDetailFactoryBean"><a href="#MethodInvokingJobDetailFactoryBean" class="headerlink" title="MethodInvokingJobDetailFactoryBean"></a>MethodInvokingJobDetailFactoryBean</h3><blockquote><p>要调用特定bean的一个方法的时候使用，具体配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"firstTask"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"springFrameworkQuartzJobDemo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"springFrameworkQuartzJobDemoJob"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JobDetailFactoryBean"><a href="#JobDetailFactoryBean" class="headerlink" title="JobDetailFactoryBean"></a>JobDetailFactoryBean</h3><blockquote><p>这种方式更加灵活，可以设置传递参数，具体配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springFrameworkQuartzJobDemoBeanId"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">"com.syshlang.quartz.core.quartz.schedulerframework.SpringFrameworkQuartzJobDemo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"springFrameworkQuartzJobDemoJob"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"durability"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;property name="jobDataMap"&gt;</span></span><br><span class="line"><span class="comment">        &lt;map&gt;</span></span><br><span class="line"><span class="comment">            &lt;entry key="firstService" value-ref="firstService" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/map&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>jobClass定义的任务类，继承QuartzJobBean，实现executeInternal方法；可以使用jobDataMap来给job传递数据;</p></blockquote><h2 id="配置调度触发器"><a href="#配置调度触发器" class="headerlink" title="配置调度触发器"></a>配置调度触发器</h2><blockquote><p>调度的触发器同样也提供了两种类型，分别是：</p></blockquote><ul><li>SimpleTriggerFactoryBean</li><li>CronTriggerFactoryBean<br>CronTriggerFactoryBean相对更加灵活，本例中也是采用这种类型的触发器，如下：</li></ul><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 执行定时器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springFrameworkQuartzJobDemoId"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                     每隔5秒执行一次：*/5 * * * * ?</span></span><br><span class="line"><span class="comment">                     每隔1分钟执行一次：0 */1 * * * ?</span></span><br><span class="line"><span class="comment">                     每天23点执行一次：0 0 23 * * ?</span></span><br><span class="line"><span class="comment">                     每天凌晨1点执行一次：0 0 1 * * ?</span></span><br><span class="line"><span class="comment">                     每月1号凌晨1点执行一次：0 0 1 1 * ?</span></span><br><span class="line"><span class="comment">                     每月最后一天23点执行一次：0 0 23 L * ?</span></span><br><span class="line"><span class="comment">                     每周星期天凌晨1点实行一次：0 0 1 ? * L</span></span><br><span class="line"><span class="comment">                     在26分、29分、33分执行一次：0 26,29,33 * * * ?</span></span><br><span class="line"><span class="comment">                     每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"*/5 * * * * ?"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"springFrameworkQuartzJobDemoBeanId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Quartz调度器的SchedulerFactoryBean"><a href="#配置Quartz调度器的SchedulerFactoryBean" class="headerlink" title="配置Quartz调度器的SchedulerFactoryBean"></a>配置Quartz调度器的SchedulerFactoryBean</h2><blockquote><p>Quartz调度器的SchedulerFactoryBean同样也提供了两种方式：</p></blockquote><ul><li>内存RAMJobStore</li><li>数据库方式</li></ul><h3 id="RAMJobStore"><a href="#RAMJobStore" class="headerlink" title="RAMJobStore"></a>RAMJobStore</h3><blockquote><p>job的相关信息存储在内存里，每个节点存储各自的，互相隔离，配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"springFrameworkQuartzJobDemoId"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果有多个定时任务就在这里添加 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;ref bean="quartzTrigger2" /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据库方式"><a href="#数据库方式" class="headerlink" title="数据库方式"></a>数据库方式</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;job的相关信息存储在数据库中，所有节点共用数据库，每个节点通过数据库来通信，保证一个job同一时间只会在一个节点上执行，并且如果某个节点挂掉，job会被分配到其他节点执行，这也是集群部署时，分布式的调度系统采用的方式。</p></blockquote><p>其原理如下：</p><img data-src="/a0757df1/springquartzbatch.png" title="分布式的调度系统"><p>具体配置如下：</p><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"quartzProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.scheduler.instanceName"</span>&gt;</span>EBMDynamicQuartz<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.scheduler.instanceId"</span>&gt;</span>AUTO<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 线程池配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.class"</span>&gt;</span>org.quartz.simpl.SimpleThreadPool<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.threadCount"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.threadPriority"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- JobStore 配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.class"</span>&gt;</span>org.quartz.impl.jdbcjobstore.JobStoreTX<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 集群配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.isClustered"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.clusterCheckinInterval"</span>&gt;</span>15000<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.maxMisfiresToHandleAtATime"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.misfireThreshold"</span>&gt;</span>120000<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.tablePrefix"</span>&gt;</span>QRTZ_<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schedulerName"</span> <span class="attr">value</span>=<span class="string">"EBMDynamicQuartz"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startupDelay"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"applicationContextSchedulerContextKey"</span> <span class="attr">value</span>=<span class="string">"applicationContextKey"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overwriteExistingJobs"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置自动启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoStartup"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="configLocation" value="classpath:quartz.properties" /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;dataSource用来配置数据源，数据表相关信息，可以到<span class="exturl" data-url="aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy8=" title="http://www.quartz-scheduler.org/">quartz官网<i class="fa fa-external-link"></i></span>下载gz包。面提供了主流数据库的sql文件，总共11张表，本例采用mysql数据库，表结构如下：</p></blockquote><figure class="highlight sql"><figcaption><span>tables_mysql.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PLEASE consider using mysql with innodb tables to avoid locking issues</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In your Quartz properties file, you'll need to set</span></span><br><span class="line"><span class="comment"># org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_FIRED_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_PAUSED_TRIGGER_GRPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SCHEDULER_STATE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_LOCKS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPLE_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPROP_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CRON_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_BLOB_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_JOB_DETAILS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CALENDARS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_JOB_DETAILS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_CLASS_NAME   <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_DURABLE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_UPDATE_DATA <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    NEXT_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PREV_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_TYPE <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    START_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    END_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    MISFIRE_INSTR <span class="built_in">SMALLINT</span>(<span class="number">2</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPLE_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_COUNT <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIMES_TRIGGERED <span class="built_in">BIGINT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CRON_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CRON_EXPRESSION <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIME_ZONE_ID <span class="built_in">VARCHAR</span>(<span class="number">80</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPROP_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_3 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_1 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_2 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_1 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_2 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_1 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_2 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">    <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_BLOB_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    BLOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CALENDARS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR <span class="built_in">BLOB</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,CALENDAR_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_PAUSED_TRIGGER_GRPS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_FIRED_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ENTRY_ID <span class="built_in">VARCHAR</span>(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FIRED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    SCHED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,ENTRY_ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SCHEDULER_STATE</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_CHECKIN_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CHECKIN_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,INSTANCE_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_LOCKS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LOCK_NAME  <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,LOCK_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><font color="black" size="5" face="华文行楷">附：本次项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL3N5c2hsYW5nLXNwcmluZy1xdWFydHouZ2l0" title="https://github.com/syshlang/syshlang-spring-quartz.git">https://github.com/syshlang/syshlang-spring-quartz.git<i class="fa fa-external-link"></i></span> &ensp;&ensp;&ensp;&ensp;<iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=syshlang-spring-quartz&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" loading="lazy" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Jan 17 2020 18:48:28 GMT+0800 (中国标准时间) --&gt;&lt;img src=&quot;/a0757df1/quartz.jpg&quot; title=&quot;Spring整合Quartz分布式调度&quot;&gt;
    
    </summary>
    
    
      <category term="technology" scheme="https://www.syshlang.com/categories/technology/"/>
    
      <category term="JAVA" scheme="https://www.syshlang.com/categories/technology/JAVA/"/>
    
      <category term="SpringQuartz" scheme="https://www.syshlang.com/categories/technology/JAVA/SpringQuartz/"/>
    
    
      <category term="Spring" scheme="https://www.syshlang.com/tags/Spring/"/>
    
      <category term="Quartz" scheme="https://www.syshlang.com/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令全集</title>
    <link href="https://www.syshlang.com/fe644125/"/>
    <id>https://www.syshlang.com/fe644125/</id>
    <published>2019-03-18T13:16:38.000Z</published>
    <updated>2019-10-09T05:42:15.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Fri Jan 17 2020 18:48:26 GMT+0800 (中国标准时间) --><div id="aplayer-WWrTkNig" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="E6EC7B63B259E5CB3404F421C5B37B78" data-server="kugou" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><blockquote class="blockquote-center"><div class="pdf" target="Linux-command-complete-set.pdf" height=""></div></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Linux 命令全集.pdf
    
    </summary>
    
    
    
      <category term="book" scheme="https://www.syshlang.com/tags/book/"/>
    
      <category term="linux" scheme="https://www.syshlang.com/tags/linux/"/>
    
      <category term="shell" scheme="https://www.syshlang.com/tags/shell/"/>
    
  </entry>
  
</feed>
