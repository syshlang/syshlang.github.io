<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows上安装 MySQL</title>
      <link href="/7d2a91d4/"/>
      <url>/7d2a91d4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp; Window上安装MySQL主要有两种方式：第一种，MySQL安装包安装方式；第二种，绿色版压缩包安装方式。第一种方式相对简单，就是简单的点击下一步安装，不再赘述，本文主要讲解第二种方式的安装及安装过程中出现问题的解决方式。</p><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;进入<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=" title="https://dev.mysql.com/downloads/mysql/">MySQL 下载<i class="fa fa-external-link"></i></span>,可以看到mysql的下载包列表。我选择的是5.7版本。<br><img title="MySQL 下载" data-src="/7d2a91d4/mysql-donwnload.png"></p><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><ol><li>将下载好的压缩包文件解压到指定目录，比如D:\mysql-5.7.20-winx64；</li><li><p>配置下 MySQL 的配置文件，打开刚刚解压的文件夹 D:\mysql-5.7.20-winx64 ，修改my-default.ini为my.ini，如果不存在直接创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For advice on how to change settings please see</span></span><br><span class="line"><span class="comment"># http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html</span></span><br><span class="line"><span class="comment"># *** DO NOT EDIT THIS FILE. It's a template which will be copied to the</span></span><br><span class="line"><span class="comment"># *** default location during install, and will be replaced if you</span></span><br><span class="line"><span class="comment"># *** upgrade to a newer version of MySQL.</span></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line"><span class="comment"># 设置为自己MYSQL的安装目录 </span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64</span><br><span class="line"><span class="comment"># 设置为MYSQL的数据目录 </span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-<span class="number">5.7</span>.<span class="number">20</span>-winx64\data</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment">#开启查询缓存</span></span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#默认的存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure><p>上面这个是5.7版本的配置,MySQL 8+配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"> </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\web\\mysql-<span class="number">8.0</span>.<span class="number">11</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">20</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li><li><p>启动 MySQL 数据库<br>以管理员身份打开 cmd 命令行工具，切换目录：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">sunys</span>&gt;<span class="title">cd</span> <span class="title">D</span>:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span></span></span><br></pre></td></tr></table></figure></li><li><p>初始化数据库：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">initialize</span> --<span class="title">user</span>=<span class="title">mysql</span>--<span class="title">console</span></span></span><br></pre></td></tr></table></figure><p>此时会给管理账户root随机生成一个临时密码。</p><div class="note info"><ul><li>-initialize生成随机密码</li><li>-initialize-insecure生成空密码</li><li>默认帐号root,后面的-user=mysql不更改</li></ul></div></li><li><p>安装Mysql服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">install</span> <span class="title">MySQL</span></span></span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">net</span> <span class="title">start</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure></li><li><p>登录数据库<br>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机名 -u 用户名 -p</span><br></pre></td></tr></table></figure><div class="note info"><ul><li>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li>-u : 登录的用户名;</li><li>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li></ul></div><p>我是登录本机的 MySQL 数据库，只需要输入以下命令即可：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysql</span> -<span class="title">u</span> <span class="title">root</span> -<span class="title">p</span></span></span><br></pre></td></tr></table></figure><p>按回车确认，输入之前生成的临时密码。</p></li><li><p>成功登录后需要首先修改root账户的随机密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;alter user&apos;root&apos;@&apos;localhost&apos; identified by &apos;密码&apos;;</span><br></pre></td></tr></table></figure><p>密码修改成功后即可使用自己设定的密码登录</p></li></ol><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><blockquote><p>卸载安装版方式安装的MySQL跟卸载普通的软件方式一样，直接在控制面板的程序和功能中卸载即可；绿色版安装的MySQL卸载方式如下：</p></blockquote><ol><li><p>在CMD命令行模式下，删除mysql服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">sunys</span>&gt;<span class="title">sc</span> <span class="title">delete</span> <span class="title">mysql</span></span></span><br></pre></td></tr></table></figure></li><li><p>regedit进入注册表，删除mysql相关的文件</p></li></ol><h1 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h1><h2 id="缺少dll"><a href="#缺少dll" class="headerlink" title="缺少dll"></a>缺少dll</h2><blockquote><p>安装版，遇到MSVCR120.dll文件丢失错误，如下图：</p></blockquote><img title="MySQL 缺少dll" data-src="/7d2a91d4/mysql9-dll.png"><blockquote><p>解决方案:下载 <span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDA3ODQ=" title="https://www.microsoft.com/en-us/download/details.aspx?id=40784">VC redist packages for x64<i class="fa fa-external-link"></i></span>,安装即可。</p></blockquote><h2 id="mysql无法启动"><a href="#mysql无法启动" class="headerlink" title="mysql无法启动"></a>mysql无法启动</h2><blockquote><p>重新安装MySQL数据库之后无法启动，报错如下：</p></blockquote><img title="MySQL mysql无法启动" data-src="/7d2a91d4/mysql9-1.png"> <img title="MySQL mysql无法启动" data-src="/7d2a91d4/mysql9-2.png"><blockquote><p>解决方案:</p></blockquote><ol><li><p>删除原来的mysql服务，进入mysql安装目录下的bin目录运行；</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">mysql</span>-5.7.20-<span class="title">winx64</span>\<span class="title">bin</span>&gt;<span class="title">mysqld</span> --<span class="title">remove</span> <span class="title">MySQL</span></span></span><br></pre></td></tr></table></figure></li><li><p>在mysql的根目录下， 清空data目录；</p></li><li>重新执行安装命令；</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA开发中的设计模式</title>
      <link href="/25810b4c/"/>
      <url>/25810b4c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="设计模式" data-src="/25810b4c/java-design-patterns0.jpg"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在《<a href="/4fb5687d/" title="java抽象类和模板方法设计">java抽象类和模板方法设计</a>》中,讲到了利用接口和抽象类进行模板方法设计。在我们实际开发的过程中，最多的操作可能就是curd堆业务代码，只有负责架构的才会去考虑设计模式相关的东西，然而呢，其实我们接触到与java设计模式相关的还是很多，例如，jDK源码，几乎每个web项目都会使用的企业级应用分层框架spring框架等。<br>&ensp;&ensp;&ensp;&ensp;在软件开发过程中，对于软件架构的设计，我们需要从耦合性、内聚性以及可维护性、可扩展性、重用性、灵活性等多方面进行考虑，设计模式的出现在这些方面为我们提供了思路和解决方案。</p><h1 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;设计模式的原则，指的就是我们在软件编程的过程中，应该遵循的原则，它是设计模式的基础和依据，主要有七大原则：</p></blockquote><ul><li>单一职责原则 (Single Responsibility Principle)</li><li>开闭原则（Open Close Principle）</li><li>里氏代换原则（Liskov Substitution Principle）</li><li>依赖倒转原则（Dependence Inversion Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>迪米特法则（Demeter Principle）</li><li>合成复用原则（Composite Reuse Principle）</li></ul><h1 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h1><p>总体来说设按照功能可将计模式分为三大类：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">功能</th><th style="text-align:center">设计模式</th></tr></thead><tbody><tr><td style="text-align:center">创建型模式</td><td style="text-align:center">主要用于创建对象</td><td style="text-align:center">、抽象工厂模式、单例模式、建造者模式、原型模式</td></tr><tr><td style="text-align:center">结构型模式</td><td style="text-align:center">主要用于处理类或者对象的组合</td><td style="text-align:center">适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</td></tr><tr><td style="text-align:center">行为型模式</td><td style="text-align:center">主要用于描述对类或对象怎样交互和怎样分配职责</td><td style="text-align:center">策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</td></tr></tbody></table><p>其实还有两类：并发型模式和线程池模式。</p><h2 id="创建型模式（Creational-patterns）"><a href="#创建型模式（Creational-patterns）" class="headerlink" title="创建型模式（Creational patterns）"></a>创建型模式（Creational patterns）</h2><img title="创建型模式" data-src="/25810b4c/java-design-patterns4.jpg"><blockquote><p>&ensp;&ensp;&ensp;&ensp;创建型模式，顾名思义就是用来创建对象的设计模式，所以这种类型的模式主要用途是就用于创建对象，关注点是对象的创建。这种类型的设计模式主要特点是将创建对象的过程进行了抽象，封装，对于对象的使用者而言只需调用，而不需要去关心对象创建的过程如何。</p></blockquote><h2 id="结构型模式（Structural-patterns）"><a href="#结构型模式（Structural-patterns）" class="headerlink" title="结构型模式（Structural patterns）"></a>结构型模式（Structural patterns）</h2><img title="结构型模式" data-src="/25810b4c/java-design-patterns5.jpg"><blockquote><p>&ensp;&ensp;&ensp;&ensp;结构型设计模式，为我们如何组合类和对象以获得更大的结构提供思路，从程序的结构上解决模块之间的耦合问题。<br>&ensp;&ensp;&ensp;&ensp;从组合结构上来看，又可以分为两类：类结构型模式、对象结构型模式。类结构型模式主要关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系；对象结构型模式则主要关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法，更符合“合成复用原则”。</p></blockquote><h2 id="行为型模式（Behavioral-patterns）"><a href="#行为型模式（Behavioral-patterns）" class="headerlink" title="行为型模式（Behavioral patterns）"></a>行为型模式（Behavioral patterns）</h2><img title="行为型模式" data-src="/25810b4c/java-design-patterns6.jpg"><blockquote><p>&ensp;&ensp;&ensp;&ensp;行为型模式，是设计模式中最为庞大的一类，前面两类模式已经解决了对象的创建问题及类和对象的组合结构问题，那么这第三大类型的模式自然就是用来解决类或对象相互协作的问题。这类设计模式主要用于描述程序在运行时复杂的流程控制，例如分配算法与对象间职责，协调类或对象之间相互协作等。<br>&ensp;&ensp;&ensp;&ensp;当然，行为型模式也可分为两类：类行为模式、对象行为模式。类行为模式采用继承机制来在类间分派行为，对象行为模式则采用组合或聚合在对象间分配行为；由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p></blockquote><h1 id="设计模式之间的关系"><a href="#设计模式之间的关系" class="headerlink" title="设计模式之间的关系"></a>设计模式之间的关系</h1><blockquote><p>给两张图</p></blockquote><img title="设计模式思维导图" data-src="/25810b4c/java-design-patterns1.png"> <img title="设计模式之间的关系" data-src="/25810b4c/java-design-patterns2.jpg"><h1 id="设计模式在软件中的应用"><a href="#设计模式在软件中的应用" class="headerlink" title="设计模式在软件中的应用"></a>设计模式在软件中的应用</h1><pre class="mermaid">graph LRA(面向对象) -->|设计模式+算法+数据结构| B[功能模块]B -->|多种设计模式| C[框架]C -->|服务器集群| D[架构]</pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img title="设计模式分类和原则" data-src="/25810b4c/java-design-patterns3.jpg"><blockquote><p>&ensp;&ensp;&ensp;&ensp;设计模式实际是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的问题解决方案，当我们在软件开发过程中面临一般问题时，不妨从这方面入手看是否能找到解决方法。</p></blockquote><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计（OOA/D）的精要”。</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> design </tag>
            
            <tag> patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java抽象类和模板方法设计</title>
      <link href="/4fb5687d/"/>
      <url>/4fb5687d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="模板方法设计" data-src="/4fb5687d/abstract.png"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;最近，在做项目时，遇到一个业务场景是这样的：有一种类型的电子锁，开锁的方式有两种，这两种方式开锁的过程有不同的地方也有相同的地方，主要的开锁流程差不多一致，设计这两种方式开锁流程的时候，我想到了利用java抽象类来进行模板方法设计。</p></blockquote><h1 id="Java抽象类与接口的区别"><a href="#Java抽象类与接口的区别" class="headerlink" title="Java抽象类与接口的区别"></a>Java抽象类与接口的区别</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;面试的过程中，很多面试官考察java基础知识的时候，通常都会问诸如“Java抽象类与接口有什么区别？请你说说两者各自的使用场景？”这样的问题，那么两者有什么区别呢，大概总结如下：</p></blockquote><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">抽象类</th><th style="text-align:center">接口</th></tr></thead><tbody><tr><td style="text-align:center">默认的方法实现</td><td style="text-align:center">它可以有默认的方法实现</td><td style="text-align:center">接口完全是抽象的。它根本不存在方法的实现</td></tr><tr><td style="text-align:center">实现</td><td style="text-align:center">子类使用extends关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。</td><td style="text-align:center">子类使用关键字implements来实现接口。它需要提供接口中所有声明的方法的实现</td></tr><tr><td style="text-align:center">构造器</td><td style="text-align:center">抽象类可以有构造器</td><td style="text-align:center">接口不能有构造器</td></tr><tr><td style="text-align:center">与正常Java类的区别</td><td style="text-align:center">除了你不能实例化抽象类之外，它和普通Java类没有任何区别</td><td style="text-align:center">接口是完全不同的类型</td></tr><tr><td style="text-align:center">成员变量</td><td style="text-align:center">抽象类中的静态成员变量的访问类型可以任意</td><td style="text-align:center">接口中定义的变量只能是public static final类型，并且默认即为public static final类型。</td></tr><tr><td style="text-align:center">成员方法</td><td style="text-align:center">抽象方法可以有public、protected和default这些修饰符，可以包含静态方法</td><td style="text-align:center">接口方法默认修饰符是public，并且默认即为public abstract类型，不能包含静态方法</td></tr><tr><td style="text-align:center">多继承</td><td style="text-align:center">抽象方法可以继承一个类和实现多个接口</td><td style="text-align:center">接口只可以继承一个或多个其它接口</td></tr><tr><td style="text-align:center">速度</td><td style="text-align:center">它比接口速度要快</td><td style="text-align:center">接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</td></tr><tr><td style="text-align:center">添加新方法</td><td style="text-align:center">如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。</td><td style="text-align:center">如果你往接口中添加方法，那么你必须改变实现该接口的类。</td></tr></tbody></table><h1 id="Java抽象类与接口的使用场景"><a href="#Java抽象类与接口的使用场景" class="headerlink" title="Java抽象类与接口的使用场景"></a>Java抽象类与接口的使用场景</h1><h2 id="interface的应用场合"><a href="#interface的应用场合" class="headerlink" title="interface的应用场合"></a>interface的应用场合</h2><blockquote><ul><li>类与类之前需要特定的接口进行协调，而不在乎其如何实现;</li><li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识;</li><li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联;</li><li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</li></ul></blockquote><figure class="highlight java"><figcaption><span>USB.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;        <span class="comment">// 定义了USB接口</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>;    <span class="comment">// USB设备开始工作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>;    <span class="comment">// USB设备结束工作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Flash.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Flash</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;    <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"U盘开始工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;        <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"U盘停止工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Print.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;    <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"打印机开始工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;        <span class="comment">// 覆写方法</span></span><br><span class="line">        System.out.println(<span class="string">"打印机停止工作。"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-class的应用场合"><a href="#abstract-class的应用场合" class="headerlink" title="abstract class的应用场合"></a>abstract class的应用场合</h2><blockquote><ul><li>在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它,例如：规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。</li></ul></blockquote><figure class="highlight java"><figcaption><span>Person.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;        <span class="comment">// 定义name属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;            <span class="comment">// 定义age属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;        <span class="comment">// 人说话是一个具体的功能</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getContent()) ;    <span class="comment">// 输出内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getContent</span><span class="params">()</span> </span>;    <span class="comment">// 说话的内容由子类决定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Student.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> score ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">float</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age) ;    <span class="comment">// 调用父类中的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.score = score ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    <span class="string">"学生信息 --&gt; 姓名："</span> + <span class="keyword">super</span>.getName() + </span><br><span class="line">                <span class="string">"；年龄："</span> + <span class="keyword">super</span>.getAge() + </span><br><span class="line">                <span class="string">"；成绩："</span> + <span class="keyword">this</span>.score ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Worker.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">float</span> salary)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age) ;    <span class="comment">// 调用父类中的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.salary = salary ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>    <span class="string">"工人信息 --&gt; 姓名："</span> + <span class="keyword">super</span>.getName() + </span><br><span class="line">                <span class="string">"；年龄："</span> + <span class="keyword">super</span>.getAge() + </span><br><span class="line">                <span class="string">"；工资："</span> + <span class="keyword">this</span>.salary ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note primary"><p>&ensp;&ensp;&ensp;&ensp;在实际开发过程中，接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用。模板方法设计模式就是抽象类的一个典型应用，工厂模式、代理设计模式都是通过implements实现接口的设计模式，范型则是装饰设计模式。<br>&ensp;&ensp;&ensp;&ensp;关于java开发中的23种设计模式，在下文《<a href="/25810b4c/" title="JAVA开发中的设计模式">JAVA开发中的设计模式</a>》继续。。。</p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> abstract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用安全之XSS攻击</title>
      <link href="/afd61e4d/"/>
      <url>/afd61e4d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Cross-Site Scripting" data-src="/afd61e4d/xss.jpg"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上一篇文章《<a href="/7443f4e/" title="web应用安全之SQL注入">web应用安全之SQL注入</a>》中，本人从java的角度就Java web开发过程中SQL注入的问题简单表达了下自己的观点，本文将在上一文的基础上继续讲述web应用安全的另一个问题————XSS攻击。</p></blockquote><h1 id="什么是XSS攻击"><a href="#什么是XSS攻击" class="headerlink" title="什么是XSS攻击"></a>什么是XSS攻击</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;XSS攻击，全称是“跨站点脚本攻击”（Cross Site Scripting），之所以缩写为XSS，主要是为了和“层叠样式表”（Cascading Style Sheets，CSS）区别开。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p></blockquote><h1 id="XSS攻击原理"><a href="#XSS攻击原理" class="headerlink" title="XSS攻击原理"></a>XSS攻击原理</h1><img title="XSS攻击原理" data-src="/afd61e4d/xss1.jpg"><blockquote><ul><li>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）;</li><li>诱使受害者打开受到攻击的服务器URL;</li><li>受害者在Web浏览器中打开URL，恶意脚本执行。</li></ul></blockquote><p>一个简单演示代码如下：<br><img title="xss注入input" data-src="/afd61e4d/xxsi.png"><br>&ensp;&ensp;&ensp;&ensp;从上面的代码可以看出，输入框被非法放入了一段js代码，当浏览器解析到这段代码时，浏览器并不知道这些代码改变了原本程序的意图，会照做弹出一个信息框。<br><img title="XSS攻击演示" data-src="/afd61e4d/xss2.jpg"></p><h1 id="XSS攻击的类型"><a href="#XSS攻击的类型" class="headerlink" title="XSS攻击的类型"></a>XSS攻击的类型</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;常见的 XSS 攻击有三种：反射型、DOM-based 型、存储型。 其中反射型、DOM-based 型可以归类为非持久型 XSS 攻击，存储型归类为持久型 XSS 攻击。</p></blockquote><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>&ensp;&ensp;&ensp;&ensp;用户在页面输入框中输入数据，通过 get 或者 post 方法向服务器端传递数据，输入的数据一般是放在 URL 的 query string 中，或者是 form 表单中，如果服务端没有对这些数据进行过滤、验证或者编码，直接将用户输入的数据呈现出来，就可能会造成反射型 XSS。</p><img title="xss注入url" data-src="/afd61e4d/xxsh.png"><p>&ensp;&ensp;&ensp;&ensp;上面这个请求地址被非法注入了js代码，当name的参数值（脚本标记）被后端代码重新下发给前端时，脚本标记就会在前端被执行，从而触发反射型XSS。</p><h2 id="DOM-based-型"><a href="#DOM-based-型" class="headerlink" title="DOM-based 型"></a>DOM-based 型</h2><p>&ensp;&ensp;&ensp;&ensp;DOM 是一个树形结构，攻击者可以通过写 js 代码来修改节点，对象和值。如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的处理，那么应用程序就可能受到DOM-based XSS攻击。<br><img title="DOM-based" data-src="/afd61e4d/xss3.jpg"><br>&ensp;&ensp;&ensp;&ensp;本文在讲述<a href="#XSS攻击原理">XSS攻击原理</a>时，演示了一个非法注入的HTML页面，如果在这个页面的基础上执行如下js，将会发生DOM-based XSS攻击。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="built_in">document</span>.getElementById(<span class="string">"content"</span>); </span><br><span class="line"><span class="keyword">var</span> board = <span class="built_in">document</span>.getElementById(<span class="string">"board"</span>);</span><br><span class="line">board.innerHTML = text.value; <span class="comment">//发生DOM-based XSS攻击</span></span><br></pre></td></tr></table></figure><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>&ensp;&ensp;&ensp;&ensp;存储型XSS攻击也可以说是持久型XSS攻击，通常是因为服务器端将用户输入的恶意脚本没有经过验证就存储在数据库中，并且通过调用数据库的方式，将数据呈现在浏览器上，当页面被用户打开的时候执行，每当用户打开浏览器，恶意脚本就会执行。持久型的 XSS 攻击相比非持久型的危害性更大，因为每当用户打开页面，恶意脚本都会执行。<br>&ensp;&ensp;&ensp;&ensp;假如<a href="#XSS攻击原理">XSS攻击原理</a>演示中的id为content的输入框内容被提交，如果后台没有做过滤处理，服务端将内容保存到数据库，当从后台再次取出数据在前端展示时，就会执行这些恶意攻击代码，并且这种攻击每次打开都会发生。</p><h1 id="XSS的防御措施"><a href="#XSS的防御措施" class="headerlink" title="XSS的防御措施"></a>XSS的防御措施</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;对用户输入的数据进行编码</p></blockquote><h3 id="HTML-编码"><a href="#HTML-编码" class="headerlink" title="HTML 编码"></a>HTML 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入到 HTML 标签内（例如div、span等）的时候进行HTML编码</p></blockquote><table><thead><tr><th style="text-align:center">显示结果</th><th style="text-align:center">描述</th><th style="text-align:center">实体编号</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">空格</td><td style="text-align:center">&amp;nbsp ;</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">&amp;lt ;</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">&amp;gt ;</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">和</td><td style="text-align:center">&amp;amp ;</td></tr><tr><td style="text-align:center">‘’</td><td style="text-align:center">引号</td><td style="text-align:center">&amp;quot ;</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForHTML</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">''</span> + str)</span><br><span class="line">      .replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)     <span class="comment">// DEC=&gt; &amp;#60; HEX=&gt; &amp;#x3c; Entity=&gt; &amp;lt;</span></span><br><span class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">      .replace(<span class="regexp">/'/g</span>, <span class="string">'&amp;#x27;'</span>)   <span class="comment">// &amp;apos; 不推荐，因为它不在HTML规范中</span></span><br><span class="line">      .replace(<span class="regexp">/\//g</span>, <span class="string">'&amp;#x2F;'</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="HTML-Attribute-编码"><a href="#HTML-Attribute-编码" class="headerlink" title="HTML Attribute 编码"></a>HTML Attribute 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入 HTML 属性时（不含src、href、style 和事件处理属性），进行 HTML Attribute 编码，除了字母数字字符以外，使用 &#xHH;(或者可用的命名实体)格式来转义ASCII值小于256所有的字符​​​​​​​</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForHTMLAttibute</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ch = hex = str[i];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/[A-Za-z0-9]/</span>.test(str[i]) &amp;&amp; str.charCodeAt(i) &lt; <span class="number">256</span>) &#123;</span><br><span class="line">        hex = <span class="string">'&amp;#x'</span> + ch.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>) + <span class="string">';'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      encoded += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-编码"><a href="#JavaScript-编码" class="headerlink" title="JavaScript 编码"></a>JavaScript 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据放入事件处理属性、JavaScirpt值时进行 JavaScript 编码，除字母数字字符外，使用\xHH格式转义ASCII码小于256的所有字符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForJavascript</span>(<span class="params">str, kwargs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> cc = hex = str[i];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/[A-Za-z0-9]/</span>.test(str[i]) &amp;&amp; str.charCodeAt(i) &lt; <span class="number">256</span>) &#123;</span><br><span class="line">        hex = <span class="string">'\\x'</span> + cc.charCodeAt().toString(<span class="number">16</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      encoded += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据作为URL参数值时需要对参数进行encodeURIComponent编码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForURL</span>(<span class="params">str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="CSS-编码"><a href="#CSS-编码" class="headerlink" title="CSS 编码"></a>CSS 编码</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;将不可信数据作为 CSS 时进行 CSS 编码，除了字母数字字符以外，使用\XXXXXX格式来转义ASCII值小于256的所有字符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeForCSS</span> (<span class="params">attr, str, kwargs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encoded = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> ch = str.charAt(i);</span><br><span class="line">      <span class="keyword">if</span> (!ch.match(<span class="regexp">/[a-zA-Z0-9]/</span>)) &#123;</span><br><span class="line">        <span class="keyword">let</span> hex = str.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">let</span> pad = <span class="string">'000000'</span>.substr((hex.length));</span><br><span class="line">        encoded += <span class="string">'\\'</span> + pad + hex;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        encoded += ch;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> encoded;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="Http-Only-cookie"><a href="#Http-Only-cookie" class="headerlink" title="Http Only cookie"></a>Http Only cookie</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;许多 XSS 攻击的目的就是为了获取用户的 cookie，将重要的 cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 document.cookie获取 cookie。</p></blockquote><h2 id="使用-XSS-Filter"><a href="#使用-XSS-Filter" class="headerlink" title="使用 XSS Filter"></a>使用 XSS Filter</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;在上一篇文章《<a href="/7443f4e/" title="web应用安全之SQL注入">web应用安全之SQL注入</a>》中,讲SQL注入的防范与处理时，提到了自定义过滤规则防范SQL注入,同样的对于XSS我们也可以自定义过滤规则防范XSS攻击，我们只需要在重写getParameter方法中调用XSS的过滤规则即可，详情不在赘述。</p></blockquote><font color="black" size="5" face="华文行楷">附：2017 年公布了十大安全漏洞列表</font><div class="note info"><ul><li>注入</li><li>失效的身份认证</li><li>敏感信息泄漏</li><li>XML 外部实体（XXE）</li><li>失效的访问控制</li><li>安全配置错误</li><li>跨站脚本（XSS）</li><li>不安全的反序列化</li><li>使用含有已知漏洞的组件</li><li>不足的日志记录和监控</li></ul></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Safety </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> injection </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Quartz分布式调度</title>
      <link href="/a0757df1/"/>
      <url>/a0757df1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Spring整合Quartz分布式调度" data-src="/a0757df1/quartz.jpg"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;最近在做项目时，项目中涉及到很多定时任务相关的功能，并且很多定时都是动态的。为了业务开发时定时调度更加方便，且能清晰的管理所有定时任务，我决定将调度中心这个模块做成可视化的管理界面；此外，考虑到后期项目的壮大，应用的高可用和高并发性，可能会有采用集群部署多个节点；对于定时任务，如果每个节点都执行自己的定时任务，一方面耗费了系统资源，另一方面有些任务多次执行，可能引发应用逻辑问题，所以需要一个分布式的调度系统，来协调每个节点执行定时任务，定时任务采用动态配置并持久化到数据库。</p></blockquote><h1 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;spring对于quartz的支持，是通过org.springframework.scheduling.quartz.CronTriggerBean继承org.quartz.CronTrigger来实现的。在quartz1.x系列中org.quartz.CronTrigger是个类，而在quartz2.x系列中org.quartz.CronTrigger变成了接口，这就造成了无法用spring的方式配置quartz的触发器（trigger）。因此，在spring3.1以下的版本必须使用quartz1.x系列，3.1以上的版本才支持quartz 2.x，否则会出错。<br>&ensp;&ensp;&ensp;&ensp;本次采用版本：spring版本4.3.5.RELEASE，quartz版本2.3.0<br><img title="quartz-2.3.0 CronTrigger" data-src="/a0757df1/CronTrigger.png"></p></blockquote><h1 id="Spring整合Quartz"><a href="#Spring整合Quartz" class="headerlink" title="Spring整合Quartz"></a>Spring整合Quartz</h1><h2 id="Maven依赖文件"><a href="#Maven依赖文件" class="headerlink" title="Maven依赖文件"></a>Maven依赖文件</h2><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分布式调度持久化选用mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置job"><a href="#配置job" class="headerlink" title="配置job"></a>配置job</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;Quartz是一个成熟的任务调度系统提供了两种方式来配置job，分别是：</p><ul><li>MethodInvokingJobDetailFactoryBean</li><li>JobDetailFactoryBean</li></ul></blockquote><h3 id="MethodInvokingJobDetailFactoryBean"><a href="#MethodInvokingJobDetailFactoryBean" class="headerlink" title="MethodInvokingJobDetailFactoryBean"></a>MethodInvokingJobDetailFactoryBean</h3><blockquote><p>要调用特定bean的一个方法的时候使用，具体配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"firstTask"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"springFrameworkQuartzJobDemo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"springFrameworkQuartzJobDemoJob"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JobDetailFactoryBean"><a href="#JobDetailFactoryBean" class="headerlink" title="JobDetailFactoryBean"></a>JobDetailFactoryBean</h3><blockquote><p>这种方式更加灵活，可以设置传递参数，具体配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springFrameworkQuartzJobDemoBeanId"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">"com.syshlang.quartz.core.quartz.schedulerframework.SpringFrameworkQuartzJobDemo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"springFrameworkQuartzJobDemoJob"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"durability"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;property name="jobDataMap"&gt;</span></span><br><span class="line"><span class="comment">        &lt;map&gt;</span></span><br><span class="line"><span class="comment">            &lt;entry key="firstService" value-ref="firstService" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/map&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>jobClass定义的任务类，继承QuartzJobBean，实现executeInternal方法；可以使用jobDataMap来给job传递数据;</p></blockquote><h2 id="配置调度触发器"><a href="#配置调度触发器" class="headerlink" title="配置调度触发器"></a>配置调度触发器</h2><blockquote><p>调度的触发器同样也提供了两种类型，分别是：</p><ul><li>SimpleTriggerFactoryBean</li><li>CronTriggerFactoryBean<br>CronTriggerFactoryBean相对更加灵活，本例中也是采用这种类型的触发器，如下：</li></ul></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 执行定时器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springFrameworkQuartzJobDemoId"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                     每隔5秒执行一次：*/5 * * * * ?</span></span><br><span class="line"><span class="comment">                     每隔1分钟执行一次：0 */1 * * * ?</span></span><br><span class="line"><span class="comment">                     每天23点执行一次：0 0 23 * * ?</span></span><br><span class="line"><span class="comment">                     每天凌晨1点执行一次：0 0 1 * * ?</span></span><br><span class="line"><span class="comment">                     每月1号凌晨1点执行一次：0 0 1 1 * ?</span></span><br><span class="line"><span class="comment">                     每月最后一天23点执行一次：0 0 23 L * ?</span></span><br><span class="line"><span class="comment">                     每周星期天凌晨1点实行一次：0 0 1 ? * L</span></span><br><span class="line"><span class="comment">                     在26分、29分、33分执行一次：0 26,29,33 * * * ?</span></span><br><span class="line"><span class="comment">                     每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"*/5 * * * * ?"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"springFrameworkQuartzJobDemoBeanId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置Quartz调度器的SchedulerFactoryBean"><a href="#配置Quartz调度器的SchedulerFactoryBean" class="headerlink" title="配置Quartz调度器的SchedulerFactoryBean"></a>配置Quartz调度器的SchedulerFactoryBean</h2><blockquote><p>Quartz调度器的SchedulerFactoryBean同样也提供了两种方式：</p><ul><li>内存RAMJobStore</li><li>数据库方式</li></ul></blockquote><h3 id="RAMJobStore"><a href="#RAMJobStore" class="headerlink" title="RAMJobStore"></a>RAMJobStore</h3><blockquote><p>job的相关信息存储在内存里，每个节点存储各自的，互相隔离，配置如下：</p></blockquote><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"springFrameworkQuartzJobDemoId"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果有多个定时任务就在这里添加 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;ref bean="quartzTrigger2" /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="数据库方式"><a href="#数据库方式" class="headerlink" title="数据库方式"></a>数据库方式</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;job的相关信息存储在数据库中，所有节点共用数据库，每个节点通过数据库来通信，保证一个job同一时间只会在一个节点上执行，并且如果某个节点挂掉，job会被分配到其他节点执行，这也是集群部署时，分布式的调度系统采用的方式。</p></blockquote><p>其原理如下：<br><img title="分布式的调度系统" data-src="/a0757df1/springquartzbatch.png"><br>具体配置如下：</p><figure class="highlight xml"><figcaption><span>applicationContext-job.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"quartzProperties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.scheduler.instanceName"</span>&gt;</span>EBMDynamicQuartz<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.scheduler.instanceId"</span>&gt;</span>AUTO<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 线程池配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.class"</span>&gt;</span>org.quartz.simpl.SimpleThreadPool<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.threadCount"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.threadPool.threadPriority"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- JobStore 配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.class"</span>&gt;</span>org.quartz.impl.jdbcjobstore.JobStoreTX<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 集群配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.isClustered"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.clusterCheckinInterval"</span>&gt;</span>15000<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.maxMisfiresToHandleAtATime"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.misfireThreshold"</span>&gt;</span>120000<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.quartz.jobStore.tablePrefix"</span>&gt;</span>QRTZ_<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schedulerName"</span> <span class="attr">value</span>=<span class="string">"EBMDynamicQuartz"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startupDelay"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"applicationContextSchedulerContextKey"</span> <span class="attr">value</span>=<span class="string">"applicationContextKey"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"overwriteExistingJobs"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置自动启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoStartup"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="configLocation" value="classpath:quartz.properties" /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;dataSource用来配置数据源，数据表相关信息，可以到<span class="exturl" data-url="aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZw==" title="quartz官网">quartz官网<i class="fa fa-external-link"></i></span>下载gz包。面提供了主流数据库的sql文件，总共11张表，本例采用mysql数据库，表结构如下：</p></blockquote><figure class="highlight sql"><figcaption><span>tables_mysql.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Quartz seems to work best with the driver mm.mysql-2.0.7-bin.jar</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PLEASE consider using mysql with innodb tables to avoid locking issues</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In your Quartz properties file, you'll need to set</span></span><br><span class="line"><span class="comment"># org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_FIRED_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_PAUSED_TRIGGER_GRPS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SCHEDULER_STATE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_LOCKS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPLE_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_SIMPROP_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CRON_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_BLOB_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_TRIGGERS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_JOB_DETAILS;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> QRTZ_CALENDARS;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_JOB_DETAILS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_CLASS_NAME   <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_DURABLE <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    IS_UPDATE_DATA <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DESCRIPTION <span class="built_in">VARCHAR</span>(<span class="number">250</span>) <span class="literal">NULL</span>,</span><br><span class="line">    NEXT_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PREV_FIRE_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_TYPE <span class="built_in">VARCHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    START_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    END_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    MISFIRE_INSTR <span class="built_in">SMALLINT</span>(<span class="number">2</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPLE_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_COUNT <span class="built_in">BIGINT</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    REPEAT_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIMES_TRIGGERED <span class="built_in">BIGINT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CRON_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CRON_EXPRESSION <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TIME_ZONE_ID <span class="built_in">VARCHAR</span>(<span class="number">80</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SIMPROP_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    STR_PROP_3 <span class="built_in">VARCHAR</span>(<span class="number">512</span>) <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_1 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INT_PROP_2 <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_1 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LONG_PROP_2 <span class="built_in">BIGINT</span> <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_1 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    DEC_PROP_2 <span class="built_in">NUMERIC</span>(<span class="number">13</span>,<span class="number">4</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_1 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    BOOL_PROP_2 <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">    <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_BLOB_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    BLOB_DATA <span class="built_in">BLOB</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">        <span class="keyword">REFERENCES</span> QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_CALENDARS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR_NAME  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CALENDAR <span class="built_in">BLOB</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,CALENDAR_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_PAUSED_TRIGGER_GRPS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP  <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,TRIGGER_GROUP)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_FIRED_TRIGGERS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ENTRY_ID <span class="built_in">VARCHAR</span>(<span class="number">95</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    TRIGGER_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FIRED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    SCHED_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIORITY</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    STATE <span class="built_in">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    JOB_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    JOB_GROUP <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">    IS_NONCONCURRENT <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    REQUESTS_RECOVERY <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,ENTRY_ID)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_SCHEDULER_STATE</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    INSTANCE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_CHECKIN_TIME <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CHECKIN_INTERVAL <span class="built_in">BIGINT</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,INSTANCE_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> QRTZ_LOCKS</span><br><span class="line">  (</span><br><span class="line">    SCHED_NAME <span class="built_in">VARCHAR</span>(<span class="number">120</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LOCK_NAME  <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (SCHED_NAME,LOCK_NAME)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><font color="black" size="5" face="华文行楷">附：本次项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL3N5c2hsYW5nLXNwcmluZy1xdWFydHouZ2l0" title="https://github.com/syshlang/syshlang-spring-quartz.git">https://github.com/syshlang/syshlang-spring-quartz.git<i class="fa fa-external-link"></i></span> &ensp;&ensp;&ensp;&ensp;<iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=syshlang-spring-quartz&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringQuartz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令全集</title>
      <link href="/fe644125/"/>
      <url>/fe644125/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><div id="aplayer-HfWbzTAz" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="E6EC7B63B259E5CB3404F421C5B37B78" data-server="kugou" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><blockquote class="blockquote-center"><div class="pdf" target="Linux-command-complete-set.pdf" height></div></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker从入门到实践</title>
      <link href="/c1109852/"/>
      <url>/c1109852/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><div id="aplayer-jJdVYYkW" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4FFF04E4C721C145A920F62FAB5661A9" data-server="kugou" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><blockquote class="blockquote-center"><div class="pdf" target="Docker-from-start-to-practice.pdf" height></div></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Container </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用安全之SQL注入</title>
      <link href="/7443f4e/"/>
      <url>/7443f4e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="sql injection" data-src="/7443f4e/sql-injection.jpg"><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;最近，在做一个项目，当项目完成交付时，银行客户对我们的产品安全提出了质疑，要求我们对产品系统进行安全检测，应要求我们利用<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9jbi16aC9zZWN1cml0eS9hcHBsaWNhdGlvbi1zZWN1cml0eS9hcHBzY2Fu" title="https://www.ibm.com/cn-zh/security/application-security/appscan">IBM AppScan 安全扫描工具<i class="fa fa-external-link"></i></span>进行了扫描，经过扫描我们发现系统存在一些SQL注入、XSS攻击等安全漏洞。我们在开发web应用的过程中，对于项目DAO层的SQL非法注入问题是我们经常会考虑的web安全隐患之一。作为一个从业多年的Java web应用开发者，本文将从java的角度来说说开发过程中的SQL注入的问题。</p></blockquote><h1 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;所谓SQL注入，就是攻击者恶意将SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串,这样当应用程序向后台数据库进行SQL查询时，以“欺骗”服务器执行非法的SQL命令，最终致使攻击者非法数据侵入系统。</p></blockquote><p>现在我们通过一个简单的项目演示攻击者利用SQL注入非法入侵系统。</p><h1 id="SQL注入演示"><a href="#SQL注入演示" class="headerlink" title="SQL注入演示"></a>SQL注入演示</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;采用Mysql新建用户表，并搭建一个web项目。</p></blockquote><figure class="highlight sql"><figcaption><span>SYS_USER</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `SYS_USER`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`SYS_USER`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`SYS_USER`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`account`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'登录名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码(加密)'</span>,</span><br><span class="line">  <span class="string">`lastLoginIp`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后登录IP'</span>,</span><br><span class="line">  <span class="string">`lastLoginTime`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'最后登录时间'</span>,</span><br><span class="line">  <span class="string">`loginCount`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'登录总次数'</span>,</span><br><span class="line">  <span class="string">`createTime`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`isEnable`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否启用'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><p>并插入数据,如下：<br><img title="准备数据" data-src="/7443f4e/sql-injection1.png"></p><p>controller层提供一个查询用户列表的接口（RESTFu风格）<br></p><figure class="highlight java"><figcaption><span>UserController.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"myDataSource"</span>)</span><br><span class="line">    <span class="keyword">private</span> DataSource myDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">getUserList</span><span class="params">(@QueryParam(<span class="string">"account"</span>)</span> String account)</span>&#123;</span><br><span class="line">        <span class="comment">//执行SQL,输出查到的数据</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(myDataSource);</span><br><span class="line">        String sql = <span class="string">"select * from sys_user where account ='"</span>+account+<span class="string">"'"</span>;</span><br><span class="line">        List&lt;?&gt; resultList = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> Response.ok(resultList).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="注入演示"><a href="#注入演示" class="headerlink" title="注入演示"></a>注入演示</h2><blockquote><p>首先，我们在浏览器输入请求地址，发出请求，查询账户为admin的用户信息：</p></blockquote><p>GET&gt;<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvbGlzdD9hY2NvdW50PWFkbWlu" title="http://localhost:8080/user/list?account=admin">http://localhost:8080/user/list?account=admin<i class="fa fa-external-link"></i></span></p><p>浏览器窗口正常返回结果：<br><img title="正常返回结果" data-src="/7443f4e/sql-injection2.png"></p><blockquote><p>接着，我们在发出这样一个请求，如下</p></blockquote><p>GET&gt; <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvbGlzdD9hY2NvdW50PWFkbWluJiMzOTs=" title="http://localhost:8080/user/list?account=admin&#39;">http://localhost:8080/user/list?account=admin&#39;<i class="fa fa-external-link"></i></span> or ‘a’=’a</p><p>浏览器窗口返回结果：<br><img title="异常结果" data-src="/7443f4e/sql-injection3.png"><br>此时我们发现，查出了所有的用户信息，仔细调试会发现执行了如下的sql<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys_user <span class="keyword">where</span> <span class="keyword">account</span> =<span class="string">'admin'</span> <span class="keyword">or</span> <span class="string">'a'</span>=<span class="string">'a'</span></span><br></pre></td></tr></table></figure><p></p><p>这是因为我们传入的参数account参数与我们接口中的查询语句进行拼接后构成了一条合法的SQL查询，这就是SQL注入。黑客往往就会通过传入精心构造的参数来进行SQL注入，非法入侵系统。</p><h1 id="SQL注入的防范与处理"><a href="#SQL注入的防范与处理" class="headerlink" title="SQL注入的防范与处理"></a>SQL注入的防范与处理</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;SQL注入原因就是由于传入的参数与系统的SQL拼接成了合法的SQL而导致的，而其本质还是将用户输入的数据当做了代码执行。了解了SQL注入的本质和原理，在Java web应用开发的过程中，我们如何防范和处理呢？</p></blockquote><h2 id="JDBC的预处理"><a href="#JDBC的预处理" class="headerlink" title="JDBC的预处理"></a>JDBC的预处理</h2><p>&ensp;&ensp;&ensp;&ensp;Java的JDBC中，有个预处理功能，这个功能提供了PreparedStatement （预处理执行语句）的方式，SQL语句在程序运行前已经进行了预编译，在程序运行时第一次操作数据库之前，SQL语句已经被数据库分析，编译和优化，对应的执行计划也会缓存下来并允许数据库以参数化的形式进行查询，当运行时，动态地把参数传给PreprareStatement时，即使参数里有敏感字符,如 or ‘a=a’,数据库会将整个参数作为一个字段的属性值来处理而不会作为一个SQL指令，这样就在一定程度上预防了绝大多数的SQL注入。<br>&ensp;&ensp;&ensp;&ensp;对刚才的代码做优化，采用预处理的方式，如下：<br></p><figure class="highlight java"><figcaption><span>UserController.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/list"</span>)</span><br><span class="line">    <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">getUserListPreprareStatement</span><span class="params">(@QueryParam(<span class="string">"account"</span>)</span> String account)</span>&#123;</span><br><span class="line">        <span class="comment">//执行SQL,输出查到的数据</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(myDataSource);</span><br><span class="line">        String sql = <span class="string">"select * from sys_user where account = ?"</span>;</span><br><span class="line">        List resultList = jdbcTemplate.queryForList(sql,account);</span><br><span class="line">        <span class="keyword">return</span> Response.ok(resultList).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>&ensp;&ensp;&ensp;&ensp;此时，我们再采用刚才的SQL非法注入的方式访问，发现未查询出任何数据，说明SQL注入未成功，打印JDBC预处理后的SQL，发现所有的 ‘ 都被 \’ 转义掉了，从而防止了SQL注入。</p><h2 id="Mybatis下注入防范"><a href="#Mybatis下注入防范" class="headerlink" title="Mybatis下注入防范"></a>Mybatis下注入防范</h2><p>&ensp;&ensp;&ensp;&ensp;Mybatis框架作为一款半自动化的持久层框架，支持定制化 SQL、存储过程以及高级映射，其sql语句都要我们自己来手动编写，使用该框架时，防止SQL注入我们只需要弄清楚#{}和${}的区别以及order by注入问题。</p><div class="note primary"><p>#{}：使用的是PreparedStatement，会有类型转换，比较安全；<br>${}：使用字符串拼接，可以SQL注入；<br>order by语句后不能用#{}，只能用${}，此时会存在SQL注入危险，需要手动处理；<br>like查询不小心会有漏动，正确写法如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Mysql:</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys_user <span class="keyword">where</span> <span class="keyword">account</span>  <span class="keyword">like</span> <span class="keyword">concat</span>(<span class="string">'%'</span>, <span class="comment">#&#123;account&#125;, '%')      </span></span><br><span class="line"><span class="comment">--Oracle: </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys_user <span class="keyword">where</span> <span class="keyword">account</span> <span class="keyword">like</span> <span class="string">'%'</span> || <span class="comment">#&#123;account&#125; || '%'      </span></span><br><span class="line"><span class="comment">--SQLServer: </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys_user <span class="keyword">where</span> <span class="keyword">account</span> <span class="keyword">like</span> <span class="string">'%'</span> + <span class="comment">#&#123;account&#125; + '%'</span></span><br></pre></td></tr></table></figure><h2 id="自定义过滤规则防范注入"><a href="#自定义过滤规则防范注入" class="headerlink" title="自定义过滤规则防范注入"></a>自定义过滤规则防范注入</h2><p>&ensp;&ensp;&ensp;&ensp;由于动态SQL语句是引发SQL注入的根源。因此，开发过程中我们应尽量使用预编译语句来组装SQL查询，并且，随着ORM技术的发展，很多ORM框架在安全问题上都有进行处理，只要我们按照规范，基本上可以很大程度的消除SQL注入的风险。但是，在必要情况下，我们还需通过自定义过滤规则的方式来防范SQL注入。就Java web而言，我们可以通过在后台添加自定义的过滤器（Filter），对每个请求的参数过滤一些关键字，替换成安全的，从而解决注入问题，步骤如下</p><blockquote><p>在后台添加自定义的过滤器,对每个请求进行过滤</p></blockquote><figure class="highlight java"><figcaption><span>SqlFilter.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//在Filter里面调用自定义的HttpServletRequestWrapper</span></span><br><span class="line">        filterChain.doFilter(<span class="keyword">new</span> SqlHttpServletRequestWrapper((HttpServletRequest) servletRequest), servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现一个自定义的HttpServletRequestWrapper，然后在Filter里面调用它,重写getParameter方法</p></blockquote><figure class="highlight java"><figcaption><span>SqlHttpServletRequestWrapper.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写getParameter方法 过滤一些关键字，替换成安全的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String parameter = <span class="keyword">super</span>.getParameter(s);</span><br><span class="line">        parameter = stripSqlInject(parameter);</span><br><span class="line">        <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对每个请求的参数过滤一些关键字，替换成安全的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">stripSqlInject</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(parameter)) &#123;</span><br><span class="line">            <span class="comment">//干掉or 攻击</span></span><br><span class="line">            parameter=parameter.replaceAll(<span class="string">"(?i)\\w*\\s*((\\%27)|(\\'))\\s*((\\%6F)|o|(\\%4F))((\\%72)|r|(\\%52))"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//干掉union 攻击</span></span><br><span class="line">            parameter=parameter.replaceAll(<span class="string">"(?i)\\w*\\s*((\\%27)|(\\'))\\s*union"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//干掉截断攻击--原理：通过注释符号来截断后面的查询条件</span></span><br><span class="line">            parameter=parameter.replaceAll(<span class="string">"(?i)\\s*((\\%27)|(\\'))[\\s\\S^-]*--\\s*[and|exec|execute|insert|select|delete|"</span></span><br><span class="line">                    + <span class="string">"update|count|drop|truncate|information_schema.columns|table_schema|union]*"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在web.xml中配置过滤器</p></blockquote><figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SqlFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.syshlang.framework.filter.SqlFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SqlFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="black" size="5" face="华文行楷">附：本次演示的项目地址</font><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2hsYW5nL3N5c2hsYW5nLWluamVjdGlvbi1kZW1v" title="https://github.com/syshlang/syshlang-injection-demo">https://github.com/syshlang/syshlang-injection-demo<i class="fa fa-external-link"></i></span><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=syshlang-injection-demo&type=star&count=true&size=large" width="160px" height="30px" frameborder="0" allowfullscreen></iframe></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Safety </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> web </tag>
            
            <tag> injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 思维导图</title>
      <link href="/aedf899f/"/>
      <url>/aedf899f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="JavaScript变量"><a href="#JavaScript变量" class="headerlink" title="JavaScript变量"></a>JavaScript变量</h1><img title="JavaScript变量" data-src="/aedf899f/JavaScript-var.jpg"><a id="more"></a><h1 id="JavaScript运算符"><a href="#JavaScript运算符" class="headerlink" title="JavaScript运算符"></a>JavaScript运算符</h1><img title="JavaScript运算符" data-src="/aedf899f/JavaScript-Operator.jpg"><h1 id="JavaScript数组"><a href="#JavaScript数组" class="headerlink" title="JavaScript数组"></a>JavaScript数组</h1><img title="JavaScript数组" data-src="/aedf899f/JavaScript-Array.jpg"><h1 id="JavaScript流程语句"><a href="#JavaScript流程语句" class="headerlink" title="JavaScript流程语句"></a>JavaScript流程语句</h1><img title="JavaScript流程语句" data-src="/aedf899f/JavaScript-Flow.jpg"><h1 id="JavaScript字符串函数"><a href="#JavaScript字符串函数" class="headerlink" title="JavaScript字符串函数"></a>JavaScript字符串函数</h1><img title="JavaScript字符串函数" data-src="/aedf899f/JavaScript-string.jpg"><h1 id="JavaScript函数基础"><a href="#JavaScript函数基础" class="headerlink" title="JavaScript函数基础"></a>JavaScript函数基础</h1><img title="JavaScript函数基础" data-src="/aedf899f/JavaScript-function.jpg"><h1 id="JavaScript基础DOM操作"><a href="#JavaScript基础DOM操作" class="headerlink" title="JavaScript基础DOM操作"></a>JavaScript基础DOM操作</h1><img title="JavaScript基础DOM操作" data-src="/aedf899f/JavaScript-dom.jpg"><h1 id="JavaScript-DOM对象"><a href="#JavaScript-DOM对象" class="headerlink" title="JavaScript DOM对象"></a>JavaScript DOM对象</h1><img title="JavaScript DOM对象" data-src="/aedf899f/JavaScript-object.jpg"><h1 id="JavaScript-BOM浏览器对象模型"><a href="#JavaScript-BOM浏览器对象模型" class="headerlink" title="JavaScript BOM浏览器对象模型"></a>JavaScript BOM浏览器对象模型</h1><img title="JavaScript BOM浏览器对象模型" data-src="/aedf899f/JavaScript-browser.jpg"><h1 id="JavaScript-正则表达式"><a href="#JavaScript-正则表达式" class="headerlink" title="JavaScript 正则表达式"></a>JavaScript 正则表达式</h1><img title="JavaScript正则表达式" data-src="/aedf899f/JavaScript-regex.jpg"><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(九)</title>
      <link href="/cc2e58d0/"/>
      <url>/cc2e58d0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/d0ffb234/" title="MySQL使用笔记(八)">MySQL使用笔记(八)</a></p><h1 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- root密码重置</span></span><br><span class="line">1. 停止MySQL服务</span><br><span class="line">2.  [Linux] /usr/local/mysql/bin/safe_mysqld <span class="comment">--skip-grant-tables &amp;</span></span><br><span class="line">    [Windows] mysqld <span class="comment">--skip-grant-tables</span></span><br><span class="line">3. <span class="keyword">use</span> mysql;</span><br><span class="line">4. <span class="keyword">UPDATE</span> <span class="string">`user`</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(<span class="string">"密码"</span>) <span class="keyword">WHERE</span> <span class="string">`user`</span> = <span class="string">"root"</span>;</span><br><span class="line">5. <span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line">用户信息表：mysql.user</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 <span class="string">'user_name'</span>@<span class="string">'192.168.1.1'</span></span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"><span class="comment">-- 重命名用户</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>)  <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">'密码'</span>) <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">'password'</span>]</span><br><span class="line">    - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> <span class="string">`pms`</span>.* <span class="keyword">TO</span> <span class="string">'pms'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'pms0817'</span>;</span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> 用户名</span><br><span class="line">    <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="keyword">CURRENT_USER</span>();</span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名   <span class="comment">-- 撤销所有权限</span></span><br><span class="line"><span class="comment">-- 权限层级</span></span><br><span class="line"><span class="comment">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用<span class="keyword">REVOKE</span>时，您必须指定与被授权列相同的列。</span><br><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [<span class="keyword">PRIVILEGES</span>]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>   <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> ROUTINE   <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> ROUTINE  <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>     <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>     <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>     <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line"><span class="keyword">FILE</span>    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>   <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>  <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD  <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">CLIENT</span>  <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span>   <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>  <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>   <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line"><span class="keyword">SHUTDOWN</span>    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER   <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>  <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>   <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br></pre></td></tr></table></figure><h1 id="表维护"><a href="#表维护" class="headerlink" title="表维护"></a>表维护</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分析和存储表的关键字分布</span></span><br><span class="line"><span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> 表名 ...</span><br><span class="line"><span class="comment">-- 检查一个或多个表是否有错误</span></span><br><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="keyword">option</span> = &#123;<span class="keyword">QUICK</span> | <span class="keyword">FAST</span> | <span class="keyword">MEDIUM</span> | <span class="keyword">EXTENDED</span> | <span class="keyword">CHANGED</span>&#125;</span><br><span class="line"><span class="comment">-- 整理数据文件的碎片</span></span><br><span class="line"><span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><blockquote><ol><li>可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</li><li>每个库目录存在一个保存当前数据库的选项文件db.opt。</li><li>注释：<br>单行注释 # 注释内容<br>多行注释 /* 注释内容 */<br>单行注释 - - 注释内容 (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)</li><li>模式通配符：<br>_ 任意单个字符<br>% 任意多个字符，甚至包括零字符<br>单引号需要进行转义 \’</li><li>CMD命令行内的语句结束符可以为 “;”, “\G”, “\g”，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</li><li>SQL对大小写不敏感</li><li>清除已有语句：\c</li></ol></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(八)</title>
      <link href="/d0ffb234/"/>
      <url>/d0ffb234/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/19ad0d38/" title="MySQL使用笔记(七)">MySQL使用笔记(七)</a></p><h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line">abs(x)          <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line">ceil(x)         <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line">floor(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line">mod(m, n)       <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)       <span class="comment">-- m^n</span></span><br><span class="line">sqrt(x)         <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()          <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)  <span class="comment">-- 截取d位小数</span></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line"><span class="keyword">now</span>(), <span class="keyword">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line">current_date();                 <span class="comment">-- 当前日期</span></span><br><span class="line">current_time();                 <span class="comment">-- 当前时间</span></span><br><span class="line">date('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取日期部分</span></span><br><span class="line">time('yyyy-mm-dd hh:ii:ss');    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j'); <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();               <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)          <span class="comment">-- string长度，字节</span></span><br><span class="line">char_length(string)     <span class="comment">-- string的字符个数</span></span><br><span class="line">substring(str, position [,length])      <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line"><span class="keyword">replace</span>(<span class="keyword">str</span> ,search_str ,replace_str)   <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">instr</span>(<span class="keyword">string</span> ,<span class="keyword">substring</span>)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line"><span class="keyword">concat</span>(<span class="keyword">string</span> [,...])   <span class="comment">-- 连接字串</span></span><br><span class="line"><span class="keyword">charset</span>(<span class="keyword">str</span>)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line"><span class="keyword">lcase</span>(<span class="keyword">string</span>)           <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(<span class="keyword">string</span>, <span class="keyword">length</span>)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">load_file</span>(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line"><span class="keyword">locate</span>(<span class="keyword">substring</span>, <span class="keyword">string</span> [,start_position]) <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line"><span class="keyword">lpad</span>(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)   <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line"><span class="keyword">ltrim</span>(<span class="keyword">string</span>)           <span class="comment">-- 去除前端空格</span></span><br><span class="line"><span class="keyword">repeat</span>(<span class="keyword">string</span>, <span class="keyword">count</span>)   <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(<span class="keyword">string</span>, <span class="keyword">length</span>, <span class="keyword">pad</span>)   <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line"><span class="keyword">rtrim</span>(<span class="keyword">string</span>)           <span class="comment">-- 去除后端空格</span></span><br><span class="line"><span class="keyword">strcmp</span>(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> [condition] <span class="keyword">then</span> <span class="keyword">result</span> [<span class="keyword">when</span> [condition] <span class="keyword">then</span> <span class="keyword">result</span> ...] [<span class="keyword">else</span> <span class="keyword">result</span>] <span class="keyword">end</span>   多分支</span><br><span class="line"><span class="keyword">if</span>(expr1,expr2,expr3)  双分支。</span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="keyword">count</span>()</span><br><span class="line"><span class="keyword">sum</span>();</span><br><span class="line">max();</span><br><span class="line">min();</span><br><span class="line">avg();</span><br><span class="line">group_concat()</span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line">default();</span><br></pre></td></tr></table></figure><h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--// 存储函数，自定义函数 ----------</span></span><br><span class="line"><span class="comment">-- 新建</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (参数列表) <span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    - 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    - 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    - 参数部分，由<span class="string">"参数名"</span>和<span class="string">"参数类型"</span>组成。多个参数用逗号隔开。</span><br><span class="line">    - 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    - 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    - 一定要有 <span class="keyword">return</span> 返回值语句。</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] function_name;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'partten'</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name;</span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> function_name 函数选项</span><br></pre></td></tr></table></figure><h1 id="自定义功能"><a href="#自定义功能" class="headerlink" title="自定义功能"></a>自定义功能</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--// 存储过程，自定义功能 ----------</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的sql组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过<span class="keyword">call</span>执行。</span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line"><span class="keyword">IN</span>，表示输入型</span><br><span class="line"><span class="keyword">OUT</span>，表示输出型</span><br><span class="line">INOUT，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储过程 */</span> <span class="comment">------------------</span></span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：<span class="keyword">CALL</span> 过程名</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">- 没有返回值。</span><br><span class="line">- 只能单独调用，不可夹杂在其他语句中</span><br><span class="line"><span class="comment">-- 参数</span></span><br><span class="line"><span class="keyword">IN</span>|<span class="keyword">OUT</span>|INOUT 参数名 数据类型</span><br><span class="line"><span class="keyword">IN</span>      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line"><span class="keyword">OUT</span>     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line">INOUT   输入输出：既可输入，也可输出</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名 (参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>⇨ <a href="/cc2e58d0/" title="MySQL使用笔记(九)">MySQL使用笔记(九)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(七)</title>
      <link href="/19ad0d38/"/>
      <url>/19ad0d38/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/86a515b2/" title="MySQL使用笔记(六)">MySQL使用笔记(六)</a></p><h1 id="字符连接函数"><a href="#字符连接函数" class="headerlink" title="字符连接函数"></a>字符连接函数</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br></pre></td></tr></table></figure><h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分支语句</span></span><br><span class="line">if 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 then</span><br><span class="line">    执行语句</span><br><span class="line">else</span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改最外层语句结束符</span></span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    SQL语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     <span class="comment">-- 修改回原来的分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语句块包裹</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    语句块</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特殊的执行</span></span><br><span class="line"><span class="number">1.</span> 只要添加记录，就会触发程序。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Insert</span> <span class="keyword">into</span> <span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 <span class="keyword">before</span> <span class="keyword">insert</span>, <span class="keyword">after</span> <span class="keyword">insert</span>;</span><br><span class="line">    如果有重复记录并更新，会触发 before <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">update</span>, <span class="keyword">after</span> <span class="keyword">update</span>;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">update</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">Replace</span> 语法 如果有记录，则执行 <span class="keyword">before</span> <span class="keyword">insert</span>, <span class="keyword">before</span> <span class="keyword">delete</span>, <span class="keyword">after</span> <span class="keyword">delete</span>, <span class="keyword">after</span> <span class="keyword">insert</span></span><br></pre></td></tr></table></figure><h1 id="SQL编程"><a href="#SQL编程" class="headerlink" title="SQL编程"></a>SQL编程</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--// 局部变量 ----------</span></span><br><span class="line"><span class="comment">-- 变量声明</span></span><br><span class="line">    <span class="keyword">declare</span> var_name[,...] <span class="keyword">type</span> [<span class="keyword">default</span> <span class="keyword">value</span>]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个<span class="keyword">default</span>子句。值可以被指定为一个表达式，不需要为一个常数。如果没有<span class="keyword">default</span>子句，初始值为<span class="literal">null</span>。</span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    使用 <span class="keyword">set</span> 和 <span class="keyword">select</span> <span class="keyword">into</span> 语句为变量赋值。</span><br><span class="line">    - 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 全局变量 ----------</span></span><br><span class="line"><span class="comment">-- 定义、赋值</span></span><br><span class="line"><span class="keyword">set</span> 语句可以定义并为变量赋值。</span><br><span class="line"><span class="keyword">set</span> @<span class="keyword">var</span> = <span class="keyword">value</span>;</span><br><span class="line">也可以使用<span class="keyword">select</span> <span class="keyword">into</span>语句为变量初始化并赋值。这样要求<span class="keyword">select</span>语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过<span class="keyword">select</span>执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（<span class="keyword">set</span>语句可以使用= 和 :=）。</span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">var</span>:=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> @v1:=<span class="keyword">id</span>, @v2=<span class="keyword">name</span> <span class="keyword">from</span> t1 <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tbl_name <span class="keyword">where</span> @<span class="keyword">var</span>:=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">into</span> 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    -| <span class="keyword">select</span> <span class="keyword">max</span>(height) <span class="keyword">into</span> @max_height <span class="keyword">from</span> tb;</span><br><span class="line"><span class="comment">-- 自定义变量名</span></span><br><span class="line">为了避免<span class="keyword">select</span>语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line">@<span class="keyword">var</span>=<span class="number">10</span>;</span><br><span class="line">    - 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 控制结构 ----------</span></span><br><span class="line"><span class="comment">-- if语句</span></span><br><span class="line">if search_condition then</span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition then</span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[else</span><br><span class="line">    statement_list]</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="comment">-- case语句</span></span><br><span class="line">CASE value WHEN [compare-value] THEN result</span><br><span class="line">[WHEN [compare-value] THEN result ...]</span><br><span class="line">[ELSE result]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- while循环</span></span><br><span class="line">[begin_label:] <span class="keyword">while</span> search_condition <span class="keyword">do</span></span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> [end_label];</span><br><span class="line">- 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    <span class="comment">-- 退出循环</span></span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br></pre></td></tr></table></figure><p>⇨ <a href="/d0ffb234/" title="MySQL使用笔记(八)">MySQL使用笔记(八)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(六)</title>
      <link href="/86a515b2/"/>
      <url>/86a515b2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/1faa5dc0/" title="MySQL使用笔记(五)">MySQL使用笔记(五)</a></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote><p>什么是视图：<br>视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。<br>视图具有表结构文件，但不存在数据文件。<br>对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。<br>视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用<span class="keyword">select</span>语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于<span class="keyword">SELECT</span>语句检索的列数</span><br><span class="line"><span class="comment">-- 查看结构</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name ...</span><br><span class="line"><span class="comment">-- 修改视图结构</span></span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line"><span class="comment">-- 视图作用</span></span><br><span class="line">    <span class="number">1.</span> 简化业务逻辑</span><br><span class="line">    <span class="number">2.</span> 对客户端隐藏真实的表结构</span><br><span class="line"><span class="comment">-- 视图算法(ALGORITHM)</span></span><br><span class="line">    <span class="keyword">MERGE</span>       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure><h1 id="事务-transaction"><a href="#事务-transaction" class="headerlink" title="事务(transaction)"></a>事务(transaction)</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续SQL的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line">    <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; 或者 <span class="keyword">BEGIN</span>;</span><br><span class="line">    开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"><span class="comment">-- 事务的特性</span></span><br><span class="line">    1. 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    2. 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    3. 隔离性（Isolation）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    4. 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"><span class="comment">-- 事务的实现</span></span><br><span class="line">    1. 要求是事务支持的表类型</span><br><span class="line">    2. 执行一组相关的操作前开启事务</span><br><span class="line">    3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"><span class="comment">-- 事务的原理</span></span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要<span class="keyword">commit</span>提交持久化数据操作。</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 数据定义语言（<span class="keyword">DDL</span>）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    <span class="number">2.</span> 事务不能被嵌套</span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line">    <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line">    <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br><span class="line"><span class="comment">-- InnoDB自动提交特性设置</span></span><br><span class="line">    <span class="keyword">SET</span> autocommit = <span class="number">0</span>|<span class="number">1</span>;   0表示关闭自动提交，1表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要<span class="keyword">commit</span>提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>不同的是，</span><br><span class="line">        <span class="keyword">SET</span> autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure><h1 id="锁表"><a href="#锁表" class="headerlink" title="锁表"></a>锁表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line"><span class="comment">-- 锁定</span></span><br><span class="line">    <span class="keyword">LOCK</span> <span class="keyword">TABLES</span> tbl_name [<span class="keyword">AS</span> <span class="keyword">alias</span>]</span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">    <span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line"><span class="comment">-- 创建触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 <span class="keyword">before</span> 或 <span class="keyword">after</span>，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        <span class="keyword">INSERT</span>：将新行插入表时激活触发程序</span><br><span class="line">        <span class="keyword">UPDATE</span>：更改某一行时激活触发程序</span><br><span class="line">        <span class="keyword">DELETE</span>：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与<span class="keyword">TEMPORARY</span>表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br><span class="line">可以使用<span class="keyword">old</span>和<span class="keyword">new</span>代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是<span class="keyword">old</span>，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br></pre></td></tr></table></figure><p>⇨ <a href="/19ad0d38/" title="MySQL使用笔记(七)">MySQL使用笔记(七)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(五)</title>
      <link href="/1faa5dc0/"/>
      <url>/1faa5dc0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/14a2e4fb/" title="MySQL使用笔记(四)">MySQL使用笔记(四)</a></p><h1 id="连接查询-join"><a href="#连接查询-join" class="headerlink" title="连接查询(join)"></a>连接查询(join)</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line"><span class="comment">-- 内连接(inner join)</span></span><br><span class="line">    - 默认就是内连接，可省略inner。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    on 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用where表示连接条件。</span><br><span class="line">    还有 using, 但需字段名相同。 using(字段名)</span><br><span class="line">    <span class="comment">-- 交叉连接 cross join</span></span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb1 <span class="keyword">cross</span> <span class="keyword">join</span> tb2;</span><br><span class="line"><span class="comment">-- 外连接(outer join)</span></span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    <span class="comment">-- 左外连接 left join</span></span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为null填充</span><br><span class="line">    <span class="comment">-- 右外连接 right join</span></span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为null填充</span><br><span class="line"><span class="comment">-- 自然连接(natural join)</span></span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了using，会自动查找相同字段名。</span><br><span class="line">    natural join</span><br><span class="line">    natural left join</span><br><span class="line">    natural right join</span><br><span class="line">    </span><br><span class="line"><span class="keyword">select</span> info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex <span class="keyword">from</span> info, extra_info <span class="keyword">where</span> info.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure><h1 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="keyword">outfile</span> 文件地址 [控制格式] <span class="keyword">from</span> 表名;   <span class="comment">-- 导出表数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> [<span class="keyword">local</span>] <span class="keyword">infile</span> 文件地址 [<span class="keyword">replace</span>|<span class="keyword">ignore</span>] <span class="keyword">into</span> <span class="keyword">table</span> 表名 [控制格式]; <span class="comment">-- 导入数据</span></span><br><span class="line">    生成的数据默认的分隔符是制表符</span><br><span class="line">    local未指定，则数据文件必须在服务器上</span><br><span class="line">    <span class="keyword">replace</span> 和 <span class="keyword">ignore</span> 关键词控制对现有的唯一键记录的重复的处理</span><br><span class="line"><span class="comment">-- 控制格式</span></span><br><span class="line"><span class="keyword">fields</span>  控制字段格式</span><br><span class="line">默认：<span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span> <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">''</span> <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'\\'</span></span><br><span class="line">    <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'string'</span>  <span class="comment">-- 终止</span></span><br><span class="line">    <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">'char'</span>      <span class="comment">-- 包裹</span></span><br><span class="line">    <span class="keyword">escaped</span> <span class="keyword">by</span> <span class="string">'char'</span>       <span class="comment">-- 转义</span></span><br><span class="line">    <span class="comment">-- 示例：</span></span><br><span class="line">        <span class="keyword">SELECT</span> a,b,a+b <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/tmp/result.text'</span></span><br><span class="line">        <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> <span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'"'</span></span><br><span class="line">        <span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">FROM</span> test_table;</span><br><span class="line">lines   控制行格式</span><br><span class="line">默认：lines terminated by '\n'</span><br><span class="line">    terminated by 'string'  <span class="comment">-- 终止</span></span><br></pre></td></tr></table></figure><h1 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>语句获得的数据可以用<span class="keyword">insert</span>插入。</span><br><span class="line">可以省略对列的指定，要求 <span class="keyword">values</span> () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用<span class="keyword">set</span>语法。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SET</span> <span class="keyword">field</span>=<span class="keyword">value</span>,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="number">10</span>+<span class="number">10</span>, <span class="keyword">now</span>());</span><br><span class="line">可以使用一个特殊值 DEFAULT，表示该列使用默认值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="keyword">DEFAULT</span>);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SELECT</span> ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span>/<span class="keyword">SET</span>/<span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> 字段=值, …;</span><br></pre></td></tr></table></figure><h1 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_definition] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</span><br><span class="line">按照条件删除。<span class="keyword">where</span></span><br><span class="line">指定删除的最多记录数。<span class="keyword">limit</span></span><br><span class="line">可以通过排序条件删除。<span class="keyword">order</span> <span class="keyword">by</span> + <span class="keyword">limit</span></span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 需要删除数据多表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">using</span> 表连接操作 条件。</span><br></pre></td></tr></table></figure><h1 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>，<span class="keyword">truncate</span> 是删除表再创建，<span class="keyword">delete</span> 是逐条删除</span><br><span class="line"><span class="number">2</span>，<span class="keyword">truncate</span> 重置auto_increment的值。而<span class="keyword">delete</span>不会</span><br><span class="line"><span class="number">3</span>，<span class="keyword">truncate</span> 不知道删除了几条，而<span class="keyword">delete</span>知道。</span><br><span class="line"><span class="number">4</span>，当被用于带分区的表时，<span class="keyword">truncate</span> 会保留分区</span><br></pre></td></tr></table></figure><h1 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] <span class="comment">---database DB1 [DB2 DB3...]</span></span><br><span class="line">mysqldump [options] <span class="comment">--all--database</span></span><br><span class="line">1. 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)</span><br><span class="line">2. 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)</span><br><span class="line">3. 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)</span><br><span class="line">4. 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 <span class="comment">--lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">可以-w携带WHERE条件</span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line">1. 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line">2. 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure><p>⇨ <a href="/86a515b2/" title="MySQL使用笔记(六)">MySQL使用笔记(六)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(四)</title>
      <link href="/14a2e4fb/"/>
      <url>/14a2e4fb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/63a5d46d/" title="MySQL使用笔记(三)">MySQL使用笔记(三)</a></p><h1 id="建表规范"><a href="#建表规范" class="headerlink" title="建表规范"></a>建表规范</h1><blockquote><ul><li>Normal Format, NF</li></ul><ol><li>每个表保存一个实体信息</li><li>每个具有一个ID字段作为主键</li><li>ID主键 + 原子表</li><li>1NF, 第一范式</li><li>字段不能再分，就满足第一范式。</li></ol><ul><li>2NF, 第二范式</li></ul><ol><li>满足第一范式的前提下，不能出现部分依赖。</li><li>消除符合主键就可以避免部分依赖。增加单列关键字。</li></ol><ul><li>3NF, 第三范式</li></ul><ol><li>满足第二范式的前提下，不能出现传递依赖。</li><li>某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。</li><li>将一个实体信息的数据放在一个表内实现。</li></ol></blockquote><h1 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span>|<span class="keyword">DISTINCT</span>] select_expr <span class="keyword">FROM</span> -&gt; <span class="keyword">WHERE</span> -&gt; <span class="keyword">GROUP</span> <span class="keyword">BY</span> [合计函数] -&gt; <span class="keyword">HAVING</span> -&gt; <span class="keyword">ORDER</span> <span class="keyword">BY</span> -&gt; <span class="keyword">LIMIT</span></span><br><span class="line">a. select_expr</span><br><span class="line">    <span class="comment">-- 可以用 * 表示所有字段。</span></span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span></span><br><span class="line">        <span class="keyword">select</span> stu, <span class="number">29</span>+<span class="number">25</span>, <span class="keyword">now</span>() <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span><br><span class="line">        - 使用 as 关键字，也可省略 as.</span><br><span class="line">        <span class="keyword">select</span> stu+<span class="number">10</span> <span class="keyword">as</span> add10 <span class="keyword">from</span> tb;</span><br><span class="line">b. FROM 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    <span class="comment">-- 可以为表起别名。使用as关键字。</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1 <span class="keyword">AS</span> tt, tb2 <span class="keyword">AS</span> bb;</span><br><span class="line">    <span class="comment">-- from子句后，可以同时出现多个表。</span></span><br><span class="line">        <span class="comment">-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb1, tb2;</span><br><span class="line">    <span class="comment">-- 向优化符提示如何选择索引</span></span><br><span class="line">        <span class="keyword">USE</span> <span class="keyword">INDEX</span>、<span class="keyword">IGNORE</span> <span class="keyword">INDEX</span>、<span class="keyword">FORCE</span> <span class="keyword">INDEX</span></span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1 <span class="keyword">USE</span> <span class="keyword">INDEX</span> (key1,key2) <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">2</span> <span class="keyword">AND</span> key3=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table1 <span class="keyword">IGNORE</span> <span class="keyword">INDEX</span> (key3) <span class="keyword">WHERE</span> key1=<span class="number">1</span> <span class="keyword">AND</span> key2=<span class="number">2</span> <span class="keyword">AND</span> key3=<span class="number">3</span>;</span><br><span class="line">c. WHERE 子句</span><br><span class="line">    <span class="comment">-- 从from获得的数据源中进行筛选。</span></span><br><span class="line">    <span class="comment">-- 整型1表示真，0表示假。</span></span><br><span class="line">    <span class="comment">-- 表达式由运算符和运算数组成。</span></span><br><span class="line">        <span class="comment">-- 运算数：变量（字段）、值、函数返回值</span></span><br><span class="line">        <span class="comment">-- 运算符：</span></span><br><span class="line">            =, &lt;=&gt;, &lt;&gt;, !=, &lt;=, &lt;, &gt;=, &gt;, !, &amp;&amp;, ||,</span><br><span class="line">            in (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor</span><br><span class="line">            is/is not 加上ture/false/unknown，检验某个值的真假</span><br><span class="line">            &lt;=&gt;与&lt;&gt;功能相同，&lt;=&gt;可用于null比较</span><br><span class="line">d. GROUP BY 子句, 分组子句</span><br><span class="line">    GROUP BY 字段/别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：ASC，降序：DESC</span><br><span class="line">    以下[合计函数]需配合 GROUP BY 使用：</span><br><span class="line">    count 返回不同的非NULL值数目  count(*)、count(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。</span><br><span class="line">e. HAVING 子句，条件子句</span><br><span class="line">    与 where 功能、用法相同，执行时机不同。</span><br><span class="line">    where 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    having 对筛选出的结果再次进行过滤。</span><br><span class="line">    having 字段必须是查询出来的，where 字段必须是数据表存在的。</span><br><span class="line">    where 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。</span><br><span class="line">    where 不可以使用合计函数。一般需用合计函数才会用 having</span><br><span class="line">    SQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。</span><br><span class="line">f. ORDER BY 子句，排序子句</span><br><span class="line">    order by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...</span><br><span class="line">    升序：ASC，降序：DESC</span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引0开始。limit 获取条数</span><br><span class="line">h. DISTINCT, ALL 选项</span><br><span class="line">    distinct 去除重复记录</span><br><span class="line">    默认为 all, 全部记录</span><br></pre></td></tr></table></figure><h1 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将多个<span class="keyword">select</span>查询的结果组合成一个结果集合。</span><br><span class="line">   <span class="keyword">SELECT</span> ... <span class="keyword">UNION</span> [<span class="keyword">ALL</span>|<span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">   默认 <span class="keyword">DISTINCT</span> 方式，即所有返回的行都是唯一的</span><br><span class="line">   建议，对每个<span class="keyword">SELECT</span>查询加上小括号包裹。</span><br><span class="line">   <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序时，需加上 <span class="keyword">LIMIT</span> 进行结合。</span><br><span class="line">   需要各<span class="keyword">select</span>查询的字段数量一样。</span><br><span class="line">   每个<span class="keyword">select</span>查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条<span class="keyword">select</span>语句为准。</span><br></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    - 子查询需用括号包裹。</span><br><span class="line"><span class="comment">-- from型</span></span><br><span class="line">    from后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    - 简化每个查询内的条件。</span><br><span class="line">    - from型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    - 子查询返回一个表，表型子查询。</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> tb <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">0</span>) <span class="keyword">as</span> subfrom <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">-- where型</span></span><br><span class="line">    - 子查询返回一个值，标量子查询。</span><br><span class="line">    - 不需要给子查询取别名。</span><br><span class="line">    - where子查询内的表，不能直接用以更新。</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> tb <span class="keyword">where</span> money = (<span class="keyword">select</span> <span class="keyword">max</span>(money) <span class="keyword">from</span> tb);</span><br><span class="line">    <span class="comment">-- 列子查询</span></span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 in 或 not in 完成查询</span><br><span class="line">        exists 和 not exists 条件</span><br><span class="line">            如果子查询返回数据，则返回1或0。常用于判断条件。</span><br><span class="line">            <span class="keyword">select</span> column1 <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> t2);</span><br><span class="line">    <span class="comment">-- 行子查询</span></span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> t1 <span class="keyword">where</span> (<span class="keyword">id</span>, gender) <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span>, gender <span class="keyword">from</span> t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    <span class="comment">-- 特殊运算符</span></span><br><span class="line">    != all()    相当于 not in</span><br><span class="line">    = some()    相当于 in。any 是 some 的别名</span><br><span class="line">    != some()   不等同于 not in，不等于其中某一个。</span><br><span class="line">    all, some 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure><p>⇨ <a href="/1faa5dc0/" title="MySQL使用笔记(五)">MySQL使用笔记(五)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(三)</title>
      <link href="/63a5d46d/"/>
      <url>/63a5d46d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/faac85d7/" title="MySQL使用笔记(二)">MySQL使用笔记(二)</a></p><h1 id="选择类型"><a href="#选择类型" class="headerlink" title="选择类型"></a>选择类型</h1><p>PHP角度</p><blockquote><ol><li>功能满足</li><li>存储空间尽量小，处理效率更高</li><li>考虑兼容问题</li></ol></blockquote><p>IP存储</p><blockquote><ol><li>只需存储，可用字符串</li><li>如果需计算，查找等，可存储为4个字节的无符号int，即unsigned</li></ol><ul><li>PHP函数转换<br>ip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。<br>利用sprintf函数格式化字符串<br>sprintf(“%u”, ip2long(‘192.168.3.134’));<br>然后用long2ip将整型转回IP字符串</li><li>MySQL函数转换(无符号整型，UNSIGNED)<br>INET_ATON(‘127.0.0.1’) 将IP转为整型<br>INET_NTOA(2130706433) 将整型转为IP</li></ul></blockquote><h1 id="列属性（列约束）"><a href="#列属性（列约束）" class="headerlink" title="列属性（列约束）"></a>列属性（列约束）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">1. PRIMARY 主键</span><br><span class="line">    - 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    - 一个表只能有一个主键。</span><br><span class="line">    - 主键具有唯一性。</span><br><span class="line">    - 声明字段时，用 primary key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span>, stu <span class="built_in">varchar</span>(<span class="number">10</span>), primary <span class="keyword">key</span> (<span class="keyword">id</span>));</span><br><span class="line">    - 主键字段的值不能为null。</span><br><span class="line">    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span>, stu <span class="built_in">varchar</span>(<span class="number">10</span>), age <span class="built_in">int</span>, primary <span class="keyword">key</span> (stu, age));</span><br><span class="line">2. UNIQUE 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line">3. NULL 约束</span><br><span class="line">    null不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为null，表示什么都没有。</span><br><span class="line">    null, 允许为空。默认。</span><br><span class="line">    not null, 不允许为空。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="literal">null</span>, <span class="string">'val'</span>);</span><br><span class="line">        <span class="comment">-- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span></span><br><span class="line">4. DEFAULT 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">default</span>, <span class="string">'val'</span>);    <span class="comment">-- 此时表示强制使用默认值。</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( add_time <span class="built_in">timestamp</span> <span class="keyword">default</span> <span class="keyword">current_timestamp</span> );</span><br><span class="line">        <span class="comment">-- 表示将当前时间的时间戳设为默认值。</span></span><br><span class="line">        current_date, current_time</span><br><span class="line">5. AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或unique）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 <span class="keyword">alter</span> <span class="keyword">table</span> tbl auto_increment = x;</span><br><span class="line">6. <span class="keyword">COMMENT</span> 注释</span><br><span class="line">    例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( <span class="keyword">id</span> <span class="built_in">int</span> ) <span class="keyword">comment</span> <span class="string">'注释内容'</span>;</span><br><span class="line">7. FOREIGN KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="string">`t1_t2_fk`</span> <span class="keyword">foreign</span> <span class="keyword">key</span> (t1_id) <span class="keyword">references</span> t2(<span class="keyword">id</span>);</span><br><span class="line">        <span class="comment">-- 将表t1的t1_id外键关联到表t2的id字段。</span></span><br><span class="line">        <span class="comment">-- 每个外键都有一个名字，可以通过 constraint 指定</span></span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 on <span class="keyword">update</span> 或 <span class="keyword">on</span> <span class="keyword">delete</span>：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    <span class="number">1.</span> <span class="keyword">cascade</span>，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">set</span> <span class="literal">null</span>，设置为<span class="literal">null</span>。主表数据被更新（主键值更新），从表的外键被设置为<span class="literal">null</span>。主表记录被删除，从表相关记录外键被设置成<span class="literal">null</span>。但注意，要求该外键列，没有<span class="keyword">not</span> <span class="literal">null</span>属性约束。</span><br><span class="line">    <span class="number">3.</span> restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被<span class="keyword">InnoDB</span>存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure><p>⇨ <a href="/14a2e4fb/" title="MySQL使用笔记(四)">MySQL使用笔记(四)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(二)</title>
      <link href="/faac85d7/"/>
      <url>/faac85d7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><p>⇦ <a href="/77d59a46/" title="MySQL使用笔记(一)">MySQL使用笔记(一)</a></p><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 [(字段列表)] <span class="keyword">VALUES</span> (值列表)[, (值列表), ...]</span><br><span class="line">        <span class="comment">-- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span></span><br><span class="line">        <span class="comment">-- 可同时插入多条数据记录！</span></span><br><span class="line">        <span class="keyword">REPLACE</span> 与 <span class="keyword">INSERT</span> 完全一样，可互换。</span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 <span class="keyword">SET</span> 字段名=值[, 字段名=值, ...]</span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line">    <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名[ 其他子句]</span><br><span class="line">        <span class="comment">-- 可来自多个表的多个字段</span></span><br><span class="line">        <span class="comment">-- 其他子句可以不使用</span></span><br><span class="line">        <span class="comment">-- 字段列表可以用*代替，表示所有字段</span></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">    <span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名=新值[, 字段名=新值] [更新条件]</span><br></pre></td></tr></table></figure><h1 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL、数据库、表、字段均可设置编码</span></span><br><span class="line"><span class="comment">-- 数据编码与客户端编码不需一致</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'character_set_%'</span>   <span class="comment">-- 查看所有字符集编码项</span></span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line"><span class="keyword">SET</span> 变量名 = 变量值</span><br><span class="line">    <span class="keyword">SET</span> character_set_client = gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_results = gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_connection = gbk;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> GBK;  <span class="comment">-- 相当于完成以上三个设置</span></span><br><span class="line"><span class="comment">-- 校对集</span></span><br><span class="line">    校对集用以排序</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]/<span class="keyword">SHOW</span> <span class="keyword">CHARSET</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]   查看所有字符集</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]     查看所有校对集</span><br><span class="line">    <span class="keyword">CHARSET</span> 字符集编码     设置字符集编码</span><br><span class="line">    <span class="keyword">COLLATE</span> 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure><h1 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h1><h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><p>a. 整型</p><table><thead><tr><th>类型</th><th>字节</th><th>范围（有符号位）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节</td><td>-128 ~ 127 无符号位：0 ~ 255</td></tr><tr><td>smallint</td><td>2字节</td><td>-32768 ~ 32767</td></tr><tr><td>mediumint</td><td>3字节</td><td>-8388608 ~ 8388607</td></tr><tr><td>int</td><td>4字节</td><td></td></tr><tr><td>bigint</td><td>8字节</td><td></td></tr><tr><td>int(M) M表示总位数</td><td></td><td></td></tr></tbody></table><blockquote><ul><li>默认存在符号位，unsigned 属性修改</li><li>显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改<br>例：int(5) 插入一个数’123’，补填后为’00123’</li><li>在满足要求的情况下，越小越好。</li><li>1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用 tinyint(1)表示布尔型。</li></ul></blockquote><p>b. 浮点型</p><table><thead><tr><th>类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>float(单精度)</td><td>4字节</td><td></td></tr><tr><td>double(双精度)</td><td>8字节</td><td></td></tr></tbody></table><blockquote><p>浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。<br>不同于整型，前后均会补填0.<br>定义浮点型时，需指定总位数和小数位数。<br>float(M, D) double(M, D)<br>M表示总位数，D表示小数位数。<br>M和D的大小会决定浮点数的范围。不同于整型的固定范围。<br>M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。<br>支持科学计数法表示。<br>浮点数表示近似值。</p></blockquote><p>c. 定点数</p><blockquote><p>decimal – 可变长度<br>decimal(M, D) M也表示总位数，D表示小数位数。<br>保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。<br>将浮点数转换为字符串来保存，每9位数字保存为4个字节。</p></blockquote><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><blockquote><p>a. char, varchar</p></blockquote><pre><code>char    定长字符串，速度快，但浪费空间varchar 变长字符串，速度慢，但节省空间M表示能存储的最大长度，此长度是字符数，非字节数。不同的编码，所占用的空间不同。char,最多255个字符，与编码无关。varchar,最多65535字符，与编码有关。一条有效记录最大不能超过65535个字节。    utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。varchar 的最大有效长度由最大行大小和使用的字符集确定。最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3</code></pre><blockquote><p>b. blob, text</p></blockquote><pre><code>blob 二进制字符串（字节字符串）    tinyblob, blob, mediumblob, longblobtext 非二进制字符串（字符字符串）    tinytext, text, mediumtext, longtexttext 在定义时，不需要定义长度，也不会计算总长度。text 类型在定义时，不可给default值</code></pre><blockquote><p>c. binary, varbinary</p></blockquote><pre><code>类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。char, varchar, text 对应 binary, varbinary, blob.</code></pre><h2 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h2><blockquote><p>一般用整型保存时间戳，可以很方便的将时间戳进行格式化。</p></blockquote><table><thead><tr><th>类型</th><th>字节</th><th>日期/时间</th><th>范围</th></tr></thead><tbody><tr><td>datetime</td><td>8字节</td><td>日期及时间</td><td>1000-01-01 00:00:00 到 9999-12-31 23:59:59</td></tr><tr><td>date</td><td>3字节</td><td>日期</td><td>1000-01-01 到 9999-12-31</td></tr><tr><td>timestamp</td><td>4字节</td><td>时间戳</td><td>19700101000000 到 2038-01-19 03:14:07</td></tr><tr><td>time</td><td>3字节</td><td>时间</td><td>-838:59:59 到 838:59:59</td></tr><tr><td>year</td><td>1字节</td><td>年份</td><td>1901 - 2155</td></tr><tr><td>datetime</td><td>YYYY-MM-DD hh:mm:ss</td><td></td><td></td></tr><tr><td>timestamp</td><td>YY-MM-DD hh:mm:ss / YYYYMMDDhhmmss / YYMMDDhhmmss / YYYYMMDDhhmmss / YYMMDDhhmmss</td><td></td><td></td></tr><tr><td>date</td><td>YYYY-MM-DD / YY-MM-DD / YYYYMMDD / YYMMDD / YYYYMMDD / YYMMDD</td><td></td><td></td></tr><tr><td>time</td><td>hh:mm:ss / hhmmss / hhmmss</td><td></td><td></td></tr><tr><td>year</td><td>YYYY / YY / YYYY / YY</td><td></td><td></td></tr></tbody></table><h2 id="枚举和集合"><a href="#枚举和集合" class="headerlink" title="枚举和集合"></a>枚举和集合</h2><blockquote><p>枚举(enum)</p></blockquote><pre><code>enum(val1, val2, val3...)在已知的值中进行单选。最大数量为65535.枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。表现为字符串类型，存储却是整型。NULL值的索引是NULL。空字符串错误值的索引值是0。</code></pre><blockquote><p>集合（set）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(val1, val2, val3...)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tab ( gender <span class="keyword">set</span>(<span class="string">'男'</span>, <span class="string">'女'</span>, <span class="string">'无'</span>) );</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="string">'男, 女'</span>);</span><br></pre></td></tr></table></figure><pre><code>最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。当创建表时，SET成员值的尾部空格将自动被删除。</code></pre><p>⇨ <a href="/63a5d46d/" title="MySQL使用笔记(三)">MySQL使用笔记(三)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用笔记(一)</title>
      <link href="/77d59a46/"/>
      <url>/77d59a46/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="Mysql" data-src="/77d59a46/MySQL.png"><a id="more"></a><h1 id="Windows服务"><a href="#Windows服务" class="headerlink" title="Windows服务"></a>Windows服务</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 启动MySQL</span></span><br><span class="line"> net <span class="keyword">start</span> mysql</span><br><span class="line"><span class="comment">-- 创建Windows服务</span></span><br><span class="line"> sc <span class="keyword">create</span> mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure><h1 id="连接与断开服务器"><a href="#连接与断开服务器" class="headerlink" title="连接与断开服务器"></a>连接与断开服务器</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCESSLIST</span> <span class="comment">-- 显示哪些线程正在运行</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="comment">-- 显示系统变量信息</span></span><br></pre></td></tr></table></figure><!-- more --><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br><span class="line"><span class="comment">-- 显示当前时间、用户名、数据库版本</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">now</span>(), <span class="keyword">user</span>(), <span class="keyword">version</span>();</span><br><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">        <span class="keyword">COLLATE</span> collation_name</span><br><span class="line"><span class="comment">-- 查看已有库</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>[ <span class="keyword">LIKE</span> <span class="string">'PATTERN'</span>]</span><br><span class="line"><span class="comment">-- 查看当前库信息</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名</span><br><span class="line"><span class="comment">-- 修改库的选项信息</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 库名 选项信息</span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br></pre></td></tr></table></figure><h1 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line">    <span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] <span class="keyword">TABLE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        <span class="keyword">TEMPORARY</span> 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [<span class="keyword">NOT</span> <span class="literal">NULL</span> | <span class="literal">NULL</span>] [<span class="keyword">DEFAULT</span> default_value] [AUTO_INCREMENT] [<span class="keyword">UNIQUE</span> [<span class="keyword">KEY</span>] | [PRIMARY] <span class="keyword">KEY</span>] [<span class="keyword">COMMENT</span> <span class="string">'string'</span>]</span><br><span class="line"><span class="comment">-- 表选项</span></span><br><span class="line">    <span class="comment">-- 字符集</span></span><br><span class="line">        <span class="keyword">CHARSET</span> = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    <span class="comment">-- 存储引擎</span></span><br><span class="line">        <span class="keyword">ENGINE</span> = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：<span class="keyword">InnoDB</span> MyISAM <span class="keyword">Memory</span>/<span class="keyword">Heap</span> BDB <span class="keyword">Merge</span> Example CSV MaxDB <span class="keyword">Archive</span></span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        <span class="keyword">InnoDB</span>表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        <span class="keyword">SHOW</span> <span class="keyword">ENGINES</span> <span class="comment">-- 显示存储引擎的状态信息</span></span><br><span class="line">        <span class="keyword">SHOW</span> <span class="keyword">ENGINE</span> 引擎名 &#123;<span class="keyword">LOGS</span>|<span class="keyword">STATUS</span>&#125; <span class="comment">-- 显示存储引擎的日志或状态信息</span></span><br><span class="line">    <span class="comment">-- 自增起始数</span></span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    <span class="comment">-- 数据文件目录</span></span><br><span class="line">        <span class="keyword">DATA</span> <span class="keyword">DIRECTORY</span> = <span class="string">'目录'</span></span><br><span class="line">    <span class="comment">-- 索引文件目录</span></span><br><span class="line">        <span class="keyword">INDEX</span> <span class="keyword">DIRECTORY</span> = <span class="string">'目录'</span></span><br><span class="line">    <span class="comment">-- 表注释</span></span><br><span class="line">        <span class="keyword">COMMENT</span> = <span class="string">'string'</span></span><br><span class="line">    <span class="comment">-- 分区选项</span></span><br><span class="line">        <span class="keyword">PARTITION</span> <span class="keyword">BY</span> ... (详细见手册)</span><br><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLES</span>[ <span class="keyword">LIKE</span> <span class="string">'pattern'</span>]</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLES</span> <span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="comment">-- 查看表机构</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 （信息更详细）</span><br><span class="line">    <span class="keyword">DESC</span> 表名 / <span class="keyword">DESCRIBE</span> 表名 / <span class="keyword">EXPLAIN</span> 表名 / <span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">LIKE</span> <span class="string">'PATTERN'</span>]</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> <span class="keyword">STATUS</span> [<span class="keyword">FROM</span> db_name] [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>]</span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line">    <span class="comment">-- 修改表本身的选项</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 表的选项</span><br><span class="line">        eg: <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ENGINE</span>=MYISAM;</span><br><span class="line">    <span class="comment">-- 对表进行重命名</span></span><br><span class="line">        <span class="keyword">RENAME</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 新表名</span><br><span class="line">        <span class="keyword">RENAME</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">TO</span> 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        <span class="comment">-- RENAME可以交换两个表名</span></span><br><span class="line">    <span class="comment">-- 修改表的字段机构（13.1.2. ALTER TABLE语法）</span></span><br><span class="line">        <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 操作名</span><br><span class="line">        <span class="comment">-- 操作名</span></span><br><span class="line">            <span class="keyword">ADD</span>[ <span class="keyword">COLUMN</span>] 字段定义       <span class="comment">-- 增加字段</span></span><br><span class="line">                <span class="keyword">AFTER</span> 字段名          <span class="comment">-- 表示增加在该字段名后面</span></span><br><span class="line">                <span class="keyword">FIRST</span>               <span class="comment">-- 表示增加在第一个</span></span><br><span class="line">            <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(字段名)   <span class="comment">-- 创建主键</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [索引名] (字段名)<span class="comment">-- 创建唯一索引</span></span><br><span class="line">            <span class="keyword">ADD</span> <span class="keyword">INDEX</span> [索引名] (字段名) <span class="comment">-- 创建普通索引</span></span><br><span class="line">            <span class="keyword">DROP</span>[ <span class="keyword">COLUMN</span>] 字段名      <span class="comment">-- 删除字段</span></span><br><span class="line">            <span class="keyword">MODIFY</span>[ <span class="keyword">COLUMN</span>] 字段名 字段属性     <span class="comment">-- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span></span><br><span class="line">            <span class="keyword">CHANGE</span>[ <span class="keyword">COLUMN</span>] 原字段名 新字段名 字段属性      <span class="comment">-- 支持对字段名修改</span></span><br><span class="line">            <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>    <span class="comment">-- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名 <span class="comment">-- 删除索引</span></span><br><span class="line">            <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> 外键    <span class="comment">-- 删除外键</span></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">TABLE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表名 ...</span><br><span class="line"><span class="comment">-- 清空表数据</span></span><br><span class="line">    <span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] 表名</span><br><span class="line"><span class="comment">-- 复制表结构</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">LIKE</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 复制表结构和数据</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 [<span class="keyword">AS</span>] <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 要复制的表名</span><br><span class="line"><span class="comment">-- 检查表是否有错误</span></span><br><span class="line">    <span class="keyword">CHECK</span> <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">option</span>] ...</span><br><span class="line"><span class="comment">-- 优化表</span></span><br><span class="line">    <span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"><span class="comment">-- 修复表</span></span><br><span class="line">    <span class="keyword">REPAIR</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ... [<span class="keyword">QUICK</span>] [<span class="keyword">EXTENDED</span>] [USE_FRM]</span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line">    <span class="keyword">ANALYZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure><p>⇨ <a href="/faac85d7/" title="MySQL使用笔记(二)">MySQL使用笔记(二)</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
            <tag> Mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 进阶</title>
      <link href="/88f4aef3/"/>
      <url>/88f4aef3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><img title="java进阶一" data-src="/88f4aef3/java1.png"><a id="more"></a> <img title="java高级基础二" data-src="/88f4aef3/java2.png"><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle使用笔记</title>
      <link href="/92d20082/"/>
      <url>/92d20082/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="Linux系统下启动Oracle数据库步骤"><a href="#Linux系统下启动Oracle数据库步骤" class="headerlink" title="Linux系统下启动Oracle数据库步骤"></a>Linux系统下启动Oracle数据库步骤</h1><blockquote><p>第一步：打开Oracle监听</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# lsnrctl <span class="built_in">start</span></span><br></pre></td></tr></table></figure><blockquote><p>第二步：进入sqlplus</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# sqlplus /nolog</span><br></pre></td></tr></table></figure><blockquote><p>第三步：使用sysdab角色登录sqlplus</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; conn /as sysdba</span><br></pre></td></tr></table></figure><blockquote><p>第四步：启动数据库</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; startup</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;经过上面的四个步骤，oracle数据库就可以启动了;关闭数据库用 shutdown 是要等待事物结束才关闭，强制关闭用 shutdown abort。</p></blockquote><h1 id="修改Oracle数据库表空间自增长"><a href="#修改Oracle数据库表空间自增长" class="headerlink" title="修改Oracle数据库表空间自增长"></a>修改Oracle数据库表空间自增长</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_data_files; <span class="comment">--查询表空间地址</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">DATAFILE</span> <span class="string">'/oradata/twcwfntts.dbf'</span> <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span>; <span class="comment">--打开自动增长</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">DATAFILE</span> <span class="string">'/oradata/twcwfntts.dbf'</span> <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">200</span>M ; <span class="comment">--每次自动增长200m</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">DATAFILE</span> <span class="string">'/oradata/twcwfntts.dbf'</span> <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span> <span class="keyword">NEXT</span> <span class="number">200</span>M <span class="keyword">MAXSIZE</span> <span class="number">2024</span>M; <span class="comment">--每次自动增长200m，数据表最大不超过1G</span></span><br></pre></td></tr></table></figure><h1 id="使用listagg-和WITHIN-GROUP-将多行合并成一行"><a href="#使用listagg-和WITHIN-GROUP-将多行合并成一行" class="headerlink" title="使用listagg()和WITHIN GROUP ()将多行合并成一行"></a>使用listagg()和WITHIN GROUP ()将多行合并成一行</h1><img title="原始数据" data-src="/92d20082/DB0.png"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id, a.name,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">listagg</span>(b.name, <span class="string">','</span>) <span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> b.id)</span><br><span class="line">        <span class="keyword">from</span> t_sm_line b</span><br><span class="line">        <span class="keyword">where</span>  a.exc_line <span class="keyword">like</span> b.id||<span class="string">',%'</span> <span class="keyword">or</span> a.exc_line <span class="keyword">like</span> <span class="string">'%,'</span>||b.id||<span class="string">',%'</span></span><br><span class="line">         <span class="keyword">or</span> a.exc_line <span class="keyword">like</span> <span class="string">'%,'</span>||b.id  <span class="keyword">or</span> a.exc_line = <span class="keyword">cast</span>(a.id <span class="keyword">as</span> <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line">         <span class="keyword">or</span> <span class="keyword">instr</span>(b.id,a.exc_line) &gt;<span class="number">0</span>) exc_line</span><br><span class="line"><span class="keyword">from</span> t_sm_line a <span class="keyword">where</span> a.exc_line <span class="keyword">is</span> <span class="keyword">not</span>  <span class="literal">null</span></span><br></pre></td></tr></table></figure><img title="查询后" data-src="/92d20082/DB1.png"><a id="more"></a><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> database </category>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> database </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro框架之授权</title>
      <link href="/d533dab/"/>
      <url>/d533dab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在应用系统中，对于不同角色的用户而言，在系统中的操作权限，例如，对于超级管理员角色可以操作所有功能，普通用户只能访问部分功能，这就是所谓的授权，也叫访问控制，即在应用中控制谁访问哪些资源（如访问页面/编辑数据/页面操作等）。</p><hr><a id="more"></a><h1 id="shiro中授权的核心"><a href="#shiro中授权的核心" class="headerlink" title="shiro中授权的核心"></a>shiro中授权的核心</h1><p>&ensp;&ensp;&ensp;&ensp;在shiro授权中，最核心的是：主体/用户（Subject）、权限（Permission）、角色（Role）、资源（Resource）,通过这几个关键对象，Shiro可以支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的）。</p><blockquote><ul><li>主体(Subject)：访问应用的用户，在 Shiro 中使用 Subject 代表该用户。用户只有授权后才允许访问相应的资源。</li><li>资源(Resource)：在应用中用户可以访问的 URL，比如访问 JSP页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问。</li><li>权限(Permission)：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：访问用户列表页面查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）等。权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许。</li><li>角色(Role)：权限的集合，一般情况下会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。</li></ul></blockquote><hr><h1 id="Shiro三种授权方式"><a href="#Shiro三种授权方式" class="headerlink" title="Shiro三种授权方式"></a>Shiro三种授权方式</h1><h2 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h2><blockquote><p>通过写if/else 授权代码块完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"><span class="comment">// 测试是否有某一个角色. 调用 Subject 的 hasRole 方法.</span></span><br><span class="line"><span class="keyword">if</span> (currentUser.hasRole(<span class="string">"admin"</span>)) &#123;</span><br><span class="line">   <span class="comment">//有权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h2><blockquote><p>通过在执行的Java方法上放置相应的注解完成，没有权限将抛出相应的异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresRoles</span>(&#123;<span class="string">"admin"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//有权限</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限注解</p><blockquote><ul><li><font color="#ea671a" size="3">@RequiresAuthentication</font>：表示当前Subject已经通过 login进行了身份验证；即 Subject. isAuthenticated()返回 true；</li><li><font color="#ea671a" size="3">@RequiresUser</font>：表示当前 Subject已经身份验证或者通过记 住我登录的；</li><li><font color="#ea671a" size="3">@RequiresGuest</font>：表示当前Subject没有身份验证或通过记住我登录过，即是游客身份；</li><li><font color="#ea671a" size="3">@RequiresRoles(value={“admin”, “user”}, logical= Logical.AND)</font>：表示当前 Subject 需要角色 admin 和user；</li><li><font color="#ea671a" size="3">@RequiresPermissions(value={“user:a”, “user:b”}, logical= Logical.OR)</font>：表示当前 Subject需要权限 user:a或 user:b。</li></ul></blockquote><h2 id="JSP-GSP-标签"><a href="#JSP-GSP-标签" class="headerlink" title="JSP/GSP 标签"></a>JSP/GSP 标签</h2><blockquote><p>在JSP/GSP页面通过相应的标签完成</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--Jsp页面引入shiro标签库--%&gt;</span><br><span class="line">&lt;%@ tagliburi=<span class="string">"http://shiro.apache.org/tags"</span> prefix=<span class="string">"shiro"</span> %&gt;</span><br><span class="line">&lt;shiro:hasRole name=<span class="string">"admin"</span>&gt;    </span><br><span class="line">&lt;!— 有权限 —&gt;    </span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br></pre></td></tr></table></figure><p>Shiro 提供了 JSTL 标签用于在 JSP 页面进行权限控制</p><table><thead><tr><th style="text-align:left">标签名称及标签条件（均是显示标签内容）</th><th style="text-align:center">含义</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:authenticated&gt;</font></td><td style="text-align:center"><font color="#163fd8">用户已经身份验证通过，即 Subject.login登录成功，不是记住我登录的</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-authenticated-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:notAuthenticated&gt;</font></td><td style="text-align:center"><font color="#163fd8">用户未进行身份验证，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-notAuthenticated-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:guest&gt;</font></td><td style="text-align:center"><font color="#163fd8">用户没有身份验证时显示相应信息，即游客访问信息</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-guest-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:user&gt;</font></td><td style="text-align:center"><font color="#163fd8">用户已经经过认证/记住我登录后显示相应的信息</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-user-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:hasAnyRoles name=”abc,123”&gt;</font></td><td style="text-align:center"><font color="#163fd8">在有abc或者123角色时</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-hasAnyRoles-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:hasRole name=”abc”&gt;</font></td><td style="text-align:center"><font color="#163fd8">拥有角色abc</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-hasRole-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:lacksRole name=”abc”&gt;</font></td><td style="text-align:center"><font color="#163fd8">没有角色abc</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-lacksRole-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:hasPermission name=”abc”&gt;</font></td><td style="text-align:center"><font color="#163fd8">拥有权限资源abc</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-hasPermission-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:lacksPermission name=”abc”&gt;</font></td><td style="text-align:center"><font color="#163fd8">没有abc权限资源</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-lacksPermission-jstl.png"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:principal&gt;</font></td><td style="text-align:center"><font color="#163fd8">显示用户身份名称</font></td><td style="text-align:left"></td></tr><tr><td style="text-align:left"><font color="#163fd8">&lt;shiro:principal property=”username”/&gt;</font></td><td style="text-align:center"><font color="#163fd8">显示用户身份信息，默认调用 Subject.getPrincipal()获取，即 Primary Principal。</font></td><td style="text-align:left"><img data-src="/d533dab/shiro-principal-jstl.png"></td></tr></tbody></table><hr><h1 id="Shiro-授权流程"><a href="#Shiro-授权流程" class="headerlink" title="Shiro 授权流程"></a>Shiro 授权流程</h1><img title="Shiro 授权流程" data-src="/d533dab/shiro-Authorization-flow.png"><h2 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h2><blockquote><ol><li>首先调用 Subject.isPermitted*/hasRole* 接口，其会委托给SecurityManager，而 SecurityManager接着会委托给 Authorizer；</li><li>Authorizer是真正的授权者，如果调用如 isPermitted(“user:view”)，其首先会通过 PermissionResolver把字符串转换成相应的 Permission实例；</li><li>在进行授权之前，其会调用相应的 Realm 获取 Subject 相应的角色/权限用于匹配传入的角色/权限；</li><li>Authorizer 会判断 Realm 的角色/权限是否和传入的匹配，如果 有多个Realm，会委托给ModularRealmAuthorizer 进行循环判断，如果匹配如 isPermitted*/hasRole* 会返回true，否则返回false表示授权失败。</li></ol></blockquote><h3 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h3><blockquote><p>Shiro 的 Permissions</p><ul><li>规则：<br>&ensp;&ensp;&ensp;&ensp;<font style="font-weight:700;color:#0f0f79" size="3">资源标识符：操作：对象实例 ID</font> 即对哪个资源的哪个实例可以进行什么操作. 其默认支持通配符权限字符串；<ul><li><font style="font-weight:700;color:#0f0f79" size="3">: </font>表示资源/操作/实例的分割；</li><li><font style="font-weight:700;color:#0f0f79" size="3">, </font>表示操作的分割，</li><li><font style="font-weight:700;color:#0f0f79" size="3">* </font>表示任意资源/操作/实例。</li></ul></li><li>多层次管理：<br>&ensp;&ensp;&ensp;&ensp;例如：user:query、user:edit<ul><li>冒号是一个特殊字符，它用来分隔权限字符串的下一部件：第一部分 是权限被操作的领域（打印机），第二部分是被执行的操作;</li><li>多个值：每个部件能够保护多个值。因此，除了授予用户 user:query 和 user:edit 权限外，也可以简单地授予他们一个：user:query, edit;</li><li>还可以用 * 号代替所有的值，如：user:* ， 也可以写：*:query，表示某个用户在所有的领域都有 query 的权限。</li></ul></li><li>实例级访问控制：<ul><li>这种情况通常会使用三个部件：域、操作、被付诸实施的实例。如：user:edit:manager；</li><li>也可以使用通配符来定义，如：user:edit:*、user:*:*、user:*:manager;</li><li>部分省略通配符：缺少的部件意味着用户可以访问所有与之匹配的值，比如：user:edit 等价于 user:edit :*、 user 等价于 user:*:*;</li><li>注意：通配符只能从字符串的结尾处省略部件，也就是说 user:edit 并不等价于 user:*:edit</li></ul></li></ul></blockquote><h3 id="ModularRealmAuthorizer"><a href="#ModularRealmAuthorizer" class="headerlink" title="ModularRealmAuthorizer"></a>ModularRealmAuthorizer</h3><blockquote><p>ModularRealmAuthorizer 进行多 Realm 匹配流程：</p><ol><li>首先检查相应的 Realm 是否实现了实现了Authorizer；</li><li>如果实现了 Authorizer，那么接着调用其相应的 isPermitted*/hasRole* 接口进行匹配；</li><li>如果有一个Realm匹配那么将返回 true，否则返回 false。</li></ol></blockquote><p><font color="black" size="5" face="华文行楷">附：授权相关的的拦截器及其他</font><br><img title="授权相关的的拦截器" data-src="/d533dab/shiro-Authorization-filter.png"><br><img title="其他拦截器" data-src="/d533dab/shiro-other-filter.png"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Shiro </tag>
            
            <tag> Authorization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro框架之认证</title>
      <link href="/159c7b0e/"/>
      <url>/159c7b0e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在应用系统中，对于用户而言，登录系统时，一般需要提供如身份 ID等一些标识信息来表明登录者的身份，如提供 email，用户名/密码来证明，这就是所谓的身份验证；对于服务端，需要先收集用户（对应Shiro中的Subject）提供的 principals（身份）和 credentials（证明）并进行进行身份确认，这就是所谓的认证。</p><hr><a id="more"></a><h1 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h1><p>&ensp;&ensp;&ensp;&ensp;在 shiro 中，用户需要提供 principals （身份）和 credentials（证 明）给 shiro，从而应用能验证用户身份：</p><blockquote><ul><li>principals：身份，即主体的标识属性，可以是任何属性，如用户名、邮箱等，唯一即可。一个主体可以有多个 principals，但只有一个Primary principals，一般是用户名/邮箱/手机号。</li><li>credentials：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。</li><li>最常见的 principals 和 credentials 组合就是用户名/密码了。</li></ul></blockquote><h2 id="身份验证基本流程"><a href="#身份验证基本流程" class="headerlink" title="身份验证基本流程"></a>身份验证基本流程</h2><blockquote><ol><li>收集用户身份/凭证，即如用户名/密码;</li><li>调用 Subject.login 进行登录，如果失败将得到相应的 AuthenticationException异常，根据异常提示用户 错误信息；否则登录成功;</li><li>创建自定义的 Realm类，继承 org.apache.shiro.realm.AuthorizingRealm类，实现 doGetAuthenticationInfo()方法;</li><li>如果身份验证失败请捕获 AuthenticationException或其子类。</li></ol></blockquote><p>示例：ShiroHandler.java<br></p><figure class="highlight java"><figcaption><span>ShiroHandler.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/shiro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String username,</span></span><br><span class="line"><span class="function">                        @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">// 把用户名和密码封装为 UsernamePasswordToken 对象</span></span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">            <span class="comment">// rememberme</span></span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行登录.</span></span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="comment">// 所有认证时异常的父类.</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">                System.out.println(<span class="string">"登录失败: "</span> + ae.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/list.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ShiroRealm.java<br></p><figure class="highlight java"><figcaption><span>ShiroRealm.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 把 AuthenticationToken 转换为 UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken upToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//2. 从 UsernamePasswordToken 中来获取 username</span></span><br><span class="line">        String username = upToken.getUsername();</span><br><span class="line">        <span class="comment">//3. 调用数据库的方法, 从数据库中查询 username 对应的用户记录</span></span><br><span class="line">        System.out.println(<span class="string">"从数据库中获取 username: "</span> + username + <span class="string">" 所对应的用户信息."</span>);</span><br><span class="line">        <span class="comment">//4. 若用户不存在, 则可以抛出 UnknownAccountException 异常</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"unknown"</span>.equals(username))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 根据用户信息的情况, 决定是否需要抛出其他的 AuthenticationException 异常.</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"monster"</span>.equals(username))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"用户被锁定"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 根据用户的情况, 来构建 AuthenticationInfo 对象并返回. 通常使用的实现类为: SimpleAuthenticationInfo</span></span><br><span class="line">        <span class="comment">//以下信息是从数据库中获取的.</span></span><br><span class="line">        <span class="comment">//1). principal: 认证的实体信息. 可以是 username, 也可以是数据表对应的用户的实体类对象.</span></span><br><span class="line">        Object principal = username;</span><br><span class="line">        <span class="comment">//2). credentials: 密码.</span></span><br><span class="line">        Object credentials = <span class="keyword">null</span>; <span class="comment">//"fc1709d0a95a6be30bc5926fdb7f22f4";</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(username))&#123;</span><br><span class="line">            credentials = <span class="string">"038bdaf98f2037b31f1e75b5b4c9b26e"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"user"</span>.equals(username))&#123;</span><br><span class="line">            credentials = <span class="string">"098d2c478e9c11555ce2823231e02ec1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3). realmName: 当前 realm 对象的 name. 调用父类的 getName() 方法即可</span></span><br><span class="line">        String realmName = getName();</span><br><span class="line">        <span class="comment">//4). 盐值.</span></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(username);</span><br><span class="line"></span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">null</span>; <span class="comment">//new SimpleAuthenticationInfo(principal, credentials, realmName);</span></span><br><span class="line">        info = <span class="keyword">new</span> SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><img title="AuthorizingRealm" data-src="/159c7b0e/shiro-AuthorizingRealm.png"> <img title="AuthenticationExecption" data-src="/159c7b0e/shiro-AuthenticationExecption.png"><hr><h1 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h1><img title="身份认证流程" data-src="/159c7b0e/shiro-Certification.png"><h2 id="身份认证流程"><a href="#身份认证流程" class="headerlink" title="身份认证流程"></a>身份认证流程</h2><blockquote><ol><li>首先调用 Subject.login(token)进行登录，其会自动委托给 SecurityManager;</li><li>SecurityManager负责真正的身份验证逻辑；它会委托给 Authenticator进行身份验证；</li><li>Authenticator才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自定义插入自己的实现；</li><li>Authenticator可能会委托给相应的 AuthenticationStrategy进行多 Realm身份验证，默认 ModularRealmAuthenticator会调用AuthenticationStrategy进行多 Realm身份验证；</li><li>Authenticator 会把相应的 token 传入 Realm，从 Realm 获取身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处 可以配置多个Realm，将按照相应的顺序及策略进行访问。</li></ol></blockquote><h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;Authenticator的职责是验证用户帐号，是 Shiro API中身份验证核心的入口点：如果验证成功，将返回AuthenticationInfo验证信息；此信息中包含了身份及凭证；如果验证失败将抛出相应的 AuthenticationException异常。<br>&ensp;&ensp;&ensp;&ensp;SecurityManager接口继承了 Authenticator，另外还有一个 ModularRealmAuthenticator实现，其委托给多个Realm进行验证，验证规则通过 AuthenticationStrategy接口指定。</p></blockquote><img title="Authenticator接口" data-src="/159c7b0e/shiro-Authenticator.png"><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;Shiro从 Realm获取安全数据（如用户、角色、 权限），即 SecurityManager要验证用户身份，那么它需要从 Realm获取相应的用户进行比较以确定用户身份是否 合法；也需要从 Realm得到用户相应的角色/权限进行验证用户是否能进行操作，可以有一个或多个 Realm，将按照相应的顺序及策略进行访问。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 配置多个Realm ，采用不同的加密方式，将按照list相应的顺序--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"firstRealm"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"firstRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.ShiroRealm"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置凭证算法匹配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 采用MD5加密--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.SecondRealm"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置凭证算法匹配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 采用SHA1加密--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Realm接口如下：<br><img title="Realm接口" data-src="/159c7b0e/shiro-Realm.png"></p><blockquote><ul><li><font color="#ea671a" size="3">String getName();</font>//返回一个唯一的Realm名字</li><li><font color="#ea671a" size="3">boolean supports(AuthenticationToken token);</font>//判断此Realm是否支持Token</li><li><font color="#ea671a" size="3">AuthenticationInfo getAuthenticationInfo(AuthenticationToken token) throws AuthenticationException;</font>//根据Token获取认证信息</li></ul></blockquote><p>&ensp;&ensp;&ensp;&ensp;实际开发中，一般继承 AuthorizingRealm（授权）即可；其继承了 AuthenticatingRealm（即身份验证），而且也间接继承了CachingRealm（带有缓存实现）。</p><p>Realm 的继承关系：<br><img title="Realm接口继承关系" data-src="/159c7b0e/shiro-Realm-Relationship.png"></p><h3 id="AuthenticationStrategy"><a href="#AuthenticationStrategy" class="headerlink" title="AuthenticationStrategy"></a>AuthenticationStrategy</h3><img title="Realm接口" data-src="/159c7b0e/shiro-AuthenticationStrategy.png"><blockquote><ul><li><font color="#ea671a" size="3">AllSuccessfulStrategy</font>：所有Realm验证成功才算成功，且返回所有 Realm身份验证成功的认证信息，如果有一个失败就失败了；</li><li><font color="#ea671a" size="3">AtLeastOneSuccessfulStrategy</font>：只要有一个Realm验证成功即可，和 FirstSuccessfulStrategy不同，将返回所有 Realm身份验证成功的认证信 息；</li><li><font color="#ea671a" size="3">FirstSuccessfulStrategy</font>：只要有一个 Realm 验证成功即可，只返回第一个 Realm身份验证成功的认证信息，其他的忽略。</li></ul></blockquote><p>ModularRealmAuthenticator 默认是 AtLeastOneSuccessfulStrategy策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ModularRealmAuthenticator默认构造器</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ModularRealmAuthenticator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationStrategy = <span class="keyword">new</span> AtLeastOneSuccessfulStrategy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义配置ModularRealmAuthenticator，更改默认策略：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.FirstSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="black" size="5" face="华文行楷">附：身份验证相关的拦截器</font><br><img title="身份验证相关的拦截器" data-src="/159c7b0e/shiro-Authenticator-filter.png"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Shiro </tag>
            
            <tag> Authenticator </tag>
            
            <tag> Realm </tag>
            
            <tag> AuthenticationStrategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro框架与Web集成</title>
      <link href="/54c6b908/"/>
      <url>/54c6b908/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在《<a href="/43930f47/" title="Apache Shiro框架">Apache Shiro框架</a>》中提到，<span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcv" title="http://shiro.apache.org/">Apache Shiro<i class="fa fa-external-link"></i></span>是 Java 的一个强大易用的安全（权限）框架，提供了认证、授权、加密、会话管理、与Web 集成、缓存等功能，本文主要记录本人在学习使用Apache Shiro框架与Web集成过程中一些总结及感悟，学习过程中通过新建项目边学边练来加深理解。<br><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=shiro-web&type=watch&count=true&size=large&v=2" frameborder="0" scrolling="0" width="160px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=shiro-web&type=fork&count=true&size=large" frameborder="0" scrolling="0" width="158px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=shiro-web&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe></p><hr><a id="more"></a><h1 id="与Web的集成"><a href="#与Web的集成" class="headerlink" title="与Web的集成"></a><strong>与Web的集成</strong></h1><p>&ensp;&ensp;&ensp;&ensp;Shiro 提供了与Web集成的支持，其通过一个ShiroFilter入口来拦截需要安全控制的URL，然后进行相应的控制。ShiroFilter类似于如 Strut2/SpringMVC这种web框架的前端控制器，是安全控制的入口点，其负责读取配置（如ini 配置文件），然后判断URL 是否需要登录/权限等工作。《<a href="/96db3174/" title="Apache Shiro框架默认过滤器及URL匹配">Apache Shiro框架默认过滤器及URL匹配</a>》对于Shiro框架默认过滤器及URL匹配做了详细的讲解。</p><h2 id="Shiro与Web的集成的配置详解"><a href="#Shiro与Web的集成的配置详解" class="headerlink" title="Shiro与Web的集成的配置详解"></a>Shiro与Web的集成的配置详解</h2><h3 id="配置Spring-及-SpringMVC"><a href="#配置Spring-及-SpringMVC" class="headerlink" title="配置Spring 及 SpringMVC"></a>配置Spring 及 SpringMVC</h3><p>&ensp;&ensp;&ensp;&ensp;Spring及SpringMVC配置此处略，详见《<a href="/375e3f9d/" title="Apache SpringMvc配置详解及源码分析">Apache SpringMvc配置详解及源码分析</a>》。</p><h3 id="配置Shiro的SecurityManager"><a href="#配置Shiro的SecurityManager" class="headerlink" title="配置Shiro的SecurityManager"></a>配置Shiro的SecurityManager</h3><p>&ensp;&ensp;&ensp;&ensp;securityManager安全管理器，它相当于SpringMVC 中的 DispatcherServlet；是Shiro的心脏所有具体的交互都通过SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证、授权、会话及缓存的管理，其配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager.cookie.maxAge"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置CacheManager及authenticator"><a href="#配置CacheManager及authenticator" class="headerlink" title="配置CacheManager及authenticator"></a>配置CacheManager及authenticator</h3><p>&ensp;&ensp;&ensp;&ensp;CacheManager缓存控制器，用来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能；Authenticator负责 Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span>  <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="配置-Realm"><a href="#配置-Realm" class="headerlink" title="配置 Realm"></a>配置 Realm</h3><p>&ensp;&ensp;&ensp;&ensp;Shiro从Realm 获取安全数据（如用户、角色、权限），可以有一个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.ShiroRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.SecondRealm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置LifecycleBeanPostProcessor"><a href="#配置LifecycleBeanPostProcessor" class="headerlink" title="配置LifecycleBeanPostProcessor"></a>配置LifecycleBeanPostProcessor</h3><p>&ensp;&ensp;&ensp;&ensp;LifecycleBeanPostProcessor将Initializable和Destroyable的实现类统一在其内部自动分别调用了Initializable.init()和Destroyable.destroy()方法，从而达到管理shiro bean生命周期的目的， 可以自定的来调用配置在Spring IOC容器中shiro bean的生命周期方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启用IOC容器中使用shiro的注解"><a href="#启用IOC容器中使用shiro的注解" class="headerlink" title="启用IOC容器中使用shiro的注解"></a>启用IOC容器中使用shiro的注解</h3><p>&ensp;&ensp;&ensp;&ensp;启用IOC 容器中使用shiro的注解，但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Shiro的shiroFilter"><a href="#配置Shiro的shiroFilter" class="headerlink" title="配置Shiro的shiroFilter"></a>配置Shiro的shiroFilter</h3><p>&ensp;&ensp;&ensp;&ensp;Shiro的DefaultFilter在整个Shiro架构中的作用便是用来拦截所有请求。在 Shiro DefaultFilter 中我们配置了 filterChainDefinitions 属性。filterChainDefinitions 的作用便是对所有被Shiro 拦截的请求做声明，下面是一个标准的DefaultFilter和 filterChainDefinitions 的配置。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护. </span></span><br><span class="line"><span class="comment">        以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">        1). anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">        3). logout 登出.</span></span><br><span class="line"><span class="comment">        4). roles 角色过滤器</span></span><br><span class="line"><span class="comment">    --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /shiro/login = anon</span><br><span class="line">            /shiro/logout = logout</span><br><span class="line">            </span><br><span class="line">            /user.jsp = roles[user]</span><br><span class="line">            /admin.jsp = roles[admin]</span><br><span class="line">            </span><br><span class="line">            # everything else requires authentication:</span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&ensp;&ensp;&ensp;&ensp;从以上的配置我们可以预见一个问题，那就是倘若filterChainDefinitions的声明过多的话会导致该配置文件冗余臃肿。在Shiro的源代码中filterChainDefinition本身是一个linkedHashMap，所以我们可以通过工厂设计模式来创建一个filterChainDefinitionMap。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapBuilder"</span> <span class="attr">factory-method</span>=<span class="string">"buildFilterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapBuilder"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.factory.FilterChainDefinitionMapBuilder"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><figcaption><span>FilterChainDefinitionMapBuilder.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sunys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterChainDefinitionMapBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedHashMap&lt;String, String&gt; <span class="title">buildFilterChainDefinitionMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/login.jsp"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/shiro/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/shiro/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        map.put(<span class="string">"/user.jsp"</span>, <span class="string">"authc,roles[user]"</span>);</span><br><span class="line">        map.put(<span class="string">"/admin.jsp"</span>, <span class="string">"authc,roles[admin]"</span>);</span><br><span class="line">        map.put(<span class="string">"/list.jsp"</span>, <span class="string">"user"</span>);</span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;在web.xml文件中配置Shiro的shiroFilter过滤器。</p><figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;DelegatingFilterProxy 实际上是 Filter 的一个代理对象，DelegatingFilterProxy 作用是自动到Spring IOC容器中查找名字为shiroFilter（filter-name）的bean并把所有Filter的操作委托给它，也可以通过targetBeanName 的初始化参数来配置filter bean 的id。<br>&ensp;&ensp;&ensp;&ensp;因为Shiro会来IOC容器中查找和<filter-name>名字对应的 filter bean，所以配置Shiro的filter bean的id必须和 web.xml文件中配置的 DelegatingFilterProxy的<filter-name>一致，若不一致, 则会抛出: NoSuchBeanDefinitionException。<br>&ensp;&ensp;&ensp;&ensp;shiro框架在Java Web应用中使用时，本质上是通过filter方式集成的。也就是说，它是遵循过滤器链规则的：filter的执行顺序与在web.xml中定义的顺序一致</filter-name></filter-name></p></blockquote><div class="note info"><p>&ensp;&ensp;&ensp;&ensp;以上所涉及到的配置项在《<a href="/43930f47/" title="Apache Shiro框架">Apache Shiro框架</a>》中都有详细的讲解。</p></div><font color="black" size="5" face="华文行楷">附：配置清单</font><figure class="highlight xml"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span> <span class="attr">ref</span>=<span class="string">"authenticator"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realms"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jdbcRealm"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"secondRealm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager.cookie.maxAge"</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authenticator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.ModularRealmAuthenticator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticationStrategy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.ShiroRealm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"MD5"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"secondRealm"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.realms.SecondRealm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"credentialsMatcher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"SHA1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"1024"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/list.jsp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitionMap"</span> <span class="attr">ref</span>=<span class="string">"filterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        配置哪些页面需要受保护. </span></span><br><span class="line"><span class="comment">        以及访问这些页面需要的权限. </span></span><br><span class="line"><span class="comment">        1). anon 可以被匿名访问</span></span><br><span class="line"><span class="comment">        2). authc 必须认证(即登录)后才可能访问的页面. </span></span><br><span class="line"><span class="comment">        3). logout 登出.</span></span><br><span class="line"><span class="comment">        4). roles 角色过滤器</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">        &lt;property name="filterChainDefinitions"&gt;</span></span><br><span class="line"><span class="comment">            &lt;value&gt;</span></span><br><span class="line"><span class="comment">                /login.jsp = anon</span></span><br><span class="line"><span class="comment">                /shiro/login = anon</span></span><br><span class="line"><span class="comment">                /shiro/logout = logout</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                /user.jsp = roles[user]</span></span><br><span class="line"><span class="comment">                /admin.jsp = roles[admin]</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                # everything else requires authentication:</span></span><br><span class="line"><span class="comment">                /** = authc</span></span><br><span class="line"><span class="comment">            &lt;/value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMap"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-bean</span>=<span class="string">"filterChainDefinitionMapBuilder"</span> <span class="attr">factory-method</span>=<span class="string">"buildFilterChainDefinitionMap"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"filterChainDefinitionMapBuilder"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.factory.FilterChainDefinitionMapBuilder"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroService"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"com.syshlang.shiro.services.ShiroService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Shiro </tag>
            
            <tag> frame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro框架默认过滤器及URL匹配</title>
      <link href="/96db3174/"/>
      <url>/96db3174/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;shiro框架在Java Web应用中使用时，本质上是通过filter方式集成的，也就是说，它是遵循过滤器链规则，其通过一个ShiroFilter入口来拦截需要安全控制的URL，然后进行相应的控制，本文将对Shiro框架默认过滤器及URL匹配做讲解。</p><hr><a id="more"></a><h1 id="Shiro框架默认过滤器"><a href="#Shiro框架默认过滤器" class="headerlink" title="Shiro框架默认过滤器"></a>Shiro框架默认过滤器</h1><h2 id="ShiroFilter的工作原理"><a href="#ShiroFilter的工作原理" class="headerlink" title="ShiroFilter的工作原理"></a>ShiroFilter的工作原理</h2><img title="ShiroFilter的工作原理" data-src="/96db3174/ShiroFilter.png"><blockquote><p>&ensp;&ensp;&ensp;&ensp;filterChainDefinitions是ShiroFilter的属性，在filterChainDefinitions中可以对Url进行配置，看是否可以登录或安全权限的访问,详见后文。<br>&ensp;&ensp;&ensp;&ensp;由上图可以看出：浏览器过来的任何请求都会先经过shiro先过滤，先到达AbstractShiroFilter.executeChain()方法，去根据request解析出来的url找到对应的过滤链，然后执行过滤器链，直到成功才会执行javaweb本身的过滤器。</p></blockquote><h2 id="Shiro框架默认过滤器-1"><a href="#Shiro框架默认过滤器-1" class="headerlink" title="Shiro框架默认过滤器"></a>Shiro框架默认过滤器</h2><p>&ensp;&ensp;&ensp;&ensp;ShiroFilter拦截需要安全控制的URL，然后进行相应的控制,如果当前请求的url匹配 [urls]部分的某个url模式，将会执行其配置的拦截器，例如：anon（anonymous）拦截器表示匿名访问（即不需要登 录即可访问），authc （authentication）拦截器表示需要身份认证通过后才能访问。Shiro 内置了很多默认的拦截器，比如身份验证、授权等相关的。<br>shiro框架内置一系列的过滤器供使用，如下：org.apache.shiro.web.filter.mgt.DefaultFilter.java<br><img title="shiro中默认的过滤器" data-src="/96db3174/shiro-DefaultFilter.png"><br>shiro中默认的过滤器：<br><img title="shiro中默认的过滤器" data-src="/96db3174/ShiroFilterdefault.png"></p><blockquote><p>&ensp;&ensp;&ensp;&ensp;这些过滤器分为两组，一组是<a href="/159c7b0e/" title="认证">认证</a>过滤器，一组是<a href="/d533dab/" title="授权">授权</a>过滤器，后面将会继续讲到。这些过滤器的<span class="exturl" data-url="aHR0cHM6Ly9zaGlyby5hcGFjaGUub3JnL3N0YXRpYy8xLjMuMi9hcGlkb2NzL29yZy9hcGFjaGUvc2hpcm8vd2ViL2ZpbHRlci8=" title="https://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/web/filter/">API<i class="fa fa-external-link"></i></span>可以点击查看。实际开发中，我们可以自定义拦截器来扩展功能以满足项目需求，例如：动态url-角色/权限访问控制的实现、根据 Subject 身份信息获取用户信息绑定到 Request（即设置通用数据）、验证码验证、在线用户信息的保存等。</p></blockquote><hr><h1 id="Shiro框架URL匹配"><a href="#Shiro框架URL匹配" class="headerlink" title="Shiro框架URL匹配"></a>Shiro框架URL匹配</h1><p>&ensp;&ensp;&ensp;&ensp;由于ShiroFilter通过拦截需要安全控制的URL进行相应的控制，urls可能是shiro中处理web项目比较核心的部分。</p><h2 id="RL配置格式"><a href="#RL配置格式" class="headerlink" title="RL配置格式"></a>RL配置格式</h2><blockquote><p>[urls]部分的配置，其格式是：”<font style="font-weight:700;color:#0f0f79" size="3">url=拦截器[参数]，拦截器[参数]</font>“</p></blockquote><h2 id="URL匹配模式"><a href="#URL匹配模式" class="headerlink" title="URL匹配模式"></a>URL匹配模式</h2><blockquote><p>url 模式使用 Ant 风格模式;<br>Ant 路径通配符支持 ?、*、**，注意通配符匹配不包括目录分隔符“/”：<br>&ensp;&ensp;&ensp;&ensp;–<font style="font-weight:700;color:#0f0f79" size="3">?：匹配一个字符</font>，如 /admin? 将匹配 /admin1，但不匹配 /admin 或 /admin/；<br>&ensp;&ensp;&ensp;&ensp;–<font style="font-weight:700;color:#0f0f79" size="3">*：匹配零个或多个字符串</font>，如 /admin 将匹配 /admin、/admin123，但不匹配 /admin/1；<br>&ensp;&ensp;&ensp;&ensp;–<font style="font-weight:700;color:#0f0f79" size="3">**：匹配路径中的零个或多个路径</font>，如 /admin/** 将匹配 /admin/a 或 /admin/a/b。</p></blockquote><h2 id="URL-匹配顺序"><a href="#URL-匹配顺序" class="headerlink" title="URL 匹配顺序"></a>URL 匹配顺序</h2><blockquote><p><font style="font-weight:700;color:#0f0f79" size="3">URL权限采取第一次匹配优先的方式</font>，即从头开始使用第一个匹配的 url 模式对应的拦截器链。<br>如：<br>&ensp;&ensp;&ensp;&ensp;/bb/**=filter1<br>&ensp;&ensp;&ensp;&ensp;/bb/aa=filter2<br>&ensp;&ensp;&ensp;&ensp;/**=filter3<br>&ensp;&ensp;&ensp;&ensp;如果请求的url是“/bb/aa”，因为按照声明顺序进行匹配，那么将使用 filter1 进行拦截。</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Shiro </tag>
            
            <tag> frame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro框架</title>
      <link href="/43930f47/"/>
      <url>/43930f47/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>&ensp;&ensp;&ensp;&ensp;<span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcv" title="http://shiro.apache.org/">Apache Shiro<i class="fa fa-external-link"></i></span>是 Java 的一个强大易用的安全（权限）框架，提供了认证、授权、加密、会话管理、与Web 集成、缓存等功能，可为任何应用提供安全保障，能非常容易的开发出足够好的应用，其不仅可以用在JavaSE 环境，也可以用在 JavaEE 环境。Shiro为解决下列问题提供了保护应用的API：</p><blockquote><ul><li>认证 - 用户身份识别，常被称为用户“登录”；</li><li>授权 - 访问控制；</li><li>密码加密 - 保护或隐藏数据防止被偷窥；</li><li>会话管理 - 每用户相关的时间敏感的状态。</li></ul></blockquote><hr><a id="more"></a><h1 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h1><p>&ensp;&ensp;&ensp;&ensp;<span class="exturl" data-url="aHR0cDovL3NoaXJvLmFwYWNoZS5vcmcv" title="Apache Shiro">Apache Shiro<i class="fa fa-external-link"></i></span>基本功能点如图所示：</p><img title="Apache Shiro功能图" data-src="/43930f47/apache-shiro.png"><blockquote><ul><li><font style="font-weight:700;color:#ea671a;font-size:medium">Authentication </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 身份认证/登录</font>，验证用户是不是拥有相应的身份；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Authorization </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 授权，即权限验证</font>，验证某个已认证的用户是否拥有某个权限；即判断用\户是否能进行什么操作，如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户\对某个资源是否具有某个权限；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Session Manager </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 会话管理</font>，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中,会话可以是普通 JavaSE 环境，也可以是 Web 环境的；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Cryptography </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 加密</font>，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Web Support </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> Web 支持</font>，可以非常容易的集成到Web 环境；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Caching </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 缓存</font>，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Concurrency </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 多线程应用的并发验证</font>，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Testing </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 提供测试支持</font>；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Run As </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</font>；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Remember Me </font>:<font style="font-weight:700;color:#4094c7;font-size:medium"> 记住我</font>，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul></blockquote><hr><h1 id="Shiro-架构"><a href="#Shiro-架构" class="headerlink" title="Shiro 架构"></a>Shiro 架构</h1><h2 id="Shiro外部来看"><a href="#Shiro外部来看" class="headerlink" title="Shiro外部来看"></a>Shiro外部来看</h2><p>&ensp;&ensp;&ensp;&ensp;从外部来看Shiro ，即从应用程序角度的来观察如何使用 Shiro 完成工作：</p><img title="Apache Shiro外部来看" data-src="/43930f47/shiro-frame1.png"><blockquote><ul><li><font style="font-weight:700;color:#ea671a;font-size:medium">Subject </font>:应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外API 核心就是 Subject。Subject 代表了当前“用户”， 这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，如网络爬虫，机器人等；与 Subject 的所有交互都会委托给 SecurityManager；Subject 其实是一个门面，SecurityManager 才是实际的执行者；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">SecurityManager </font>: 安全管理器；即所有与安全有关的操作都会与SecurityManager 交互；且其管理着所有 Subject；可以看出它是 Shiro的核心，它负责与 Shiro 的其他组件进行交互，它相当于 SpringMVC 中DispatcherServlet 的角色；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Realm </font>:Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色/权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource。</li></ul></blockquote><h2 id="Shiro内部来看"><a href="#Shiro内部来看" class="headerlink" title="Shiro内部来看"></a>Shiro内部来看</h2><img title="Apache Shiro内部来看" data-src="/43930f47/shiro-frame2.png"><blockquote><ul><li><font style="font-weight:700;color:#ea671a;font-size:medium">Subject </font>:任何可以与应用交互的“用户”；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">SecurityManager </font>:相当于SpringMVC 中的 DispatcherServlet；是 Shiro 的心脏所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证、授权、会话及缓存的管理。</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Authenticator </font>:负责 Subject 认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Authorizer </font>:授权器、即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Realm </font>:可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC 实现，也可以是内存实现等等；由用户提供；所以一般在应用中都需要实现自己的 Realm</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">SessionManager </font>: 管理 Session 生命周期的组件；而 Shiro并不仅仅可以用在 Web环境，也可以用在如普通的 JavaSE 环境；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">CacheManager </font>: 缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能；</li><li><font style="font-weight:700;color:#ea671a;font-size:medium">Cryptography </font>: 密码模块，Shiro 提高了一些常见的加密组件用于如密码加密/解密。</li></ul></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Shiro </tag>
            
            <tag> frame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringData组件之自定义Repository方法</title>
      <link href="/8f305ba7/"/>
      <url>/8f305ba7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="为某一个-Repository-上添加自定义方法"><a href="#为某一个-Repository-上添加自定义方法" class="headerlink" title="为某一个 Repository 上添加自定义方法"></a>为某一个 Repository 上添加自定义方法</h1><blockquote><p>1、定义一个接口: 声明要添加的, 并自实现的方法；</p></blockquote><p>PersonDao.java<br></p><figure class="highlight java"><figcaption><span>PersonDao.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//自定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><blockquote><p>2、提供该接口的实现类: 类名需在要声明的 Repository 后添加 Impl, 并实现方法；</p></blockquote><p>PersonRepsotoryImpl.java<br></p><figure class="highlight java"><figcaption><span>PersonRepsotoryImpl.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规约：命名必须符合声明使用的 Repsotory 接口名 +  Impl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRepsotoryImpl</span> <span class="keyword">implements</span> <span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = entityManager.find(Person.class, <span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="string">"--&gt;"</span> + person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>3、声明 Repository 接口, 并继承自定义的接口；</p></blockquote><p>PersonRepsotory.java<br></p><figure class="highlight java"><figcaption><span>PersonRepsotory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepsotory</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">JpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt;,<span class="title">PersonDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><img title="为某一个 Repository 上添加自定义方法" data-src="/8f305ba7/repository-impl-customize.png"><div class="note warning"><p>注意：默认情况下, Spring Data 会在 base-package 中查找 “接口名Impl” 作为实现类,也可以通过　repository-impl-postfix　声明后缀,如果有两个以上类名为PersonRepsotoryImpl的类，Spring Data Jpa会抛出错误。</p></div><hr><h1 id="为所有的-Repository-都添加自实现的方法"><a href="#为所有的-Repository-都添加自实现的方法" class="headerlink" title="为所有的 Repository 都添加自实现的方法"></a>为所有的 Repository 都添加自实现的方法</h1><blockquote><p>1、声明一个接口, 在该接口中声明需要自定义的方法, 且该接口需要继承 Spring Data 的 Repository；</p></blockquote><p>CommonMethod.java<br></p><figure class="highlight java"><figcaption><span>CommonMethod.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommonMethod</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>2、提供所声明的接口的实现类. 且继承 SimpleJpaRepository, 并提供方法的实现；</p></blockquote><p>CommonMethodImpl.java<br></p><figure class="highlight java"><figcaption><span>CommonMethodImpl.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span> CommonMethodImpl.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonMethodImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">CommonMethod</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonMethodImpl</span><span class="params">(Class&lt;T&gt; domainClass, EntityManager em)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(domainClass, em);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"...METHOD TEST..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>3、定义 JpaRepositoryFactoryBean 的实现类, 使其生成 1) 定义的接口实现类的对象；</p></blockquote><p>CommonJpaRepositoryFactoryBean.java<br></p><figure class="highlight java"><figcaption><span>CommonJpaRepositoryFactoryBean.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonJpaRepositoryFactoryBean</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">S</span>, <span class="title">ID</span>&gt;, <span class="title">S</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">JpaRepositoryFactoryBean</span>&lt;<span class="title">T</span>, <span class="title">S</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RepositoryFactorySupport <span class="title">createRepositoryFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            EntityManager entityManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonRepositoryFactory(entityManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonRepositoryFactory</span>&lt;<span class="title">T</span>, <span class="title">I</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">JpaRepositoryFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CommonRepositoryFactory</span><span class="params">(EntityManager entityManager)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(entityManager);</span><br><span class="line">            <span class="keyword">this</span>.entityManager = entityManager;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">getTargetRepository</span><span class="params">(RepositoryMetadata metadata)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonMethodImpl&lt;T, I&gt;(</span><br><span class="line">                    (Class&lt;T&gt;) metadata.getDomainType(), entityManager);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; getRepositoryBaseClass(RepositoryMetadata metadata) &#123;</span><br><span class="line">            <span class="keyword">return</span> CommonMethod.class;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>4、修改applicationContext.xml文件 &lt;jpa:repositories/&gt; 节点的 factory-class 属性指向CommonJpaRepositoryFactoryBean.java 的全类名；</p></blockquote><p>applicationContext.xml<br></p><figure class="highlight xml"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- base-package: 扫描 Repository Bean 所在的 package --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">factory-class</span>=<span class="string">"com.syshlang.repository.common.impl.CommonJpaRepositoryFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><div class="note warning"><p>注意：全局的扩展实现类不要用 Imp 作为后缀名, 或为全局扩展接口添加 @NoRepositoryBean 注解告知 Spring Data: Spring Data 不把其作为 Repository。</p></div><hr><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringData </tag>
            
            <tag> Repository </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringData组件之Repository接口方法定义规范</title>
      <link href="/70fbc0d8/"/>
      <url>/70fbc0d8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="简单条件查询"><a href="#简单条件查询" class="headerlink" title="简单条件查询"></a>简单条件查询</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp; 简单条件查询,查询某一个实体类或者集合,按照 Spring Data 的规范，查询方法以 find | read | get 开头，涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性以首字母大写。<br>&ensp;&ensp;&ensp;&ensp;&ensp; 例如：定义一个 Entity 实体类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&ensp;&ensp;&ensp;&ensp;&ensp; 使用And条件连接时，应这样写：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件的属性名称与个数要与参数的位置与个数一一对应</span></span><br><span class="line">findByLastNameAndFirstName(String lastName,String firstName);</span><br></pre></td></tr></table></figure><p></p><hr><a id="more"></a><h1 id="支持的关键字"><a href="#支持的关键字" class="headerlink" title="支持的关键字"></a>支持的关键字</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;直接在接口中定义查询方法，如果是符合规范的，可以不用写实现，目前支持的关键字写法如下：<br><img title="支持的关键字" data-src="/70fbc0d8/springdata-supported-keywords1.png"><br><img title="支持的关键字" data-src="/70fbc0d8/springdata-supported-keywords2.png"></p><h1 id="查询方法解析流程"><a href="#查询方法解析流程" class="headerlink" title="查询方法解析流程"></a>查询方法解析流程</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;假如创建查询：findByUserDepUuid()，假设查询实体为Doc，框架在解析该方法时，步骤如下：</p><blockquote><ul><li>首先剔除 findBy，然后对剩下的属性进行解析；</li><li>先判断 userDepUuid （根据 POJO 规范，首字母变为小写）是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续下一步；</li><li>从右往左截取第一个大写字母开头的字符串(此处为Uuid)，然后检查剩下的字符串是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复步骤，继续从右往左截取；最后假设 user 为查询实体的一个属性；</li><li>接着处理剩下部分（DepUuid），先判断 user 所对应的类型是否有depUuid属性，如果有，则表示该方法最终是根据 “ Doc.user.depUuid” 的取值进行查询；否则继续按照上一步骤的规则从右往左截取，最终表示根据 “Doc.user.dep.uuid” 的值进行查询；</li><li>可能会存在一种特殊情况，比如 Doc包含一个 user 的属性，也有一个 userDep 属性，此时会存在混淆。可以明确在属性之间加上 “_” 以显式表达意图，比如 “findByUser_DepUuid()” 或者 “findByUserDep_uuid()”。即支持属性的级联查询， 若当前类有符合条件的属性, 则优先使用, 而不使用级联属性；若需要使用级联属性, 则属性之间使用 _ 进行连接。</li></ul></blockquote><h1 id="使用-Query-注解"><a href="#使用-Query-注解" class="headerlink" title="使用 @Query 注解"></a>使用 @Query 注解</h1><h2 id="使用-Query自定义查询"><a href="#使用-Query自定义查询" class="headerlink" title="使用@Query自定义查询"></a>使用@Query自定义查询</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;这种查询可以声明在 Repository 方法中，摆脱像命名查询那样的约束，将查询直接在相应的接口方法中声明，结构更为清晰，这是 Spring data 的特有实现。例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询 id 值最大的那个 Person</span></span><br><span class="line"><span class="comment">//使用 @Query 注解可以自定义 JPQL 语句以实现更灵活的查询</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.id = (SELECT max(p2.id) FROM Person p2)"</span>)</span><br><span class="line"><span class="function">Person <span class="title">getMaxIdPerson</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p></p><h2 id="索引参数与命名参数"><a href="#索引参数与命名参数" class="headerlink" title="索引参数与命名参数"></a>索引参数与命名参数</h2><blockquote><ul><li>索引参数如下所示，索引值从1开始，查询中 ”?X” 个数需要与方法定义的参数个数相一致，并且顺序也要一致。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为 @Query 注解传递参数的方式1: 使用占位符. </span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName = ?1 AND p.email = ?2"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationParams1</span><span class="params">(String lastName, String email)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>命名参数（推荐使用这种方式）：可以定义好参数名，赋值时采用@Param(“参数名”)，而不用管顺序。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为 @Query 注解传递参数的方式1: 命名参数的方式. </span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName = :lastName AND p.email = :email"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationParams2</span><span class="params">(@Param(<span class="string">"email"</span>)</span> String email, @<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span> String lastName)</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果是 @Query 中有 LIKE 关键字，后面的参数需要前面或者后面加 %，这样在传递参数值的时候就可以不加 %</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SpringData 允许在占位符上添加 %%. </span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName LIKE %?1% OR p.email LIKE %?2%"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationLikeParam</span><span class="params">(String lastName, String email)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SpringData 允许在占位符上添加 %%. </span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"SELECT p FROM Person p WHERE p.lastName LIKE %:lastName% OR p.email LIKE %:email%"</span>)</span><br><span class="line"><span class="function">List&lt;Person&gt; <span class="title">testQueryAnnotationLikeParam2</span><span class="params">(@Param(<span class="string">"email"</span>)</span> String email, @<span class="title">Param</span><span class="params">(<span class="string">"lastName"</span>)</span> String lastName)</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>还可以使用@Query来指定本地查询，只要设置nativeQuery为true，比如：</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置 nativeQuery=true 即可以使用原生的 SQL 查询</span></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"SELECT count(id) FROM jpa_persons"</span>, nativeQuery=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getTotalCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(value=<span class="string">"select * from tbl_user where name like %?1"</span> ,nativeQuery=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserModel&gt; <span class="title">findByUuidOrAge</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="Modifying-注解和事务"><a href="#Modifying-注解和事务" class="headerlink" title="@Modifying 注解和事务"></a>@Modifying 注解和事务</h1><h2 id="Query-与-Modifying-执行更新操作"><a href="#Query-与-Modifying-执行更新操作" class="headerlink" title="@Query 与 @Modifying 执行更新操作"></a>@Query 与 @Modifying 执行更新操作</h2><blockquote><ul><li>@Query 与 @Modifying 这两个 annotation一起声明，可定义个性化更新操作，例如只涉及某些字段更新时最为常用，示例如下：</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 可以通过自定义的 JPQL 完成 UPDATE 和 DELETE 操作. 注意: JPQL 不支持使用 INSERT</span></span><br><span class="line"><span class="comment">* 在 <span class="doctag">@Query</span> 注解中编写 JPQL 语句, 但必须使用 <span class="doctag">@Modifying</span> 进行修饰. 以通知 SpringData, 这是一个 </span></span><br><span class="line"><span class="comment">* UPDATE 或 DELETE 操作</span></span><br><span class="line"><span class="comment">* UPDATE 或 DELETE 操作需要使用事务, 此时需要定义 Service 层. 在 Service 层的方法上添加事务操作.</span></span><br><span class="line"><span class="comment">* 默认情况下, SpringData 的每个方法上有事务, 但都是一个只读事务. 他们不能完成修改操作!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"UPDATE Person p SET p.email = :email WHERE id = :id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePersonEmail</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"email"</span>)</span> String email)</span>;</span><br></pre></td></tr></table></figure><div class="note warning"><p>注意：方法的返回值应该是 int，表示更新语句所影响的行数；在调用的地方必须加事务，没有事务不能正常执行</p></div><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><ul><li>Spring Data 提供了默认的事务处理方式，即所有的查询均声明为只读事务。</li><li>对于自定义的方法，如需改变 Spring Data 提供的事务默认方式，可以在方法上注解 @Transactional 声明 。</li><li>进行多个 Repository 操作时，也应该使它们在同一个事务中处理，按照分层架构的思想，这部分属于业务逻辑层，因此，需要在 Service 层实现对多个 Repository 的调用，并在相应的方法上声明事务。</li></ul></blockquote><p>PersonRepsotory.java<br></p><figure class="highlight java"><figcaption><span>PersonRepsotory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepsotory</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">    <span class="title">JpaRepository</span>&lt;<span class="title">Person</span>, <span class="title">Integer</span>&gt;,</span></span><br><span class="line"><span class="class"><span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Person</span>&gt;, <span class="title">PersonDao</span></span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"UPDATE Person p SET p.email = :email WHERE id = :id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatePersonEmail</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"email"</span>)</span> String email)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>PersonService.java<br></p><figure class="highlight java"><figcaption><span>PersonService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> PersonRepsotory personRepsotory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">savePersons</span><span class="params">(List&lt;Person&gt; persons)</span></span>&#123;</span><br><span class="line">personRepsotory.save(persons);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePersonEmail</span><span class="params">(String email, Integer id)</span></span>&#123;</span><br><span class="line">personRepsotory.updatePersonEmail(id, email);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringData </tag>
            
            <tag> Repository </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringData组件之Repository接口概述</title>
      <link href="/a6a04339/"/>
      <url>/a6a04339/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;在《<a href="/8b6d97/" title="Spring框架组件之Spring Data">Spring框架组件之Spring Data</a>》中,讲述Spring框架组件SpringData使用时提到了到Spring Data组件一个很重要的接口Repository接口，本篇文章在《<a href="/8b6d97/" title="Spring框架组件之Spring Data">Spring框架组件之Spring Data</a>》的基础上着重讲述一下Repository接口。</p><hr><a id="more"></a><h1 id="Repository-接口概述"><a href="#Repository-接口概述" class="headerlink" title="Repository 接口概述"></a>Repository 接口概述</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;Repository 接口是 Spring Data的一个核心接口，它不提供任何方法，开发者需要在自己定义的接口中声明需要的方法；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;Spring Data可以让我们自定义接口，只要遵循 Spring Data的规范，就无需写实现类,例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepsotory</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;与继承 Repository 等价的一种方式，就是在持久层接口上使用 @RepositoryDefinition 注解，并为其指定 domainClass 和 idClass 属性。如下两种方式是完全等价的,如下图</p></blockquote><img title="Repository" data-src="/a6a04339/SpringData-Repository.png"><hr><h1 id="Repository-的子接口"><a href="#Repository-的子接口" class="headerlink" title="Repository 的子接口"></a>Repository 的子接口</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;基础的 Repository 提供了最基本的数据访问功能，其几个子接口则扩展了一些功能。它们的继承关系如下：</p></blockquote><img title="Repository" data-src="/a6a04339/SpringData-Repository-interface.png"><blockquote><ul><li><font color="#00b8ff" size="3">-Repository</font>：仅仅是一个标识，表明任何继承它的均为仓库接口类</li><li><font color="#00b8ff" size="3">-CrudRepository</font>&lt;：继承 Repository，实现了一组 CRUD 相关的方法</li><li><font color="#00b8ff" size="3">-PagingAndSortingRepository</font>：继承 CrudRepository，实现了一组分页排序相关的方法</li><li><font color="#00b8ff" size="3">-JpaRepository</font>：继承 PagingAndSortingRepository，实现一组 JPA 规范相关的方法</li><li><font color="#00b8ff" size="3">-自定义的 XxxxRepository</font>：需要继承 JpaRepository，这样的 XxxxRepository 接口就具备了通用的数据访问控制层的能力</li><li><font color="#00b8ff" size="3">-JpaSpecificationExecutor</font>：不属于Repository体系，实现一组 JPA Criteria 查询相关的方法。</li></ul></blockquote><h2 id="CrudRepository-接口"><a href="#CrudRepository-接口" class="headerlink" title="CrudRepository 接口"></a>CrudRepository 接口</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;CrudRepository 接口提供了最基本的对实体类的添删改查操作</p></blockquote><blockquote><ul><li><font color="#ea671a" size="3">T save(T entity); </font>//保存单个实体</li><li><font color="#ea671a" size="3">Iterable<t>save(Iterable&lt;? extends T&gt; entities);</t></font>//保存集合</li><li><font color="#ea671a" size="3">T findOne(ID id);</font>//根据id查找实体</li><li><font color="#ea671a" size="3">boolean exists(ID id);</font>//根据id判断实体是否</li><li><font color="#ea671a" size="3">Iterable<t>findAll();</t></font>//查询所有实体,不用或慎用!</li><li><font color="#ea671a" size="3">long count();</font>//查询实体数量</li><li><font color="#ea671a" size="3">void delete(ID id);</font>//根据Id删除实体</li><li><font color="#ea671a" size="3">void delete(T entity);</font>//删除一个实体</li><li><font color="#ea671a" size="3">void delete(Iterable&lt;? extends T&gt; entities);</font>//删除一个实体的集合</li><li><font color="#ea671a" size="3">void deleteAll();</font>//删除所有实体,不用或慎用!</li></ul></blockquote><h2 id="PagingAndSortingRepository接口"><a href="#PagingAndSortingRepository接口" class="headerlink" title="PagingAndSortingRepository接口"></a>PagingAndSortingRepository接口</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;该接口提供了分页与排序功能</p></blockquote><blockquote><ul><li><font color="#ea671a" size="3">Iterable<t>findAll(Sort sort);</t></font>//排序</li><li><font color="#ea671a" size="3">Page<t>findAll(Pageable pageable);</t></font>//分页查询（含排序功能）</li></ul></blockquote><h2 id="JpaRepository-接口"><a href="#JpaRepository-接口" class="headerlink" title="JpaRepository 接口"></a>JpaRepository 接口</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;该接口提供了JPA的相关功能</p></blockquote><blockquote><ul><li><font color="#ea671a" size="3">List<t>findAll();</t></font>//查找所有实体</li><li><font color="#ea671a" size="3">List<t>findAll(Sort sort);</t></font>//排序、查找所有实体</li><li><font color="#ea671a" size="3">List<t>save(Iterable&lt;? extends T&gt; entities);</t></font>//保存集合</li><li><font color="#ea671a" size="3">void flush();</font>//执行缓存与数据库同步</li><li><font color="#ea671a" size="3">T saveAndFlush(T entity);</font>//强制执行持久化</li><li><font color="#ea671a" size="3">void deleteInBatch(Iterable<t>entities);</t></font>//删除一个实体集合</li></ul></blockquote><h2 id="JpaSpecificationExecutor接口"><a href="#JpaSpecificationExecutor接口" class="headerlink" title="JpaSpecificationExecutor接口"></a>JpaSpecificationExecutor接口</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;该接口不属于Repository体系，它实现一组 JPA Criteria 查询相关的方法</p></blockquote><img title="JpaSpecificationExecutor接口" data-src="/a6a04339/JpaSpecificationExecutor.png"><ul><li><font color="#00b8ff" size="3">-Specification</font>：封装 JPA Criteria 查询条件。通常使用匿名内部类的方式来创建该接口的对象</li></ul><h2 id="自定义-Repository-方法"><a href="#自定义-Repository-方法" class="headerlink" title="自定义 Repository 方法"></a>自定义 Repository 方法</h2><p>&ensp;&ensp;&ensp;&ensp;为某一个 Repository 上添加自定义方法,详见《<a href="/8f305ba7/" title="SpringData组件之自定义Repository方法">SpringData组件之自定义Repository方法</a>》。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringData </tag>
            
            <tag> Repository </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架组件之Spring Data</title>
      <link href="/8b6d97/"/>
      <url>/8b6d97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;本篇文章主要记录本人在学习使用Spring框架组件Spring Data的过程中一些总结及感悟，学习过程中通过新建项目边学边练来加深理解</p></blockquote><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=SpringData&type=watch&count=true&size=large&v=2" frameborder="0" scrolling="0" width="160px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=SpringData&type=fork&count=true&size=large" frameborder="0" scrolling="0" width="158px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=SpringData&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe><hr><a id="more"></a><h1 id="Spring-Data-概述"><a href="#Spring-Data-概述" class="headerlink" title="Spring Data 概述"></a>Spring Data 概述</h1><blockquote><ul><li>Spring Data是Spring 的一个子项目。用于简化数据库访问，支持<font style="font-weight:700;font-style:italic;color:#d65151">NoSQL</font>和<font style="font-weight:700;font-style:italic;color:#d65151">关系数据存储</font> 。其主要目标是使数据库的访问变得方便快捷。</li><li>Spring Data 项目所支持<font style="font-weight:700;font-style:italic;color:#d65151">NoSQL</font>存储：<br>&ensp;&ensp;&ensp;&ensp;-MongoDB （文档数据库）<br>&ensp;&ensp;&ensp;&ensp;-Neo4j（图形数据库）<br>&ensp;&ensp;&ensp;&ensp;-Redis（键/值存储）<br>&ensp;&ensp;&ensp;&ensp;-Hbase（列族数据库）</li><li>Spring Data 项目所支持的<font style="font-weight:700;font-style:italic;color:#d65151">关系数据存储</font>技术：<br>&ensp;&ensp;&ensp;&ensp;-JDBC<br>&ensp;&ensp;&ensp;&ensp;-JPA(本次采用)</li><li>JPA Spring Data致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就只是<font style="font-weight:700;font-style:italic;color:#d65151">声明持久层的接口</font>，其他都交给 Spring Data JPA 来帮你完成！</li><li>框架怎么可能代替开发者实现业务逻辑呢？比如：当有一个 UserDao.findUserById() 这样一个方法声明，大致应该能判断出这是根据给定条件的 ID 查询出满足条件的 User 对象。Spring Data JPA 做的便是规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。</li></ul></blockquote><hr><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>&ensp;&ensp;&ensp;&ensp;练习项目采用Maven+Spring Data，具体jar包及环境配置此处略，可参照<iframe src="https://ghbtns.com/github-btn.html?user=syshlang&repo=SpringData&type=star&count=true&size=large" width="160" height="30" frameborder="0" allowfullscreen></iframe></p><hr><h1 id="Spring-Data-、JPA进行持久层开发步骤"><a href="#Spring-Data-、JPA进行持久层开发步骤" class="headerlink" title="Spring Data 、JPA进行持久层开发步骤"></a>Spring Data 、JPA进行持久层开发步骤</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;使用 Spring Data JPA 进行持久层开发需要的四个步骤：</p><h2 id="配置-Spring-整合-JPA"><a href="#配置-Spring-整合-JPA" class="headerlink" title="配置 Spring 整合 JPA"></a>配置 Spring 整合 JPA</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 配置数据源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>  <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置其他属性 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!-- 2. 配置 JPA 的 EntityManagerFactory --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--jpa是是实现产品的适配器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--扫描加注解的包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.syshlang"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaProperties"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 二级缓存相关 --&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               &lt;prop key="hibernate.cache.region.factory_class"&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">               &lt;prop key="net.sf.ehcache.configurationResourceName"&gt;ehcache-hibernate.xml&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">               --&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 生成的数据表的列的映射策略 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.ejb.naming_strategy"</span>&gt;</span>org.hibernate.cfg.ImprovedNamingStrategy<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- hibernate 基本属性 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5InnoDBDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!-- 3. 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">&lt;!-- 4. 配置支持注解的事务 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在Spring-配置文件中配置-Spring-Data"><a href="#在Spring-配置文件中配置-Spring-Data" class="headerlink" title="在Spring 配置文件中配置 Spring Data"></a>在Spring 配置文件中配置 Spring Data</h2><p>&ensp;&ensp;&ensp;&ensp;在Spring 配置文件中配置 Spring Data，让Spring为声明的接口创建代理对象。配置了 &lt;jpa:repositories&gt;后，Spring 初始化容器时将会扫描 base-package指定的包目录及其子目录，为继承 Repository 或其子接口的接口创建代理对象，并将代理对象注册为Spring Bean，业务层便可以通过Spring自动封装的特性来直接使用该对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5. 配置 SpringData --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 加入  jpa 的命名空间 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- base-package: 扫描 Repository Bean 所在的 package --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明持久层的接口"><a href="#声明持久层的接口" class="headerlink" title="声明持久层的接口"></a>声明持久层的接口</h2><p>&ensp;&ensp;&ensp;&ensp;声明持久层的接口，该接口继承Repository，Repository 是一个标记型接口，它不包含任何方法，如必要，Spring Data 可实现 Repository其他子接口，其中定义了一些常用的增删改查，以及分页相关的方法。</p><p>持久层的接口:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2018. GRGBanking</span></span><br><span class="line"><span class="comment"> * @File: PersonRepsotory.java</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Author: sunys</span></span><br><span class="line"><span class="comment"> * @Date: 18-6-7 下午9:49</span></span><br><span class="line"><span class="comment"> * @since:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.syshlang.repository;</span><br><span class="line"><span class="keyword">import</span> com.syshlang.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.Repository;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepsotory</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>实体类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2018. GRGBanking</span></span><br><span class="line"><span class="comment"> * @File: Person.java</span></span><br><span class="line"><span class="comment"> * @Description: </span></span><br><span class="line"><span class="comment"> * @Author: sunys</span></span><br><span class="line"><span class="comment"> * @Date: 18-6-7 下午9:54</span></span><br><span class="line"><span class="comment"> * @since:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.syshlang.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"JPA_PERSONS"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", lastName="</span> + lastName + <span class="string">", email="</span></span><br><span class="line">                + email + <span class="string">", brith="</span> + birth + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div class="note primary"><ul><li>Repository 是一个空接口. 即是一个标记接口;</li><li>若我们定义的接口继承了 Repository, 则该接口会被 IOC 容器识别为一个 Repository Bean.纳入到 IOC 容器中. 进而可以在该接口中定义满足一定规范的方法;</li><li>实际上, 也可以通过 @RepositoryDefinition 注解来替代继承 Repository 接口。</li></ul></div><div class="note info"><p>关于Repository接口相关概述参照《<a href="/a6a04339/" title="SpringData组件之Repository接口概述">SpringData组件之Repository接口概述</a>》。</p></div><h2 id="在接口中声明需要的方法"><a href="#在接口中声明需要的方法" class="headerlink" title="在接口中声明需要的方法"></a>在接口中声明需要的方法</h2><p>&ensp;&ensp;&ensp;&ensp;在接口中声明需要的方法，Spring Data 将根据给定的策略来为其生成实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2018. GRGBanking</span></span><br><span class="line"><span class="comment"> * @File: PersonRepsotory.java</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Author: sunys</span></span><br><span class="line"><span class="comment"> * @Date: 18-6-7 下午9:49</span></span><br><span class="line"><span class="comment"> * @since:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.syshlang.repository;</span><br><span class="line"><span class="keyword">import</span> com.syshlang.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepsotory</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 lastName 来获取对应的 Person</span></span><br><span class="line">    <span class="function">Person <span class="title">getByLastName</span><span class="params">(String lastName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpringData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PersonRepsotory personRepsotory = ctx.getBean(PersonRepsotory.class);</span><br><span class="line">    Person person = personRepsotory.getByLastName(<span class="string">"AA"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>测试结果：<br></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Hibernate: </span></span><br><span class="line"><span class="function">      <span class="title">select</span></span></span><br><span class="line"><span class="function">          <span class="title">person0_.id</span> <span class="title">as</span> <span class="title">id1</span>,</span></span><br><span class="line"><span class="function">          <span class="title">person0_.birth</span> <span class="title">as</span> <span class="title">birth2</span>,</span></span><br><span class="line"><span class="function">          <span class="title">person0_.email</span> <span class="title">as</span> <span class="title">email3</span>,</span></span><br><span class="line"><span class="function">          <span class="title">person0_.last_name</span> <span class="title">as</span> <span class="title">last_nam4</span></span></span><br><span class="line"><span class="function">      <span class="title">from</span></span></span><br><span class="line"><span class="function">          <span class="title">jpa_persons</span> <span class="title">person0_</span> </span></span><br><span class="line"><span class="function">      <span class="title">where</span></span></span><br><span class="line"><span class="function">          <span class="title">person0_.last_name</span>=?</span></span><br><span class="line"><span class="function">  <span class="title">Person</span> [<span class="title">id</span>=1, <span class="title">lastName</span>=<span class="title">AA</span>, <span class="title">email</span>=<span class="title">syshlang</span>@163.<span class="title">com</span>, <span class="title">brith</span>=2018-06-07 13:42:02.0]</span></span><br></pre></td></tr></table></figure><p></p><hr><p>在 Repository 子接口中声明方法:<br></p><div class="note warning"><ol><li>不是随便声明的. 而需要符合一定的规范；</li><li>查询方法以 find | read | get 开头；</li><li>涉及条件查询时，条件的属性用条件关键字连接；</li><li>要注意的是：条件属性以首字母大写；</li><li>支持属性的级联查询. 若当前类有符合条件的属性, 则优先使用, 而不使用级联属性；</li><li>若需要使用级联属性, 则属性之间使用 _ 进行连接。</li></ol></div><br><div class="note info"><p>关于Repository子接口中声明方法参照《<a href="/70fbc0d8/" title="SpringData组件之Repository接口方法定义规范">SpringData组件之Repository接口方法定义规范</a>》。</p></div><p></p><hr><p><font color="black" size="5" face="华文行楷">附：配置清单</font><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span>  <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置其他属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 JPA 的 EntityManagerFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"entityManagerFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jpa是是实现产品的适配器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaVendorAdapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描加注解的包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.syshlang"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 二级缓存相关 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                &lt;prop key="hibernate.cache.region.factory_class"&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">                &lt;prop key="net.sf.ehcache.configurationResourceName"&gt;ehcache-hibernate.xml&lt;/prop&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 生成的数据表的列的映射策略 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.ejb.naming_strategy"</span>&gt;</span>org.hibernate.cfg.ImprovedNamingStrategy<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- hibernate 基本属性 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5InnoDBDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 配置支持注解的事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5. 配置 SpringData --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加入  jpa 的命名空间 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- base-package: 扫描 Repository Bean 所在的 package --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang"</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">entity-manager-factory-ref</span>=<span class="string">"entityManagerFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jpa:repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用HttpServletRequestWrapper重写Request请求参数</title>
      <link href="/79c4401c/"/>
      <url>/79c4401c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;在<a href="/9a4c71ab/" title="上一篇文章">上一篇文章</a>中讲述到，在做一个PHP语言开发的系统集成JAVA语言开发的系统功能时遇到获取传参的问题，最终是使用<strong>request.getInputStream()</strong>方式使问题得以解决，但是同时又带来了新的问题，request.getInputStream()本身获取到的是request请求内容的字节流，然后使用IOUtils.toString(IOUtils.toString)转为字符串，这种方式无法满足我的Controller层(springMVC)参数与实例对象的映射，增加了业务层处理参数的复杂度。</p></blockquote><a id="more"></a><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>&ensp;&ensp;&ensp;&ensp;既然request.getInputStream()获取参数无法满足Controller层需求，request.getParameter()方式可以满足但又无法获取参数，那何不先用request.getInputStream()获取到参数之后再重新设置request的参数以满足Controller层需求。但是，对于HttpServletRequest而言，貌似只有使用setAttribute(String name, Object o) 这个方法可以设置参数，经过尝试之后发现：使用 setAttribute(String name, Object o) 方法来重新设置参数不可行，因为在Controller中获取参数本质上还是调用的ServletRequest的public String getParameter(String name) 或者 public String[] getParameterValues(String name) 方法，了解一番之后，才明白需要使用装饰模式来复写这些方法才可行。因此，决定使用HttpServletRequestWrapper重写Request请求参数。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>&ensp;&ensp;&ensp;&ensp;Filter能在request到达servlet的服务方法之前拦截HttpServletRequest对象，而在服务方法转移控制后又能拦截HttpServletResponse对象，因此，可以使用filter来实现特定的任务————重写Request请求参数。</p><h2 id="使用HttpServletRequestWrapper重写"><a href="#使用HttpServletRequestWrapper重写" class="headerlink" title="使用HttpServletRequestWrapper重写"></a>使用HttpServletRequestWrapper重写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2017 GRGBanking</span></span><br><span class="line"><span class="comment"> * @File: ChangeRequestWrapper.java</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Author: sunys</span></span><br><span class="line"><span class="comment"> * @Date: 18-4-24 下午3:31</span></span><br><span class="line"><span class="comment"> * @since:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.grgbanking.framework.core.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sunys on 2018/4/24. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String[]&gt; parameterMap; <span class="comment">// 所有参数的Map集合</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChangeRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        parameterMap = request.getParameterMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写几个HttpServletRequestWrapper中的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有参数名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回所有参数名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;String&gt;(parameterMap.keySet());</span><br><span class="line">        <span class="keyword">return</span> vector.elements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的值，如果有重复的参数名，则返回第一个的值 接收一般变量 ，如text类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 指定参数名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定参数名的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String[] results = parameterMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (results != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> results[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定参数名的所有值的数组，如：checkbox的所有数据</span></span><br><span class="line"><span class="comment">     * 接收数组变量 ，如checkobx类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameterMap</span><span class="params">(Map&lt;String, String[]&gt; parameterMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parameterMap = parameterMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web-xml增加一个过滤器处理"><a href="#web-xml增加一个过滤器处理" class="headerlink" title="web.xml增加一个过滤器处理"></a>web.xml增加一个过滤器处理</h2><figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>securityAccessFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.grgbanking.framework.core.common.SecurityAccessFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>securityAccessFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;所有的请求,都会验证此filter。</p><h2 id="新增Filter实现特定的任务"><a href="#新增Filter实现特定的任务" class="headerlink" title="新增Filter实现特定的任务"></a>新增Filter实现特定的任务</h2><figure class="highlight java"><figcaption><span>SecurityAccessFilter.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2017 GRGBanking</span></span><br><span class="line"><span class="comment"> * @File: SecurityAccessFilter.java</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Author: sunys</span></span><br><span class="line"><span class="comment"> * @Date: 18-5-4 上午9:33</span></span><br><span class="line"><span class="comment"> * @since:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.grgbanking.framework.core.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.grgbanking.framework.utils.AjaxUtils;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过滤器，在web.xml中配置，指定对哪些路径进行过滤。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityAccessFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Logger logger = Logger.getLogger(SecurityAccessFilter.class);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest arg0, ServletResponse arg1,</span></span></span><br><span class="line"><span class="function"><span class="params">FilterChain arg2)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">HttpServletRequest request = (HttpServletRequest) arg0;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) arg1;</span><br><span class="line">String uri = request.getRequestURI();</span><br><span class="line"><span class="keyword">if</span> (uri.endsWith(<span class="string">".php"</span>))&#123;</span><br><span class="line"><span class="comment">//首先获取参数字符串</span></span><br><span class="line">String json = <span class="keyword">new</span> String(IOUtils.toString(request.getInputStream()));</span><br><span class="line">ServletRequest arg_tem = changeParam(json,request,response);</span><br><span class="line"><span class="keyword">if</span>(arg_tem != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//使用复写后的wrapper</span></span><br><span class="line">arg0 = arg_tem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arg2.doFilter(arg0, arg1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ServletRequest <span class="title">changeParam</span><span class="params">(String json, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(json);</span><br><span class="line"><span class="comment">// 调用ChangeRequestWrapper 改变参数</span></span><br><span class="line">ChangeRequestWrapper changeRequestWrapper = <span class="keyword">new</span> ChangeRequestWrapper(request);</span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = <span class="keyword">new</span> HashMap&lt;&gt;(changeRequestWrapper.getParameterMap());</span><br><span class="line">JSONObject jsonObject = JSONObject.fromObject(json);</span><br><span class="line">String param =  jsonObject.get(<span class="string">"param"</span>).toString();</span><br><span class="line">parameterMap.put(<span class="string">"param"</span>,<span class="keyword">new</span> String[]&#123;param&#125;);</span><br><span class="line">changeRequestWrapper.setParameterMap(parameterMap);</span><br><span class="line"><span class="keyword">return</span> changeRequestWrapper;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">AjaxUtils.renderFailureOther(<span class="string">"解析请求参数时发生异常！"</span>, request,response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Request </tag>
            
            <tag> HttpServletRequestWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP、JAVA关于post请求数据接收的处理</title>
      <link href="/9a4c71ab/"/>
      <url>/9a4c71ab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;最近在做项目时遇到这样一个问题，一个客户公司的智能柜管理系统想集成我们公司开发的电子锁系统，我负责相关接口的对接及开发，在一切准备工作就绪之后，进行接口联调时遇到传参问题的困扰。对方系统是采用PHP语言开发，我方系统是采用JAVA语言开发，接口约定采用post请求方式，以json格式传输数据，但是在实际接口联调中，PHP端使用curl请求JAVA接口时的传参JAVA端接口始终无法获取到，对方经过检查json数据格式没问题，但是我采用ajax请求JAVA端接口时可以获取到参数，于是推断是不同语言传输和接受参数的方式问题！</p></blockquote><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="JAVA接受post请求数据方式"><a href="#JAVA接受post请求数据方式" class="headerlink" title="JAVA接受post请求数据方式"></a>JAVA接受post请求数据方式</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;&gt;Java的servlet中接收Post请求数据主要采用两种方式：</p><blockquote><p>(1) request.getParameter();<br>(2) request.getInputStream();</p></blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;Content-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下,request.getParameter()才能获取到值，否则返回空。Content-Type为其他类型时，一般采用request.getInputStream()方式获取，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String json = org.apache.commons.io.IOUtils.toString(request.getInputStream());  </span><br><span class="line">System.out.println(json);</span><br></pre></td></tr></table></figure><p>&ensp;&ensp;&ensp;&ensp;&ensp;于是改用request.getInputStream()方式，问题得到解决，该方式返回request请求内容的字节流，转为字符串之后对取到的值进行处理,如果需要改变请求参数的值或者改变获取参数的方式满足Controller层的需求，可以通过<a href="/2018/05/04/Rewriting-HttpServletRequestWrapper">使用HttpServletRequestWrapper重写Request请求参数</a>来达到目的。</p><h1 id="request的Content-Type小结"><a href="#request的Content-Type小结" class="headerlink" title="request的Content-Type小结"></a>request的Content-Type小结</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp;application/x- www-form-urlencoded是Post请求默认的请求体内容类型，也是form表单默认的类型。Servlet API规范中对该类型的请求内容提供了request.getParameter()方法来获取请求参数值。但当请求内容不是该类型时，需要调用request.getInputStream()或request.getReader()方法来获取请求内容值。<br>&ensp;&ensp;&ensp;&ensp;&ensp;当请求体内容（注意：get请求没有请求体）类型是application/x- www-form-urlencoded时也可以直接调用request.getInputStream()或request.getReader()方法获取到请求内容再解析出具体都参数，但前提是还没调用request.getParameter()方法。此时当request.getInputStream()或request.getReader()获取到请求内容后，无法再调request.getParameter()获取请求内容。即对该类型的请求，三个方法互斥，只能调其中一个。今天遇到一个Controller请求经过Spring MVC 的RequestMapping处理后，只能通过request.getParameter()获取到参数、无法通过request.getInputStream()和request.getReader()读取内容很可能就是因为在请求经过Spring MVC时已调用过request.getParameter()方法的原因。</p><blockquote><p>注意：在一个请求链中，请求对象被前面对象方法中调用request.getInputStream()或request.getReader()获取过内容后，后面的对象方法里再调用这两个方法也无法获取到客户端请求的内容，但是调用request.getParameter()方法获取过内容后，后面的对象方法里依然可以调用它获取到参数的内容。</p></blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;当请求体内容是其它类型时，比如 multipart/form-data或application/json时，无法通过request.getParameter()获取到请求内容，此时只能通过request.getInputStream()和request.getReader()方法获取请求内容，此时调用request.getParameter()也不会影响第一次调用request.getInputStream()或request.getReader()获取到请求内容。request.getInputStream()返回请求内容字节流，多用于文件上传，request.getReader()是对前者返回内容的封装，可以让调用者更方便字符内容的处理（不用自己先获取字节流再做字符流的转换操作）。</p><h1 id="普及PHP知识"><a href="#普及PHP知识" class="headerlink" title="普及PHP知识"></a>普及PHP知识</h1><h2 id="PHP接收post请求数据方式"><a href="#PHP接收post请求数据方式" class="headerlink" title="PHP接收post请求数据方式"></a>PHP接收post请求数据方式</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;PHP接收post请求数据主要采用两种方式：</p><blockquote><p>(1) $_POST[index]方式<br>(2) $data = file_get_contents(“php://input”);</p></blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;Content-Type仅在取值为application/x-www-data-urlencoded和multipart/form-data两种情况下，PHP才会将http请求数据包中相应的数据填入全局变量$_POST。因此，如果使用$_POST来获取post过来的数据时，需要注意Content-Type类型，如果不是application/x-www-data-urlencoded和multipart/form-data，则采用file_get_contents(“php://input”);进行获取。<br>&ensp;&ensp;&ensp;&ensp;&ensp; php://input 可以读取http entity body中指定长度的值,由Content-Length指定长度,不管是POST方式或者GET方法提交过来的数据。但是，一般GET方法提交数据 时，http request entity body部分都为空。例如在传递json串的时候，通过file_get_contents(“php://input”);获取原始串，然后通过json_decode()进行解析。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> JAVA </tag>
            
            <tag> post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用问题总结及解决方案</title>
      <link href="/1523b56c/"/>
      <url>/1523b56c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp; Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 [1] Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone，在本地机器上拷贝一个完整的Git仓库。不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。<br>&ensp;&ensp;&ensp;&ensp;&ensp; 本篇文章专门用来记录本人在使用git过程中遇到的一些问题及解决方案，长期更新。</p><hr><a id="more"></a><h1 id="FQA"><a href="#FQA" class="headerlink" title="FQA"></a>FQA</h1><h2 id="关键字：error-RPC-failed"><a href="#关键字：error-RPC-failed" class="headerlink" title="关键字：error: RPC failed"></a>关键字：error: RPC failed</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;最近从Github上获取一份代码，在使用终端clone的时候，屡次出现如下错误：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining </span><br><span class="line">fatal: The remote end hung up unexpectedly </span><br><span class="line">fatal: early EOF </span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><img title="RPC failed" data-src="/1523b56c/git1.png"><h3 id="原因说明"><a href="#原因说明" class="headerlink" title="原因说明"></a>原因说明</h3><blockquote><p>我们的项目由于时代久远，所以导致整个项目比较复杂庞大。出现这种错误，就是因为curl的postBuffer默认值太小原因，重新在终端配置一下这个值就可以了。</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>重新在终端配置postBuffer的值。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global http.postBuffer 524288000      #524288000代表B，524288000B也就是500MB。这个值得大小，可以根据项目酌情设置。</span><br><span class="line">git config –list      #查看是否配置成功</span><br></pre></td></tr></table></figure><img title="postBuffer" data-src="/1523b56c/git2.png"><h2 id="关键字：回滚-恢复"><a href="#关键字：回滚-恢复" class="headerlink" title="关键字：回滚 恢复"></a>关键字：回滚 恢复</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><blockquote><p>git reset –hard 回滚到之前的版本以后，怎么撤销这一步回滚操作？</p></blockquote><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>可以通过reflog来进行恢复，前提是丢失的分支或commit信息没有被git gc清除，一般情况下，gc对那些无用的object会保留很长时间后才清除的，可以使用git reflog show或git log -g命令来看到所有的操作日志，恢复的过程很简单：</p><ol><li>通过git log -g命令来找到需要恢复的信息对应的commitid，可以通过提交的时间和日期来辨别,找到执行reset –hard之前的那个commit对应的commitid；</li><li>通过git branch recover_branch commitid 来建立一个新的分支。</li></ol></blockquote><p>这样，就把到commitid为止的代码、各种提交记录等信息都恢复到了recover_branch分支上了。<br>执行下面几个命令即可,详见<span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDAvMDAxMzc0ODMxOTQzMjU0ZWU5MGRiMTFiMTNkNGJhOWE3M2I5MDQ3ZjRmYjk2OGQwMDA=" title="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374831943254ee90db11b13d4ba9a73b9047f4fb968d000">git reset<i class="fa fa-external-link"></i></span>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog </span><br><span class="line">git checkout</span><br><span class="line">git branch</span><br></pre></td></tr></table></figure><h2 id="关键字：命令"><a href="#关键字：命令" class="headerlink" title="关键字：命令"></a>关键字：命令</h2><blockquote><p>Git最详细命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做</span><br><span class="line">git ci -am "some comments"</span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span><br><span class="line">git diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line">git diff --staged # 比较暂存区和版本库差异</span><br><span class="line">git diff --stat # 仅仅比较统计信息</span><br><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line">git log --stat #查看提交统计信息</span><br><span class="line">git br -r # 查看远程分支</span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line">git apply --check ../sync.patch #测试补丁能否成功</span><br><span class="line">git stash # 暂存</span><br><span class="line">git stash list # 列出所有stash</span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line">git stash drop # 删除暂存区</span><br><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br><span class="line">git push # push所有分支</span><br><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) </span><br><span class="line">git remote rm &lt;repository&gt; # 删除远程仓库</span><br><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br></pre></td></tr></table></figure><h2 id="关键字：-分支-合并-主干"><a href="#关键字：-分支-合并-主干" class="headerlink" title="关键字： 分支 合并 主干"></a>关键字： 分支 合并 主干</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><blockquote><p>如何使用git将分支branch合并到主干master上？</p></blockquote><h3 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>假设现在有2个分支： master和 hexo-next</p></blockquote><img title="master和hexo-next分支" data-src="/1523b56c/git-branch.png"><p>1.使用如下命令从当前分支切换到主干master上<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p></p><p>2.合并某个分支到主干master<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branchName&gt;</span><br></pre></td></tr></table></figure><p></p><p>3.最重要的一步 push代码<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> FQA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下配置网关</title>
      <link href="/9d41370/"/>
      <url>/9d41370/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><blockquote><p>讲解Linux系统下配置网关的基本操作，以CentOS 7 64位系统为例</p></blockquote><a id="more"></a><h1 id="检查虚拟网卡这个硬件设备"><a href="#检查虚拟网卡这个硬件设备" class="headerlink" title="检查虚拟网卡这个硬件设备"></a>检查虚拟网卡这个硬件设备</h1><blockquote><p>①：查看虚拟网卡这个硬件设备具体型号</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> lspci |grep Ethernet</span><br></pre></td></tr></table></figure><img title="Ethernet" data-src="/9d41370/1.png"><p>可以查看到该主机网卡为Intel 82545EM 千兆以太网卡</p><blockquote><p>②：查看目前网卡驱动程序版本信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> ethtool -i ethx</span><br><span class="line"><span class="meta">[root@localhost]#</span> ifconfig eth0</span><br></pre></td></tr></table></figure><p>提示：eth0: error fetching interface information: Device not found<br>判断应该是没有安装网卡驱动</p><h1 id="安装网卡驱动"><a href="#安装网卡驱动" class="headerlink" title="安装网卡驱动"></a>安装网卡驱动</h1><blockquote><p>①：前往Intel官网下载Intel 82545EM 千兆以太网卡驱动程序，<span class="exturl" data-url="aHR0cDovL3d3dy5pbnRlbC5jbg==" title="http://www.intel.cn">http://www.intel.cn<i class="fa fa-external-link"></i></span></p></blockquote><img title="drive" data-src="/9d41370/2.png"><blockquote><p>②：下载完成后，依次执行命令解压安装驱动包</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> tar zxf e1000-8.0.35.tar.gz</span><br><span class="line"><span class="meta">[root@localhost]#</span> cd e1000-8.0.35/src/ &amp;&amp; make install</span><br></pre></td></tr></table></figure><div class="note warning"><p>注：此驱动程序为源代码的程序包，安装前确认系统kernel-headers、kernel-firmware、kernel-devel三个软件包已经安装，且版本一定要相同，以及编译工具gcc、gcc-c++已经安装，如果没有安装，请配置正确的yum源后使用yum命令来安装</p></div><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><p>①：查看路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> route -n</span><br></pre></td></tr></table></figure><p>②：发现里面并没有我想要的网关，所以就要添加一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> route add 10.10.88.203 dev eth0</span><br></pre></td></tr></table></figure><blockquote><p>③：重启network</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[root@localhost]#</span> service network restart</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> System </tag>
            
            <tag> network </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RFID射频识别技术预研</title>
      <link href="/35059db1/"/>
      <url>/35059db1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="预研背景"><a href="#预研背景" class="headerlink" title="预研背景"></a>预研背景</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;公司预计将采用RFID技术来管理电动车。</p></blockquote><h1 id="何谓RFID"><a href="#何谓RFID" class="headerlink" title="何谓RFID?"></a>何谓RFID?</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;无线射频识别技术（RFID，Radio Frequency Identification）是一种非接触的自动识别技术，其基本原理是利用射频信号和空间耦合（电感或者电磁耦合）传输特性，实现对被识别物体的自动识别。我们称无线射频识别技术也为电子标签系统。</p></blockquote><a id="more"></a><h1 id="RFID系统组成"><a href="#RFID系统组成" class="headerlink" title="RFID系统组成"></a>RFID系统组成</h1><p>&ensp;&ensp;&ensp;&ensp;RFID系统组成如下图<br><img title="RFID系统组" data-src="/35059db1/RFID_COMPOSE.png"></p><blockquote><p>&ensp;主要有三部分：</p><ul><li><strong>天线(Antenna , or coil)</strong></li><li><strong>读取器(Reader , transceiver)</strong></li><li><strong>感应标签(Transponder, or RF Tag, 或硅芯片)</strong></li></ul></blockquote><p>&ensp;&ensp;&ensp;&ensp;RFID 读取流程如下图<br><img title="RFID 读取流程" data-src="/35059db1/RFID_READ.png"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> RFID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RFID </tag>
            
            <tag> 电动车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用系统中的异常处理</title>
      <link href="/1fe23ddd/"/>
      <url>/1fe23ddd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>某次安防项目的晨会上。<br>质管小A：“安防项目今天突然不能播放视频了，点击播放按钮，提示失败，是不是底层C端出问题了！”<br>底层C端研发负责人小B：“没有啊，怎么可能是我们C端的问题，昨天还是好好的，是不是业务系统出问题了！”<br>业务系统负责人小C：“。。。。。。小明，小强你们两个排查下问题！”<br>小明，小强经过一阵排查，发现播放视频的配置参数被修改了，没有填写端口号。</p></blockquote><hr><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote><p>&ensp;&ensp;&ensp;&ensp;从以上的事件中可以看出，问题的关键在于系统对于异常情况的处理不到位，并且对于出现问题的提示信息过于片面化，导致问题出现时，无法迅速定位问题所在。我们开发的业务系统,或者是产品,常常面临着这样的问题:</p><ul><li>系统运行出错,但是完全不知道错误发生的位置；</li><li>我们找到了错误的位置,但是完全不知道是因为什么；</li><li>系统明明出了错误,但是就是看不到错误堆栈信息。</li></ul></blockquote><blockquote><p>&ensp;&ensp;&ensp;&ensp;由此，J2EE Web应用系统中的异常处理显得尤为重要，优雅的以正确的方式处理异常，不仅可以提高系统健壮性的，并且还可以有效的帮助我们速度的定位排查问题。</p></blockquote><hr><h1 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h1><h2 id="从异常的分类结构看"><a href="#从异常的分类结构看" class="headerlink" title="从异常的分类结构看"></a>从异常的分类结构看</h2><img title="异常分类结构图" data-src="/1fe23ddd/exception1.png"><blockquote><p>&ensp;&ensp;&ensp;&ensp;由异常的分类结构图可以看出：Throwable类有两个直接子类java.lang.Error和java.lang.Exception，Error是无法处理的异常，一般发生这种异常，JVM会选择终止程序，编写程序时不需要关心；Exception是常见异常情况，这些异常是我们可以处理的异常，是所有异常类的父类。</p></blockquote><h2 id="从异常的受检查情况来看"><a href="#从异常的受检查情况来看" class="headerlink" title="从异常的受检查情况来看"></a>从异常的受检查情况来看</h2><img title="从异常的受检查情况来看" data-src="/1fe23ddd/exception2.png"><blockquote><p>&ensp;&ensp;&ensp;&ensp;从异常的受检查情况来看,可捕获的异常又可以分为两类：check异常（受查异常(checked exception)）和runtime异常（非受查异常(unchecked exception)）。对于非受查异常，派生自RuntimeException的异常类，对于此类异常java编译器不要求必须进行异常捕获处理或者抛出声明，由程序员自行决定；对于受查异常，直接派生自Exception的异常类，java编译器强制程序员必须进行捕获处理，否则编译都不通过。</p></blockquote><h2 id="从系统的应用角度来看"><a href="#从系统的应用角度来看" class="headerlink" title="从系统的应用角度来看"></a>从系统的应用角度来看</h2><blockquote><p>(1) <strong>系统级异常</strong>————与应用业务逻辑无关，需要有JVM系统来处理的异常；<br>(2) <strong>应用级异常</strong>————由于用户违背了商业业务逻辑而导致的错误，这种错误一般不是致命的，需要由应用系统程序本身处理。</p></blockquote><h1 id="Web应用中的异常处理机制和实现技术"><a href="#Web应用中的异常处理机制和实现技术" class="headerlink" title="Web应用中的异常处理机制和实现技术"></a>Web应用中的异常处理机制和实现技术</h1><h2 id="异常的处理机制"><a href="#异常的处理机制" class="headerlink" title="异常的处理机制"></a>异常的处理机制</h2><img title="异常的处理机制" data-src="/1fe23ddd/exception3.png"><img title="异常的处理机制" data-src="/1fe23ddd/exception4.png"><h2 id="Web应用中的异常处理"><a href="#Web应用中的异常处理" class="headerlink" title="Web应用中的异常处理"></a>Web应用中的异常处理</h2><blockquote><p>(1) 不要让用户看到原始的Java异常信息，也是就说禁止将异常的堆栈信息抛出到页面上；<br>(2) 可以将原始的Java异常信息记录到日志文件中或者输出到控制台，这样有助于程序调试中的错误定位；<br>(3) 在分层系统实现中的异常处理规则：<br>&ensp;&ensp;&ensp;&ensp;① 在分层系统实现中，下层系统向上层系统报告异常错误时，通常采用抛出自定义异常的方式实现，这样以便统一系统中不同的异常类型，例如，在项目中定义一个 AppException,然后向上层系统抛出这个异常：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">AppException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AppException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>&ensp;&ensp;&ensp;&ensp;② 设计自定义异常时，一般让自定义异常直接继承RuntimeException(非受查异常),从而使得上层的系统代码不必进行与异常相关的处理，这样也就使得上层程序代码不必依赖于下层的程序代码实现,这在一定程度上降低了代码的耦合度；<br>&ensp;&ensp;&ensp;&ensp;③ 在控制层组件中捕获用户自定义的异常，在表示层组件中处理未捕获的异常，例如，定义错误页面等；<br>&ensp;&ensp;&ensp;&ensp;④ 根据不同的业务场景或层级定义不同的异常类，例如，我们定义ServiceException异常类,用来表示业务逻辑受理失败,它仅表示我们处理业务的时候发现无法继续执行下去；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ServiceException</span> <span class="keyword">extends</span> <span class="title">AppException</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>(4)利用框架的相关机制处理异常，例如，spring为我们提供了ControllerAdvice机制,进行全局的 Controller 层异常处理：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  <span class="doctag">@ControllerAdvice</span> + <span class="doctag">@ExceptionHandler</span> 进行全局的 Controller 层异常处理，</span></span><br><span class="line"><span class="comment">*  不用在 Controller 层进行 try-catch </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span>  </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123; ServiceException.class &#125;)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AppResponse <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>(5) 异常设计的初衷是解决程序运行中的各种意外情况,且异常的处理效率比条件判断方式要低很多，如果考虑效率的话，可以重写Throwable的fillStackTrace方法，fillStackTrace是一个native方法,会填充异常类内部的运行轨迹；<br>(6) 不要用异常进行业务逻辑处理，我们提倡在业务处理的时候,如果发现无法处理直接抛出异常即可。</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exception </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构演进</title>
      <link href="/f502a05/"/>
      <url>/f502a05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="系统架构演进"><a href="#系统架构演进" class="headerlink" title="系统架构演进"></a>系统架构演进</h1><p><br><font color="black" size="3">首先，给个图。。。</font></p><img title="系统架构演进" data-src="/f502a05/architecture.png"><a id="more"></a><blockquote><p>&ensp;&ensp;&ensp;&ensp;从以上的演进图中，我们可以很清晰的看出:平台随着业务的发展从 All in One 环境就可以满足业务需求（以Java来说，可能只是一两个war包就解决了）；发展到需要拆分多个应用，并且采用MVC的方式分离前后端，加快开发效率；在发展到服务越来越多，不得不将一些核心或共用的服务拆分出来，提供实时流动监控计算等，其实发展到此阶段，如果服务拆分的足够精细，并且独立运行，这个时候至少可以理解为SOA架构了。特点概述：</p></blockquote><ul><li>单一应用架构<br>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。<br>此时，用于简化增删改查工作量的 数据访问框架(ORM) 是关键。</li><li>垂直应用架构<br>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。<br>此时，用于加速前端页面开发的 Web框架(MVC) 是关键。</li><li>分布式服务架构<br>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。<br>此时，用于提高业务复用及整合的 分布式服务框架(RPC) 是关键</li><li>流动计算架构<br>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。<br>此时，用于提高机器利用率的 资源调度和治理中心(SOA) 是关键。</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Dubbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC和mybatis的整合</title>
      <link href="/820c489b/"/>
      <url>/820c489b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="SpringMVC-mybaits的系统架构"><a href="#SpringMVC-mybaits的系统架构" class="headerlink" title="SpringMVC+mybaits的系统架构"></a>SpringMVC+mybaits的系统架构</h1><img title="SpringMVC+mybaits的系统架构" data-src="/820c489b/spring+mybatis.png"><a id="more"></a><hr><h1 id="SpringMVC-mybaits整合步骤"><a href="#SpringMVC-mybaits整合步骤" class="headerlink" title="SpringMVC+mybaits整合步骤"></a>SpringMVC+mybaits整合步骤</h1><h2 id="第一步：整合dao层"><a href="#第一步：整合dao层" class="headerlink" title="第一步：整合dao层"></a>第一步：整合dao层</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;在doDispatch()方法中调用了DispatcherServlet类的getHandler方法。映射器根据request当中的URL，找到了Handler，最终返回一个执行器的链(HandlerExecutionChain)。这个链里面有Handler。<br>配置mybatis的全局配置文件：sqlMapConfig.xml<br></p><figure class="highlight xml"><figcaption><span>sqlMapConfig.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis的全局配置文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全局setting配置，根据需要添加 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 批量扫描别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.syshlang.smm.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置mapper</span></span><br><span class="line"><span class="comment">由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。</span></span><br><span class="line"><span class="comment">必须遵循：mapper.xml和mapper.java文件同名且在一个目录</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;mappers&gt;</span></span><br><span class="line"><span class="comment">     通过mapper元素的resource属性可以指定一个相对于类路径的Mapper.xml文件</span></span><br><span class="line"><span class="comment">    &lt;mapper resource="com/syshlang/smm/mapping/ItemsMapper.xml"/&gt;</span></span><br><span class="line"><span class="comment">    通过mapper元素的url属性可以指定一个通过URL请求道的Mapper.xml文件</span></span><br><span class="line"><span class="comment">    &lt;mapper url="file:///E:\Workspaces\Intellij\SpringMM\src\main\resources\com\syshlang\smm\mapping\ItemsMapper.xml"/&gt;</span></span><br><span class="line"><span class="comment">    通过mapper元素的class属性可以指定一个Mapper接口进行注册</span></span><br><span class="line"><span class="comment">    &lt;mapper class="com.syshlang.smm.mapper.ItemsMapper"/&gt;</span></span><br><span class="line"><span class="comment">    通过package元素将会把指定包下面的所有Mapper接口进行注册</span></span><br><span class="line"><span class="comment">    &lt;package name="com.syshlang.smm.mapper"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/mappers&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>配置spring和mybatis整合的配置文件：applicationContext-dao.xml<br>主要包括数据源、SqlSessionFactory、mapper扫描器等<br></p><figure class="highlight xml"><figcaption><span>applicationContext-dao.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 ，dbcp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:config/mybatis/sqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/syshlang/smm/mapping/*Mapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                            dialect=mysql</span><br><span class="line">                            reasonable=true</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.syshlang.smm.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="第二步：整合service层"><a href="#第二步：整合service层" class="headerlink" title="第二步：整合service层"></a>第二步：整合service层</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;通过spring管理 service接口,使用配置方式将service接口配置在spring配置文件中,实现事务控制。<br>配置service：applicationContext-service.xml<br></p><figure class="highlight xml"><figcaption><span>applicationContext-service.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"itemsserviceimpl"</span>  <span class="attr">class</span>=<span class="string">"com.syshlang.smm.service.impl.ItemsServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>使用spring声明事务控制方法，配置事务控制：applicationContext-transaction.xml<br></p><figure class="highlight xml"><figcaption><span>applicationContext-transaction.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器</span></span><br><span class="line"><span class="comment">    对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据源</span></span><br><span class="line"><span class="comment">            dataSource在applicationContext-dao.xml中配置了</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.syshlang.smm.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;aop:config&gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:pointcut id="transactionPointcut"</span></span><br><span class="line"><span class="comment">                      expression="execution(* com.syshlang.smm.service.impl.*.*Dao.*(..))" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;aop:advisor pointcut-ref="transactionPointcut"</span></span><br><span class="line"><span class="comment">                     advice-ref="txAdvice"  /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="第三步：整合SpringMVC"><a href="#第三步：整合SpringMVC" class="headerlink" title="第三步：整合SpringMVC"></a>第三步：整合SpringMVC</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;由于SpringMVC是spring的模块，不需要整合，只需配置spring-mvc.xml文件，包括处理器映射器、适配器、视图解析器等。<br>配置:spring-mvc.xml<br></p><figure class="highlight xml"><figcaption><span>spring-mvc.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，实现支持注解的IOC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang.smm"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解映射器 支持mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描指定controller的包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:component-scan base-package="com.syshlang.smm.controller"&gt;&lt;/context:component-scan&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置jsp路径的前缀</span></span><br><span class="line"><span class="comment">        &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;</span></span><br><span class="line"><span class="comment">        配置jsp路径的后缀</span></span><br><span class="line"><span class="comment">        &lt;property name="suffix" value=".jsp" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMvc配置详解及源码分析</title>
      <link href="/375e3f9d/"/>
      <url>/375e3f9d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="SpringMVC配置详解"><a href="#SpringMVC配置详解" class="headerlink" title="SpringMVC配置详解"></a>SpringMVC配置详解</h1><h2 id="配置前端控制器DispatcherServlet"><a href="#配置前端控制器DispatcherServlet" class="headerlink" title="配置前端控制器DispatcherServlet"></a>配置前端控制器DispatcherServlet</h2><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;SpringMVC是一个基于DispatcherServlet的MVC框架，每一个请求最先访问的都是DispatcherServlet，DispatcherServlet是继承自HttpServlet的，DispatcherServlet负责转发每一个Request请求给相应的Handler，Handler处理以后再返回相应的视图(View)和模型(Model)，返回的视图和模型都可以不指定，即可以只返回Model或只返回View或都不返回。</p></blockquote><a id="more"></a><p>&ensp;&ensp;&ensp;&ensp;&ensp;首先，在web.xml文件中声明DispatcherServlet：</p><figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;context-param&gt;</span></span><br><span class="line"><span class="comment">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">    &lt;param-value&gt;</span></span><br><span class="line"><span class="comment">      /WEB-INF/applicationContext.xml,</span></span><br><span class="line"><span class="comment">      classpath:springmvc.xml,</span></span><br><span class="line"><span class="comment">    &lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">  &lt;/context-param&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;context-param&gt;</span></span><br><span class="line"><span class="comment">    &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">    &lt;param-value&gt;log4j.properties&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">  &lt;/context-param&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SpringMVC前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    contextConfigLocation 配置SpringMVC加载的配置文件（配置处理器映射器、适配器等）</span></span><br><span class="line"><span class="comment">    如果不配置，默认加载的是/WEB_INF/servlet名称-servlet.xml(dispatcher-servlet.xml)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1)load-on-startup元素标记容器是否在启动的时候就加载这个servlet(实例化并调用其</span></span><br><span class="line"><span class="comment">    init()方法)。</span></span><br><span class="line"><span class="comment">    2)它的值必须是一个整数，表示servlet应该被载入的顺序</span></span><br><span class="line"><span class="comment">    2)当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；</span></span><br><span class="line"><span class="comment">    3)当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。</span></span><br><span class="line"><span class="comment">    4)正数的值越小，该servlet的优先级越高，应用启动时就越先加载</span></span><br><span class="line"><span class="comment">    5)当值相同时，容器就会自己选择顺序来加载。</span></span><br><span class="line"><span class="comment">    所以，&lt;load-on-startup&gt;x&lt;/load-on-startup&gt;，</span></span><br><span class="line"><span class="comment">    中x的取值1，2，3，4，5代表的是优先级，而非启动延迟时间。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;async-supported&gt;子标签，该标签的默认取值为false，</span></span><br><span class="line"><span class="comment">    要启用异步处理支持，则将其设为true即可</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    ① *.action，访问以.action结尾的由DispatcherServlet进行解析；</span></span><br><span class="line"><span class="comment">    ② /,所有/的地址都由DispatcherServlet进行解析，</span></span><br><span class="line"><span class="comment">       对于静态的文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class="line"><span class="comment">       使用此种风格可以实现RESTFull风格的url解析；</span></span><br><span class="line"><span class="comment">    ③ /*，这样配置错误，使用这种配置时，最终要转发到jsp页面时，</span></span><br><span class="line"><span class="comment">      仍然会由DsipatcherServlet解析jsp地址，不能根据jsp页面找到handler，会报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--welcome pages--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="配置处理器适配器、映射器、视图解析器等"><a href="#配置处理器适配器、映射器、视图解析器等" class="headerlink" title="配置处理器适配器、映射器、视图解析器等"></a>配置处理器适配器、映射器、视图解析器等</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;然后，在classpath下的spring-mvc.xml中配置处理器适配器：</p><figure class="highlight xml"><figcaption><span>spring-mvc.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    说明：前端控制器加载处理映射器、适配器、视图解析器等组件，如果不在spring-mvc.xml中配置，则会自动使用spring-webmvc-4.3.1.RELEASE.jar包中org\springframework.web.servlet中DispatcherSerlvet.properties配置文件中的默认配置。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--启用spring的一些annotation --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:annotation-config/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ****************配置Handler 开始*********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryController"</span> <span class="attr">name</span>=<span class="string">"/query.action"</span> <span class="attr">class</span>=<span class="string">"com.syshlang.smm.controller.QueryController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryHttpController"</span> <span class="attr">name</span>=<span class="string">"/httpquery.action"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"com.syshlang.smm.controller.QueryHttpController"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    对于注解的Handler可以单个配置,实际开发中建议使用组件扫描</span></span><br><span class="line"><span class="comment">    可以扫描controller、service、...这里让扫描controller，指定controller的包</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--&lt;bean class="com.syshlang.smm.controller.QueryAnnotationController" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.syshlang.smm.controller"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ****************配置Handler 结束*********************--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  *********************配置处理器映射器 开始*************************************** --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        所有的适配器都实现了HandlerMapping接口</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种方式：最简单的，一个class对应一个handler（非注解）</span></span><br><span class="line"><span class="comment">    将bean的name当作url来查找，需要在配置Handler时配置bean的name(就是url)，如上</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种方式 集中映射配置 （非注解）</span></span><br><span class="line"><span class="comment">     SimpleUrlHandlerMapping是BeanNameUrlHandlerMapping的增强版本，</span></span><br><span class="line"><span class="comment">     它可以将url和处理器的bean的id进行统一的映射配置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/query0.action"</span>&gt;</span>queryController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/query1.action"</span>&gt;</span>queryController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/httpquery0.action"</span>&gt;</span>queryHttpController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/httpquery1.action"</span>&gt;</span>queryHttpController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;prop key="url地址"&gt;Controller的bean的id&lt;/prop&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第三种方式 注解映射器</span></span><br><span class="line"><span class="comment">    在spring3.1之前使用org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping注解映射器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在spring3.1之后使用org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping注解映射器</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    结论：① 多个映射器可以并存；</span></span><br><span class="line"><span class="comment">         ② 一个bean可以对应多个url；</span></span><br><span class="line"><span class="comment">         ③HandlerMapping 无需配置，springmvc可以默认启动；</span></span><br><span class="line"><span class="comment">         ④使用注解的映射器和注解的适配器。（注解的映射器和注解的适配器必须配对使用）。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ********************************配置处理器映射器  结束************************** --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  *********************配置处理器适配器 开始*************************************** --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        所有的处理器适配器都实现HandlerAdapter接口</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--①配置处理器适配器 (非注解)</span></span><br><span class="line"><span class="comment">      public boolean supports(Object handler) &#123;</span></span><br><span class="line"><span class="comment">        return handler instanceof Controller;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      SimpleControllerHandlerAdapter中的support方法可以看出：</span></span><br><span class="line"><span class="comment">      编写的handler需要实现Controller接口</span></span><br><span class="line"><span class="comment">      public interface Controller &#123;</span></span><br><span class="line"><span class="comment">        ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">        由此，开发Handler时需要实现Controller接口才能由org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter来执行</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      ②HttpRequestHandlerAdapter 是http请求处理适配器， (非注解)</span></span><br><span class="line"><span class="comment">      所有实现了HttpRequestHandler接口的bean通过此适配器进行适配、执行</span></span><br><span class="line"><span class="comment">     public boolean supports(Object handler) &#123;</span></span><br><span class="line"><span class="comment">        return handler instanceof HttpRequestHandler;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    由HttpRequestHandlerAdapter中的support方法可以看出：</span></span><br><span class="line"><span class="comment">    编写的handler需要实现HttpRequestHandler接口</span></span><br><span class="line"><span class="comment">    public interface HttpRequestHandler &#123;</span></span><br><span class="line"><span class="comment">    void handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--③注解适配器</span></span><br><span class="line"><span class="comment">    在spring3.1之前使用org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter注解适配器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在spring3.1之后使用org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter注解适配器。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  *********************配置处理器适配器 结束*************************************** --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置</span></span><br><span class="line"><span class="comment">mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class="line"><span class="comment">比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment">实际开发时使用mvc:annotation-driven</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  *********************配置视图解析器 开始*************************************** --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器</span></span><br><span class="line"><span class="comment">    解析jsp文件，默认使用jstl的标签</span></span><br><span class="line"><span class="comment">    classpatch下要有jstl的jar包</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  *********************配置视图解析器 结束*************************************** --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log4jInitialization"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.util.Log4jConfigurer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"initLogging"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="开发Handler"><a href="#开发Handler" class="headerlink" title="开发Handler"></a>开发Handler</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;在此处只举一例，如下：<br>&ensp;&ensp;&ensp;&ensp;&ensp;通过实现 controller接口，由org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter适配器执行的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.syshlang.smm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.syshlang.smm.pojo.QueryPojo;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sunys on 2017/7/1 2:44.</span></span><br><span class="line"><span class="comment"> * Description: 使用SimpleControllerHandlerAdapter处理器适配器实现Controller接口的处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个日志器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(QueryController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//调用service层，查询数据库</span></span><br><span class="line">        List&lt;QueryPojo&gt; list = <span class="keyword">new</span> ArrayList&lt;QueryPojo&gt;();</span><br><span class="line">        QueryPojo pojo = <span class="keyword">new</span> QueryPojo();</span><br><span class="line">        pojo.setId(<span class="string">"1"</span>);</span><br><span class="line">        pojo.setName(<span class="string">"aaaaaa"</span>);</span><br><span class="line">        list.add(pojo);</span><br><span class="line">        <span class="comment">//返回ModelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//相当于request的setAttribut,在jsp页面通过list取值</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"listpojo"</span>,list);</span><br><span class="line">        modelAndView.addObject(<span class="string">"des"</span>,<span class="string">"使用SimpleControllerHandlerAdapter处理器适配器实现Controller接口的处理器"</span>);</span><br><span class="line">        <span class="comment">//指定视图View</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"/view/query.jsp"</span>);</span><br><span class="line">        <span class="comment">//输出日志文件</span></span><br><span class="line">        logger.info(<span class="string">"the first jsp pages"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;根据配置过程，通过前端控制器源码分析SpringMVC的执行过程。</p><h3 id="第一步：前端控制器接收请求"><a href="#第一步：前端控制器接收请求" class="headerlink" title="第一步：前端控制器接收请求"></a>第一步：前端控制器接收请求</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;在org.springframework.web.servlet.DispatcherServlet中可以看到doDispatch方法。前端控制器接收请求，.action类型的URL通过过滤器进入DispatcherServlet类，doDispatch()方法<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">                Object dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processedRequest = <span class="keyword">this</span>.checkMultipart(request);</span><br><span class="line">                    multipartRequestParsed = processedRequest != request;</span><br><span class="line">                    mappedHandler = <span class="keyword">this</span>.getHandler(processedRequest);</span><br><span class="line">                    <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    HandlerAdapter ha = <span class="keyword">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                    String method = request.getMethod();</span><br><span class="line">                    <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">                    <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">                        <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> ((<span class="keyword">new</span> ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                    dispatchException = var20;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                    dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, var21);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, var23));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                <span class="keyword">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="第二步：前端控制器调用处理器映射器查找-Handler"><a href="#第二步：前端控制器调用处理器映射器查找-Handler" class="headerlink" title="第二步：前端控制器调用处理器映射器查找 Handler"></a>第二步：前端控制器调用处理器映射器查找 Handler</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;在doDispatch()方法中调用了DispatcherServlet类的getHandler方法。映射器根据request当中的URL，找到了Handler，最终返回一个执行器的链(HandlerExecutionChain)。这个链里面有Handler。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Iterator var2 = <span class="keyword">this</span>.handlerMappings.iterator();</span><br><span class="line"></span><br><span class="line">        HandlerExecutionChain handler;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            HandlerMapping hm = (HandlerMapping)var2.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.trace(<span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            handler = hm.getHandler(request);</span><br><span class="line">        &#125; <span class="keyword">while</span>(handler == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="第三步：调用处理器适配器执行Handler，得到执行结果ModelAndView"><a href="#第三步：调用处理器适配器执行Handler，得到执行结果ModelAndView" class="headerlink" title="第三步：调用处理器适配器执行Handler，得到执行结果ModelAndView"></a>第三步：调用处理器适配器执行Handler，得到执行结果ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="第四步：视图渲染，将model数据填充到request域。"><a href="#第四步：视图渲染，将model数据填充到request域。" class="headerlink" title="第四步：视图渲染，将model数据填充到request域。"></a>第四步：视图渲染，将model数据填充到request域。</h3><p>&ensp;&ensp;&ensp;&ensp;&ensp;视图解析，得到view:<br>在doDispatch()方法中<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">                mv = ((ModelAndViewDefiningException)exception).getModelAndView();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object handler = mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>;</span><br><span class="line">                mv = <span class="keyword">this</span>.processHandlerException(request, response, handler, exception);</span><br><span class="line">                errorView = mv != <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.triggerAfterCompletion(request, response, (Exception)<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在processDispatchResulth()方法中<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.render(mv, request, response);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</span><br><span class="line">        response.setLocale(locale);</span><br><span class="line">        View view;</span><br><span class="line">        <span class="keyword">if</span> (mv.isReference()) &#123;</span><br><span class="line">            view = <span class="keyword">this</span>.resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() + <span class="string">"' in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = mv.getView();</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> + <span class="string">"View object in servlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.setStatus(mv.getStatus().value());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            view.render(mv.getModelInternal(), request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + <span class="keyword">this</span>.getServletName() + <span class="string">"'"</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> var7;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在render()方法中<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view = <span class="keyword">this</span>.resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure><p></p><p>调用view的渲染方法，将model数据填充到request域<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure><p></p><p>根据InternalResourceView的继承关系：org.springframework.web.servlet.view.AbstractView ,org.springframework.web.servlet.view.AbstractUrlBasedView,org.springframework.web.servlet.view.InternalResourceView 最终找到render方法在AbstractView中，如下代码所示：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.trace(<span class="string">"Rendering view with name '"</span> + <span class="keyword">this</span>.beanName + <span class="string">"' with model "</span> + model + <span class="string">" and static attributes "</span> + <span class="keyword">this</span>.staticAttributes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; mergedModel = <span class="keyword">this</span>.createMergedOutputModel(model, request, response);</span><br><span class="line">        <span class="keyword">this</span>.prepareResponse(request, response);</span><br><span class="line">        <span class="keyword">this</span>.renderMergedOutputModel(mergedModel, <span class="keyword">this</span>.getRequestToExpose(request), response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">exposeModelAsRequestAttributes</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Iterator var3 = model.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">            Entry&lt;String, Object&gt; entry = (Entry)var3.next();</span><br><span class="line">            String modelName = (String)entry.getKey();</span><br><span class="line">            Object modelValue = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (modelValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setAttribute(modelName, modelValue);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Added model object '"</span> + modelName + <span class="string">"' of type ["</span> + modelValue.getClass().getName() + <span class="string">"] to request in view with name '"</span> + <span class="keyword">this</span>.getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                request.removeAttribute(modelName);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.debug(<span class="string">"Removed model object '"</span> + modelName + <span class="string">"' from request in view with name '"</span> + <span class="keyword">this</span>.getBeanName() + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架组件学习之SpringMVC</title>
      <link href="/3b06d7c3/"/>
      <url>/3b06d7c3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h1><h2 id="SpringMVC框架是什么"><a href="#SpringMVC框架是什么" class="headerlink" title="SpringMVC框架是什么"></a>SpringMVC框架是什么</h2><img title="Spring框架" data-src="/3b06d7c3/spring-framework1.png"><a id="more"></a> <img title="SpringMVC框架" data-src="/3b06d7c3/spring-framework2.png"><blockquote><p>&ensp;&ensp;&ensp;&ensp;从以上的框架图中，我们可以很清晰的看出:Springmvc是一个基于mvc的web框架，并且它是spring框架的一个模块。由此，我们在开发的过程中，SpringMVC和spring无需通过中间整合层进行整合。</p></blockquote><hr><h2 id="mvc在b-s系统下的应用"><a href="#mvc在b-s系统下的应用" class="headerlink" title="mvc在b/s系统下的应用"></a>mvc在b/s系统下的应用</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;mvc是一个设计模式，mvc在b/s系统下的应用,如下图：<br><img title="mvc在b/s系统下的应用" data-src="/3b06d7c3/mvcbs.png"></p><hr><h2 id="SpringMVC框架-1"><a href="#SpringMVC框架-1" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;SpringMVC框架，用户发出一个请求时，处理流程如下图：<br><img title="处理流程" data-src="/3b06d7c3/springmvcbs.png"></p><p>&ensp;&ensp;&ensp;&ensp;&ensp;根据以上处理流程图，总结如下：<br></p><div class="note primary"><ol><li>发起请求到前端控制器(DispatcherServlet)；</li><li>前端控制器请求HandlerMapping查找Handler可以根据xml配置、注解进行查找(DispatcherServlet)；</li><li>处理器映射器HandlerMapping向前端控制器返回Handler；</li><li>前端控制器调用处理器适配器去执行Handler；</li><li>处理器适配器去执行Handler；</li><li>Handler执行完成给适配器返回ModelAndView；</li><li>处理器适配器向前端控制器返回ModelAndView,ModelAndView是SpringMVC框架的一个底层对象，包括Model和view；</li><li>前端控制器请求视图解析器去进行视图解析根据逻辑视图名解析成真正的视图(jsp)；</li><li>视图解析器向前端控制器返回View；</li><li>前端控制器进行视图渲染视图渲染将模型数据(在ModelAndView对象中)填充到request域；</li><li>前端控制器向用户响应结果。</li></ol></div><p></p><p>&ensp;&ensp;&ensp;&ensp;&ensp;在这个流程中所涉及到组件：<br></p><div class="note primary"><ul><li>前端控制器DispatcherServlet（不需要程序员开发）<br>作用：接收请求，响应结果，相当于转发器，中央处理器，有了DispatcherServlet减少了其它组件之间的耦合度。</li><li>处理器映射器HandlerMapping(不需要程序员开发)<br>作用：根据请求的url查找Handler</li><li>处理器适配器HandlerAdapter<br>作用：按照特定规则（HandlerAdapter要求的规则）去执行Handler</li><li>处理器Handler(<font color="red" size="3">需要程序员开发)<br>注意：编写Handler时按照HandlerAdapter的要求去做，这样适配器才可以去正确执行Handler</font></li><li>视图解析器View resolver(不需要程序员开发)<br>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）</li><li>视图View(<font color="red" size="3">需要程序员开发jsp)<br>View是一个接口，实现类支持不同的View类型（jsp、freemarker、pdf…）</font></li></ul></div><p></p><hr><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> JAVA </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="/f77810a8/"/>
      <url>/f77810a8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19tJtV4sVOo60TiCer5NwUFct7tXhGfdtVEh4k8pUs52sV/OGzXnjk/gEP1FoTcjFDG4of2+I8nxOckZtbh2TunPiL/rNpXtx63p41xgIkvqP0M92ZsfwVI6RtnN2OjOWpbee8QJT2VXc0+dm8vFGu8sXkdAsqO4E6zK4yttzBcG0AZmt9NoXjM1IZ0PxBzlbYqJtxl9Ej4scTQ9avDQULQnBaqHutB5waGaVRQOYj27GUnS3J/+1FuG5HOWYBURIxdiWVnHt3FKNYnz5oHnl5rMOmflCtr/e7ZMxS6kPsqCyNkiE/mf1jklucz/ROSXmZo/G9Z7Ag8X91Zj90nfE/zDJ90QOMyUThhb+924rhSxU/8lxwNg7KaVniQo8LFSJsjnOcDgOyQYLE3zQ/ryB3mWyGOdZp3FzBvf3XXc8UyYc+2/LqTA85qCs+VzJWC1tf4xFke7pm5siVtT13YrLcRPFGrm6dxVDP3K4MnMq9zV56EtRz4vqfHIgJpqrpzqGXuR68FScvNDNPpqSkKdnFeSsZie6HsCudUcBqqYqvlGSpyCLbNEnQD8CZiTpIGYLDlGe30l80V7GFUttAF+rA2Kn5w/vpwmt8yyEkvnRYNwEkMHzKA7gLaf62yOgx0/Fdhg0s894bi1GiNh3jxAXJwXEvrGz0MgqO5AnpmVKiENeIu3Uwlj7+mZyFcVMH3NF2kWf5PDAvXTHUGpNzADnkDi8e6MAGCpuAhZC4H6GCZswfH6p4FPz60bpReiVVcniNInjEJJU1bPieHuNXWY6/JJBPtgvc6uF1nNjAZM1VFMYTN3izjZjbhGzb9MNCIzzvKd2sLLI4Uu3zCaECHF7rJRo57Ebd3iP2VYhUkIAESZ+pfZlCKdCMvktND+S8qMHBhboSZRKuLSR3Pdyb5vyepaI0/eOM6GHr/2NNkxSZC29p21fzNseugg2jykJskZeYsm9eCZDpFNDQWkY4yzGxFAayH5m2v9Sg0OXkoa4CkWg87yKTfCpnkBtA+R5I8O4IX147Sv2ejMFMXc08Ud758UGJcsRrbzNVzbJgGeMCm8NFoYZp5XLFprXxvUdXXlQjwqH4nERTtvh+aDsaXQ5v5FTu5GGKwvR4MmhVJLaxxGWzbAge5w96bcoACd+60CG7Tx68QqmFQICwYTh76imjmUJtxE+y0A/bmQ2FmlzKU6L9CL6zk/UTmAS6MkLW90oqcl5U9Sw24egTeBsYdfFSJXvCEw1DfCuvkm/lJ/maQiqD+/+V+K4NkNgq2OgdIxIMCq98OfY9+jZWMczi2wL27JCni+X8pIFOFW75wynVqvKK2BKeB5qoxyprBsgJA+aDQK9RZXC284Mn+t82oGnhiDoCklneaEliinmZuXfLi/0O9P7l8F4EPvfD1QaSJWuFWquL0tvyb1aDa4EqAxF7pjNVH05rxErcTGidtLvdfFbe7Z+bjEDwbA04HliOES5Wab6S1sj/G4QAXUeSpLRS4k7GrDxzOx1WZOZFdELivETMulMqdDeypx19UexKGVG1W3tmBoke2YBHfrbLgxtW2d5edmAm6kPYHFxR18tFQklrjS2p2/4QI3oYET4s+1pTPeOz8Wnz5yktfjz5ujmaTlMyKEY3zewA9Ike555u4vjC57/WyX2N18oxypXWjGsiPN5Hu2jMxaYCl/KW1G+Bln8BZldLPrj5iVjD7z1MnwNilxWNEYc8zQWzfrQjlJt6NRmnnRjcamYwkhWQd2k0SGEB+oTWwd0ipWgJo5wuV7faU8aRyv/cyMwcR6uBQFXnnZZYO9QtM0/yUQ05Di9nF7RBw/naCFrlgV7dsJ2ZH2Wezek03MqD/aCrhx784ylDjbMUjDVP6mlpJqEsyVHkdfaQCnWXsAI8thCvyXyCXZ7NIiDR+KsXY3wbK2I9h5YLwyb0p2vXMqle8UC/2qvUXWGbUzMDqEcjt5Ossq4AUuqcu7dkhaY8W/XqREMGVzML9VANCqlF270C4j+wnuhBFI2QVyGQkVnJeY/N71fw/vOt5rKWAdBtQToVlCTR2kuw+IjSfld+rIh3OJvKRHBzJB0enZVseKjRPXgM2vuWbNeJsMuFHGOZVi5lGMCHUhhMAsIHYIbq7ChrhcBQ8ipQFgfB1EPjH6lugJYmxZVjEVv3ycSa8WSkaxu5xxfVM4q13tZok1T1ikYdq8fvBC8tsXCUUaN1cKs4ocwZJNIfxAOZ+r7es+8YybWGm1eKLUZfrOC92XzNd1SvubfvsL6c3laKCZ91yHb6hAxcgburJhSiZ2DdQRx+h9Yv/eqd162gvl4yv5xxuOA==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下操作集锦</title>
      <link href="/b529e05a/"/>
      <url>/b529e05a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Mon Aug 12 2019 15:36:48 GMT+0800 (GMT+08:00) --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&ensp;&ensp;&ensp;&ensp;&ensp; 本篇文章专门用来记录本人在使用Linux系统过程一些操作技巧和遇到的一些问题及解决方案，长期更新。</p><hr><a id="more"></a><h1 id="SOLUTION"><a href="#SOLUTION" class="headerlink" title="SOLUTION"></a>SOLUTION</h1><h2 id="Linux系统下配置网关"><a href="#Linux系统下配置网关" class="headerlink" title="Linux系统下配置网关"></a>Linux系统下配置网关</h2><blockquote><p>详见《<a href="/9d41370/" title="Linux系统下配置网关">Linux系统下配置网关</a>》。</p></blockquote><h2 id="Linux系统下关闭-开启防火墙"><a href="#Linux系统下关闭-开启防火墙" class="headerlink" title="Linux系统下关闭/开启防火墙"></a>Linux系统下关闭/开启防火墙</h2><h3 id="Centos-7-firewall-命令"><a href="#Centos-7-firewall-命令" class="headerlink" title="Centos 7 firewall 命令"></a>Centos 7 firewall 命令</h3><blockquote><p>查看已经开放的端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><blockquote><p>开启端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><div class="note info"><p>– zone #作用域<br>– add-port=80/tcp #添加端口，格式为：端口/通讯协议<br>– permanent #永久生效，没有此参数重启后失效</p></div><blockquote><p>重启/停止/停止/查看防火墙</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# firewall-cmd --reload  #重启firewall</span><br><span class="line">[root@sunys ~]# systemctl stop firewalld.service #停止firewall</span><br><span class="line">[root@sunys ~]# systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">[root@sunys ~]# firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br></pre></td></tr></table></figure><h3 id="CentOS-7-以下版本-iptables-命令"><a href="#CentOS-7-以下版本-iptables-命令" class="headerlink" title="CentOS 7 以下版本 iptables 命令"></a>CentOS 7 以下版本 iptables 命令</h3><blockquote><p>查看防火墙状态</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# service iptables status</span><br><span class="line"><span class="function">iptables: <span class="title">Firewall</span> <span class="title">is</span> <span class="title">not</span> <span class="title">running</span>.</span></span><br></pre></td></tr></table></figure><blockquote><p>查看打开的端口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# /etc/init.d/iptables status</span><br></pre></td></tr></table></figure><blockquote><p>开启端口</p></blockquote><p>①使用命令行：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# /sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">[root@sunys ~]# /etc/rc.d/init.d/iptables save #保存</span><br></pre></td></tr></table></figure><p></p><p>②或者修改/etc/sysconfig/iptables 文件，添加以下内容：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br><span class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><p></p><blockquote><p>重启/停止/停止/查看防火墙</p></blockquote><p>①永久关闭，重启后生效<br>开启： chkconfig iptables on<br>关闭： chkconfig iptables off<br>②即时生效，重启后失效<br>开启： service iptables start<br>关闭： service iptables stop</p><h2 id="查看-SELinux状态-amp-关闭-SELinux"><a href="#查看-SELinux状态-amp-关闭-SELinux" class="headerlink" title="查看 SELinux状态 &amp; 关闭 SELinux"></a>查看 SELinux状态 &amp; 关闭 SELinux</h2><h3 id="查看SELinux状态"><a href="#查看SELinux状态" class="headerlink" title="查看SELinux状态"></a>查看SELinux状态</h3><blockquote><p>① getenforce 命令是单词get（获取）和enforce(执行)连写，可查看selinux状态，与setenforce命令相反。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure><blockquote><p>② /usr/sbin/sestatus 查看详细参数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# /usr/sbin/sestatus</span><br><span class="line">SELinux status:                 enabled</span><br><span class="line">SELinuxfs mount:                /sys/fs/selinux</span><br><span class="line">SELinux root directory:         /etc/selinux</span><br><span class="line">Loaded policy name:             targeted</span><br><span class="line">Current mode:                   enforcing</span><br><span class="line">Mode from config file:          enforcing</span><br><span class="line">Policy MLS status:              enabled</span><br><span class="line">Policy deny_unknown status:     allowed</span><br><span class="line">Max kernel policy version:      28</span><br></pre></td></tr></table></figure><blockquote><p>SELinux status：selinux防火墙的状态，enabled表示启用selinux防火墙<br>Current mode： selinux防火墙当前的安全策略，enforcing 表示强</p></blockquote><hr><h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h3><blockquote><p>①临时关闭<br>setenforce 命令则是单词set（设置）和enforce(执行)连写，用于设置selinux防火墙状态，如： setenforce 0用于关闭selinux防火墙，但重启后失效</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# setenforce 0</span><br><span class="line">[root@sunys ~]# /usr/sbin/sestatus</span><br><span class="line">SELinux status:                 enabled</span><br><span class="line">SELinuxfs mount:                /sys/fs/selinux</span><br><span class="line">SELinux root directory:         /etc/selinux</span><br><span class="line">Loaded policy name:             targeted</span><br><span class="line">Current mode:                   permissive</span><br><span class="line">Mode from config file:          enforcing</span><br><span class="line">Policy MLS status:              enabled</span><br><span class="line">Policy deny_unknown status:     allowed</span><br><span class="line">Max kernel policy version:      28</span><br></pre></td></tr></table></figure><blockquote><p>②永久关闭<br>修改selinux的配置文件，重启后生效。<br>打开 selinux 配置文件,将SELINUX=enforcing改为SELINUX=disabled。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# vim /etc/selinux/config</span><br><span class="line"><span class="meta">#</span> This file controls the state of SELinux on the system.</span><br><span class="line"><span class="meta">#</span> SELINUX= can take one of these three values:</span><br><span class="line"><span class="meta">#</span>     enforcing - SELinux security policy is enforced.</span><br><span class="line"><span class="meta">#</span>     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line"><span class="meta">#</span>     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=enforcing</span><br><span class="line"><span class="meta">#</span> SELINUXTYPE= can take one of three two values:</span><br><span class="line"><span class="meta">#</span>     targeted - Targeted processes are protected,</span><br><span class="line"><span class="meta">#</span>     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="line"><span class="meta">#</span>     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure><blockquote><p>重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# reboot</span><br></pre></td></tr></table></figure><blockquote><p>验证</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# /usr/sbin/sestatus</span><br><span class="line">SELinux status:                 disabled</span><br><span class="line">[root@sunys ~]# getenforce</span><br><span class="line">Disabled</span><br></pre></td></tr></table></figure><h2 id="CentOS下开启SSH-Server服务"><a href="#CentOS下开启SSH-Server服务" class="headerlink" title="CentOS下开启SSH Server服务"></a>CentOS下开启SSH Server服务</h2><blockquote><p>查看SSH是否安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# rpm -qa | grep ssh</span><br></pre></td></tr></table></figure><blockquote><p>若没安装SSH则可输入一下命令安装</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# yum install openssh-server</span><br></pre></td></tr></table></figure><blockquote><p>启动SSH服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# systemctl start sshd</span><br></pre></td></tr></table></figure><blockquote><p>重启SSH服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# systemctl restart  sshd</span><br></pre></td></tr></table></figure><blockquote><p>停止SSH服务</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# systemctl stop sshd</span><br></pre></td></tr></table></figure><blockquote><p>启动后可输入一下命令查看是否启动22端口（可略）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# netstat -antp | grep sshd</span><br></pre></td></tr></table></figure><blockquote><p>设置SSH服务为开机启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# systemctl enable sshd</span><br></pre></td></tr></table></figure><blockquote><p>设置禁止SSH开机启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# systemctl disable sshd</span><br></pre></td></tr></table></figure><h2 id="linux下java读取串口相关问题"><a href="#linux下java读取串口相关问题" class="headerlink" title="linux下java读取串口相关问题"></a>linux下java读取串口相关问题</h2><h3 id="权限相关问题-No-permission-to-create-lock-file"><a href="#权限相关问题-No-permission-to-create-lock-file" class="headerlink" title="权限相关问题 No permission to create lock file"></a>权限相关问题 No permission to create lock file</h3><p><strong><em>issue:</em></strong></p><blockquote><p>CentOS下部署短信猫时报错：check_group_uucp(): error testing lock file creation Error details:权限不够check_lock_status: No permission to create lock file.please see: How can I use Lock Files with rxtx? in INSTALL</p></blockquote><p><strong><em>cause:</em></strong></p><blockquote><p>这个问题源于试图在/ var / lock中创建锁文件的rxtx包。 可以通过更改访问权限（以root身份）来解决此问题</p></blockquote><h4 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h4><blockquote><p>查找/etc下的groups文件，但是没有找到。只有group、group- 这2个文件，其中group文件就是我们要找的。<br>打开此文件，将如下2段修改：<br>uucp:x:14:uucp 修改为 uucp:x:14:uucp,ebm<br>lock:x:54: 修改为 lock:x:54:ebm<br>修改这个文件后，必须重启系统，才能使之起效</p></blockquote><h4 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h4><blockquote><p>执行如下命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# chgrp uucp /var/lock/</span><br><span class="line">[root@sunys ~]# chmod g+w /var/lock/</span><br></pre></td></tr></table></figure><h3 id="文件已存在-File-exists"><a href="#文件已存在-File-exists" class="headerlink" title="文件已存在 File exists"></a>文件已存在 File exists</h3><p><strong><em>issue:</em></strong></p><blockquote><p>RXTX fhs_lock() Error: creating lock file: /var/lock/LCK..ttyS0: 文件已存在</p></blockquote><p><strong><em>cause:</em></strong></p><blockquote><p>有多个进程同时使用串口，端口被占用</p></blockquote><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>执行如下命令<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sunys ~]# rm /var/lock/LCK..ttyS0</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> technology </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
